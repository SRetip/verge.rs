{
  "openapi": "3.0.1",
  "info": {
    "title": "Verge.io API",
    "description": "API to interact with the Verge.io Cloud API",
    "termsOfService": "http://verge.io/terms/",
    "contact": {
      "name": "Verge.io",
      "url": "http://verge.io/",
      "email": "support@verge.io"
    },
    "license": {
      "name": "Terms",
      "url": "http://verge.io/terms/"
    },
    "version": "4.0"
  },
  "servers": [
    {
      "url": "/api/v4"
    }
  ],
  "security": [
    {
      "token": []
    }
  ],
  "tags": [
    {
      "name": "auth_source_states",
      "description": ""
    },
    {
      "name": "auth_sources",
      "description": ""
    },
    {
      "name": "billing",
      "description": ""
    },
    {
      "name": "billing_actions",
      "description": ""
    },
    {
      "name": "catalog_logs",
      "description": ""
    },
    {
      "name": "catalog_repositories",
      "description": ""
    },
    {
      "name": "catalog_repository_actions",
      "description": ""
    },
    {
      "name": "catalog_repository_logs",
      "description": ""
    },
    {
      "name": "catalog_repository_status",
      "description": ""
    },
    {
      "name": "catalogs",
      "description": ""
    },
    {
      "name": "certificates",
      "description": ""
    },
    {
      "name": "clone_iso",
      "description": ""
    },
    {
      "name": "clone_iso_actions",
      "description": ""
    },
    {
      "name": "cloud_restore",
      "description": ""
    },
    {
      "name": "cloud_snapshot_actions",
      "description": ""
    },
    {
      "name": "cloud_snapshot_tenant_actions",
      "description": ""
    },
    {
      "name": "cloud_snapshot_tenants",
      "description": ""
    },
    {
      "name": "cloud_snapshot_vm_actions",
      "description": ""
    },
    {
      "name": "cloud_snapshot_vms",
      "description": ""
    },
    {
      "name": "cloud_snapshots",
      "description": ""
    },
    {
      "name": "cloudinit_files",
      "description": ""
    },
    {
      "name": "cluster_actions",
      "description": ""
    },
    {
      "name": "cluster_stats_history_long",
      "description": ""
    },
    {
      "name": "cluster_stats_history_short",
      "description": ""
    },
    {
      "name": "cluster_status",
      "description": ""
    },
    {
      "name": "cluster_tier_stats",
      "description": ""
    },
    {
      "name": "cluster_tier_stats_history_long",
      "description": ""
    },
    {
      "name": "cluster_tier_stats_history_short",
      "description": ""
    },
    {
      "name": "cluster_tier_status",
      "description": ""
    },
    {
      "name": "cluster_tiers",
      "description": ""
    },
    {
      "name": "clusters",
      "description": ""
    },
    {
      "name": "file_actions",
      "description": ""
    },
    {
      "name": "files",
      "description": ""
    },
    {
      "name": "files_public_links",
      "description": ""
    },
    {
      "name": "group_logs",
      "description": ""
    },
    {
      "name": "groups",
      "description": ""
    },
    {
      "name": "help_actions",
      "description": ""
    },
    {
      "name": "help_search",
      "description": ""
    },
    {
      "name": "license_actions",
      "description": ""
    },
    {
      "name": "licenses",
      "description": ""
    },
    {
      "name": "logs",
      "description": ""
    },
    {
      "name": "machine_console",
      "description": ""
    },
    {
      "name": "machine_console_active",
      "description": ""
    },
    {
      "name": "machine_console_active_chat",
      "description": ""
    },
    {
      "name": "machine_device_gpu_stats_history_long",
      "description": ""
    },
    {
      "name": "machine_device_gpu_stats_history_short",
      "description": ""
    },
    {
      "name": "machine_device_settings_gpu",
      "description": ""
    },
    {
      "name": "machine_device_settings_nvidia_vgpu",
      "description": ""
    },
    {
      "name": "machine_device_settings_sriov_nic",
      "description": ""
    },
    {
      "name": "machine_device_settings_tpm",
      "description": ""
    },
    {
      "name": "machine_device_settings_usb",
      "description": ""
    },
    {
      "name": "machine_device_stats",
      "description": ""
    },
    {
      "name": "machine_device_status",
      "description": ""
    },
    {
      "name": "machine_devices",
      "description": ""
    },
    {
      "name": "machine_drive_phys",
      "description": ""
    },
    {
      "name": "machine_drive_stats",
      "description": ""
    },
    {
      "name": "machine_drive_stats_history_long",
      "description": ""
    },
    {
      "name": "machine_drive_stats_history_short",
      "description": ""
    },
    {
      "name": "machine_drive_status",
      "description": ""
    },
    {
      "name": "machine_drives",
      "description": ""
    },
    {
      "name": "machine_logs",
      "description": ""
    },
    {
      "name": "machine_nic_stats",
      "description": ""
    },
    {
      "name": "machine_nic_stats_history_long",
      "description": ""
    },
    {
      "name": "machine_nic_stats_history_short",
      "description": ""
    },
    {
      "name": "machine_nic_status",
      "description": ""
    },
    {
      "name": "machine_nics",
      "description": ""
    },
    {
      "name": "machine_snapshots",
      "description": ""
    },
    {
      "name": "machine_stats",
      "description": ""
    },
    {
      "name": "machine_stats_history_long",
      "description": ""
    },
    {
      "name": "machine_stats_history_short",
      "description": ""
    },
    {
      "name": "machine_status",
      "description": ""
    },
    {
      "name": "machines",
      "description": ""
    },
    {
      "name": "members",
      "description": ""
    },
    {
      "name": "messages",
      "description": ""
    },
    {
      "name": "meta_data",
      "description": ""
    },
    {
      "name": "node_actions",
      "description": ""
    },
    {
      "name": "node_allocated_gpus",
      "description": ""
    },
    {
      "name": "node_device_instances",
      "description": ""
    },
    {
      "name": "node_drivers",
      "description": ""
    },
    {
      "name": "node_gpu_instances",
      "description": ""
    },
    {
      "name": "node_gpu_stats",
      "description": ""
    },
    {
      "name": "node_gpu_stats_history_long",
      "description": ""
    },
    {
      "name": "node_gpu_stats_history_short",
      "description": ""
    },
    {
      "name": "node_gpus",
      "description": ""
    },
    {
      "name": "node_lldp_neighbors",
      "description": ""
    },
    {
      "name": "node_memory",
      "description": ""
    },
    {
      "name": "node_nvidia_vgpu_devices",
      "description": ""
    },
    {
      "name": "node_nvidia_vgpu_profiles",
      "description": ""
    },
    {
      "name": "node_pci_devices",
      "description": ""
    },
    {
      "name": "node_queries",
      "description": ""
    },
    {
      "name": "node_resources",
      "description": ""
    },
    {
      "name": "node_sriov_nic_devices",
      "description": ""
    },
    {
      "name": "node_stats",
      "description": ""
    },
    {
      "name": "node_usb_devices",
      "description": ""
    },
    {
      "name": "nodes",
      "description": ""
    },
    {
      "name": "note_actions",
      "description": ""
    },
    {
      "name": "nvidia_vgpu_profiles",
      "description": ""
    },
    {
      "name": "oidc_application_groups",
      "description": ""
    },
    {
      "name": "oidc_application_logs",
      "description": ""
    },
    {
      "name": "oidc_application_users",
      "description": ""
    },
    {
      "name": "oidc_applications",
      "description": ""
    },
    {
      "name": "permissions",
      "description": ""
    },
    {
      "name": "recipe_questions",
      "description": ""
    },
    {
      "name": "recipe_sections",
      "description": ""
    },
    {
      "name": "recipe_status",
      "description": ""
    },
    {
      "name": "repair_servers",
      "description": ""
    },
    {
      "name": "resource_group_settings_nvidia_vgpu",
      "description": ""
    },
    {
      "name": "resource_group_settings_sriov_nic",
      "description": ""
    },
    {
      "name": "resource_group_settings_usb",
      "description": ""
    },
    {
      "name": "resource_groups",
      "description": ""
    },
    {
      "name": "resource_rules",
      "description": ""
    },
    {
      "name": "root_certificates",
      "description": ""
    },
    {
      "name": "schedule_task_events",
      "description": ""
    },
    {
      "name": "schedule_task_setting_schema",
      "description": ""
    },
    {
      "name": "schedule_task_settings",
      "description": ""
    },
    {
      "name": "schedule_tasks",
      "description": ""
    },
    {
      "name": "schedules",
      "description": ""
    },
    {
      "name": "schema_version_actions",
      "description": ""
    },
    {
      "name": "schema_versions",
      "description": ""
    },
    {
      "name": "settings",
      "description": ""
    },
    {
      "name": "settings_actions",
      "description": ""
    },
    {
      "name": "shared_object_actions",
      "description": ""
    },
    {
      "name": "shared_objects",
      "description": ""
    },
    {
      "name": "site_actions",
      "description": ""
    },
    {
      "name": "site_logs",
      "description": ""
    },
    {
      "name": "site_sync_stats",
      "description": ""
    },
    {
      "name": "site_sync_stats_history_long",
      "description": ""
    },
    {
      "name": "site_syncs_incoming",
      "description": ""
    },
    {
      "name": "site_syncs_incoming_actions",
      "description": ""
    },
    {
      "name": "site_syncs_incoming_logs",
      "description": ""
    },
    {
      "name": "site_syncs_incoming_verified",
      "description": ""
    },
    {
      "name": "site_syncs_incoming_verified_actions",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_actions",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_logs",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_profile_periods",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_queue",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_remote_snap_actions",
      "description": ""
    },
    {
      "name": "site_syncs_outgoing_remote_snaps",
      "description": ""
    },
    {
      "name": "sites",
      "description": ""
    },
    {
      "name": "smtp_actions",
      "description": ""
    },
    {
      "name": "smtp_logs",
      "description": ""
    },
    {
      "name": "smtp_outbox",
      "description": ""
    },
    {
      "name": "smtp_queue",
      "description": ""
    },
    {
      "name": "smtp_settings",
      "description": ""
    },
    {
      "name": "snapshot_profile_actions",
      "description": ""
    },
    {
      "name": "snapshot_profile_periods",
      "description": ""
    },
    {
      "name": "snapshot_profiles",
      "description": ""
    },
    {
      "name": "storage_tier_stats",
      "description": ""
    },
    {
      "name": "storage_tier_stats_history_long",
      "description": ""
    },
    {
      "name": "storage_tier_stats_history_short",
      "description": ""
    },
    {
      "name": "storage_tiers",
      "description": ""
    },
    {
      "name": "subscription_profiles",
      "description": ""
    },
    {
      "name": "subscriptions",
      "description": ""
    },
    {
      "name": "swagger_actions",
      "description": ""
    },
    {
      "name": "system",
      "description": ""
    },
    {
      "name": "system_actions",
      "description": ""
    },
    {
      "name": "system_diagnostic_actions",
      "description": ""
    },
    {
      "name": "system_diagnostics",
      "description": ""
    },
    {
      "name": "tenant_actions",
      "description": ""
    },
    {
      "name": "tenant_logs",
      "description": ""
    },
    {
      "name": "tenant_node_actions",
      "description": ""
    },
    {
      "name": "tenant_node_queries",
      "description": ""
    },
    {
      "name": "tenant_nodes",
      "description": ""
    },
    {
      "name": "tenant_recipe_actions",
      "description": ""
    },
    {
      "name": "tenant_recipe_instances",
      "description": ""
    },
    {
      "name": "tenant_recipe_logs",
      "description": ""
    },
    {
      "name": "tenant_recipes",
      "description": ""
    },
    {
      "name": "tenant_snapshot_actions",
      "description": ""
    },
    {
      "name": "tenant_snapshots",
      "description": ""
    },
    {
      "name": "tenant_stats",
      "description": ""
    },
    {
      "name": "tenant_stats_history_long",
      "description": ""
    },
    {
      "name": "tenant_stats_history_short",
      "description": ""
    },
    {
      "name": "tenant_status",
      "description": ""
    },
    {
      "name": "tenant_storage",
      "description": ""
    },
    {
      "name": "tenants",
      "description": ""
    },
    {
      "name": "ui_branding",
      "description": ""
    },
    {
      "name": "update_actions",
      "description": ""
    },
    {
      "name": "update_branches",
      "description": ""
    },
    {
      "name": "update_file_finish",
      "description": ""
    },
    {
      "name": "update_file_verify",
      "description": ""
    },
    {
      "name": "update_files",
      "description": ""
    },
    {
      "name": "update_logs",
      "description": ""
    },
    {
      "name": "update_packages",
      "description": ""
    },
    {
      "name": "update_settings",
      "description": ""
    },
    {
      "name": "update_source_packages",
      "description": ""
    },
    {
      "name": "update_source_status",
      "description": ""
    },
    {
      "name": "update_sources",
      "description": ""
    },
    {
      "name": "user",
      "description": ""
    },
    {
      "name": "user_actions",
      "description": ""
    },
    {
      "name": "user_devices",
      "description": ""
    },
    {
      "name": "user_logs",
      "description": ""
    },
    {
      "name": "user_messages",
      "description": ""
    },
    {
      "name": "user_settings",
      "description": ""
    },
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "v3_vm_import",
      "description": ""
    },
    {
      "name": "vm_actions",
      "description": ""
    },
    {
      "name": "vm_console_actions",
      "description": ""
    },
    {
      "name": "vm_favorites",
      "description": ""
    },
    {
      "name": "vm_import_logs",
      "description": ""
    },
    {
      "name": "vm_imports",
      "description": ""
    },
    {
      "name": "vm_paste_configs",
      "description": ""
    },
    {
      "name": "vm_recipe_actions",
      "description": ""
    },
    {
      "name": "vm_recipe_instances",
      "description": ""
    },
    {
      "name": "vm_recipe_logs",
      "description": ""
    },
    {
      "name": "vm_recipes",
      "description": ""
    },
    {
      "name": "vm_service_antivirus",
      "description": ""
    },
    {
      "name": "vm_service_cifs",
      "description": ""
    },
    {
      "name": "vm_service_nfs",
      "description": ""
    },
    {
      "name": "vm_service_queries",
      "description": ""
    },
    {
      "name": "vm_service_user_logs",
      "description": ""
    },
    {
      "name": "vm_service_user_status",
      "description": ""
    },
    {
      "name": "vm_service_users",
      "description": ""
    },
    {
      "name": "vm_services",
      "description": ""
    },
    {
      "name": "vms",
      "description": ""
    },
    {
      "name": "vmware_container_actions",
      "description": ""
    },
    {
      "name": "vmware_container_api",
      "description": ""
    },
    {
      "name": "vmware_container_backup_job_actions",
      "description": ""
    },
    {
      "name": "vmware_container_queries",
      "description": ""
    },
    {
      "name": "vmware_container_restore_job_actions",
      "description": ""
    },
    {
      "name": "vmware_container_storage",
      "description": ""
    },
    {
      "name": "vmware_containers",
      "description": ""
    },
    {
      "name": "vnet_actions",
      "description": ""
    },
    {
      "name": "vnet_addresses",
      "description": ""
    },
    {
      "name": "vnet_bgp",
      "description": ""
    },
    {
      "name": "vnet_bgp_interface_commands",
      "description": ""
    },
    {
      "name": "vnet_bgp_interfaces",
      "description": ""
    },
    {
      "name": "vnet_bgp_ip",
      "description": ""
    },
    {
      "name": "vnet_bgp_routemap_commands",
      "description": ""
    },
    {
      "name": "vnet_bgp_routemaps",
      "description": ""
    },
    {
      "name": "vnet_bgp_router_commands",
      "description": ""
    },
    {
      "name": "vnet_bgp_routers",
      "description": ""
    },
    {
      "name": "vnet_bond_interfaces",
      "description": ""
    },
    {
      "name": "vnet_bonds",
      "description": ""
    },
    {
      "name": "vnet_cidrs",
      "description": ""
    },
    {
      "name": "vnet_dns_views",
      "description": ""
    },
    {
      "name": "vnet_dns_zone_records",
      "description": ""
    },
    {
      "name": "vnet_dns_zones",
      "description": ""
    },
    {
      "name": "vnet_eigrp_router_commands",
      "description": ""
    },
    {
      "name": "vnet_eigrp_routers",
      "description": ""
    },
    {
      "name": "vnet_hosts",
      "description": ""
    },
    {
      "name": "vnet_ipsec_connections",
      "description": ""
    },
    {
      "name": "vnet_ipsec_phase1s",
      "description": ""
    },
    {
      "name": "vnet_ipsec_phase2s",
      "description": ""
    },
    {
      "name": "vnet_ipsecs",
      "description": ""
    },
    {
      "name": "vnet_monitor_stats_history_long",
      "description": ""
    },
    {
      "name": "vnet_monitor_stats_history_short",
      "description": ""
    },
    {
      "name": "vnet_ospf_commands",
      "description": ""
    },
    {
      "name": "vnet_proxy",
      "description": ""
    },
    {
      "name": "vnet_proxy_tenants",
      "description": ""
    },
    {
      "name": "vnet_queries",
      "description": ""
    },
    {
      "name": "vnet_rule_aliases",
      "description": ""
    },
    {
      "name": "vnet_rule_references",
      "description": ""
    },
    {
      "name": "vnet_rules",
      "description": ""
    },
    {
      "name": "vnet_wireguard_peer_status",
      "description": ""
    },
    {
      "name": "vnet_wireguard_peers",
      "description": ""
    },
    {
      "name": "vnet_wireguards",
      "description": ""
    },
    {
      "name": "vnet_wires",
      "description": ""
    },
    {
      "name": "vnets",
      "description": ""
    },
    {
      "name": "volume_actions",
      "description": ""
    },
    {
      "name": "volume_antivirus",
      "description": ""
    },
    {
      "name": "volume_antivirus_actions",
      "description": ""
    },
    {
      "name": "volume_antivirus_infections",
      "description": ""
    },
    {
      "name": "volume_antivirus_logs",
      "description": ""
    },
    {
      "name": "volume_antivirus_stats",
      "description": ""
    },
    {
      "name": "volume_antivirus_status",
      "description": ""
    },
    {
      "name": "volume_browser",
      "description": ""
    },
    {
      "name": "volume_cifs_shares",
      "description": ""
    },
    {
      "name": "volume_logs",
      "description": ""
    },
    {
      "name": "volume_nfs_shares",
      "description": ""
    },
    {
      "name": "volume_share_logs",
      "description": ""
    },
    {
      "name": "volume_share_status",
      "description": ""
    },
    {
      "name": "volume_snapshots",
      "description": ""
    },
    {
      "name": "volume_status",
      "description": ""
    },
    {
      "name": "volume_sync_actions",
      "description": ""
    },
    {
      "name": "volume_sync_logs",
      "description": ""
    },
    {
      "name": "volume_sync_progresses",
      "description": ""
    },
    {
      "name": "volume_syncs",
      "description": ""
    },
    {
      "name": "volume_vm_export_actions",
      "description": ""
    },
    {
      "name": "volume_vm_export_stats",
      "description": ""
    },
    {
      "name": "volume_vm_exports",
      "description": ""
    },
    {
      "name": "volumes",
      "description": ""
    },
    {
      "name": "vsan_queries",
      "description": ""
    },
    {
      "name": "Database Tables",
      "description": "API queries for database/table schemas"
    }
  ],
  "paths": {
    "/permissions": {
      "get": {
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "description": "permissions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/permissions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "permissions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/permissions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/auth_source_states": {
      "get": {
        "tags": [
          "auth_source_states"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "auth_source_states"
        ],
        "requestBody": {
          "description": "auth_source_states body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_source_states_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/auth_source_states/{state}": {
      "get": {
        "tags": [
          "auth_source_states"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "auth_source_states"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "auth_source_states body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_source_states_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "auth_source_states"
        ],
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/auth_sources": {
      "get": {
        "tags": [
          "auth_sources"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "auth_sources"
        ],
        "requestBody": {
          "description": "auth_sources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_sources_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/auth_sources/{id}": {
      "get": {
        "tags": [
          "auth_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "auth_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "auth_sources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_sources_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "auth_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/billing": {
      "get": {
        "tags": [
          "billing"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "billing"
        ],
        "requestBody": {
          "description": "billing body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/billing/{id}": {
      "get": {
        "tags": [
          "billing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "billing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "billing body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "billing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/billing_actions": {
      "get": {
        "tags": [
          "billing_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "billing_actions"
        ],
        "requestBody": {
          "description": "billing_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/billing_actions/{id}": {
      "get": {
        "tags": [
          "billing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "billing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "billing_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "billing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog_logs": {
      "get": {
        "tags": [
          "catalog_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog_logs"
        ],
        "requestBody": {
          "description": "catalog_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalog_logs/{id}": {
      "get": {
        "tags": [
          "catalog_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalog_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalog_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog_repositories": {
      "get": {
        "tags": [
          "catalog_repositories"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog_repositories"
        ],
        "requestBody": {
          "description": "catalog_repositories body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repositories_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalog_repositories/{id}": {
      "get": {
        "tags": [
          "catalog_repositories"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog_repositories"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalog_repositories body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repositories_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalog_repositories"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog_repository_actions": {
      "get": {
        "tags": [
          "catalog_repository_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog_repository_actions"
        ],
        "requestBody": {
          "description": "catalog_repository_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalog_repository_actions/{id}": {
      "get": {
        "tags": [
          "catalog_repository_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog_repository_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalog_repository_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalog_repository_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog_repository_logs": {
      "get": {
        "tags": [
          "catalog_repository_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog_repository_logs"
        ],
        "requestBody": {
          "description": "catalog_repository_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalog_repository_logs/{id}": {
      "get": {
        "tags": [
          "catalog_repository_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog_repository_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalog_repository_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalog_repository_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalog_repository_status": {
      "get": {
        "tags": [
          "catalog_repository_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog_repository_status"
        ],
        "requestBody": {
          "description": "catalog_repository_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalog_repository_status/{id}": {
      "get": {
        "tags": [
          "catalog_repository_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog_repository_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalog_repository_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_repository_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalog_repository_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/catalogs": {
      "get": {
        "tags": [
          "catalogs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalogs"
        ],
        "requestBody": {
          "description": "catalogs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalogs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/catalogs/{id}": {
      "get": {
        "tags": [
          "catalogs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "catalogs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalogs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "catalogs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/certificates": {
      "get": {
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "certificates"
        ],
        "requestBody": {
          "description": "certificates body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificates_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/certificates/{id}": {
      "get": {
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "certificates body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificates_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/clone_iso": {
      "get": {
        "tags": [
          "clone_iso"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "clone_iso"
        ],
        "requestBody": {
          "description": "clone_iso body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clone_iso_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/clone_iso/{id}": {
      "get": {
        "tags": [
          "clone_iso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "clone_iso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "clone_iso body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clone_iso_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "clone_iso"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/clone_iso_actions": {
      "get": {
        "tags": [
          "clone_iso_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "clone_iso_actions"
        ],
        "requestBody": {
          "description": "clone_iso_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clone_iso_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/clone_iso_actions/{id}": {
      "get": {
        "tags": [
          "clone_iso_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "clone_iso_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "clone_iso_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clone_iso_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "clone_iso_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_restore": {
      "get": {
        "tags": [
          "cloud_restore"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_restore"
        ],
        "requestBody": {
          "description": "cloud_restore body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_restore_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_restore/{id}": {
      "get": {
        "tags": [
          "cloud_restore"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_restore"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_restore body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_restore_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_restore"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshot_actions": {
      "get": {
        "tags": [
          "cloud_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshot_actions"
        ],
        "requestBody": {
          "description": "cloud_snapshot_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshot_actions/{id}": {
      "get": {
        "tags": [
          "cloud_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshot_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshot_tenant_actions": {
      "get": {
        "tags": [
          "cloud_snapshot_tenant_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshot_tenant_actions"
        ],
        "requestBody": {
          "description": "cloud_snapshot_tenant_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_tenant_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshot_tenant_actions/{id}": {
      "get": {
        "tags": [
          "cloud_snapshot_tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshot_tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshot_tenant_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_tenant_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshot_tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshot_tenants": {
      "get": {
        "tags": [
          "cloud_snapshot_tenants"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshot_tenants"
        ],
        "requestBody": {
          "description": "cloud_snapshot_tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_tenants_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshot_tenants/{id}": {
      "get": {
        "tags": [
          "cloud_snapshot_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshot_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshot_tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_tenants_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshot_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshot_vm_actions": {
      "get": {
        "tags": [
          "cloud_snapshot_vm_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshot_vm_actions"
        ],
        "requestBody": {
          "description": "cloud_snapshot_vm_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_vm_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshot_vm_actions/{id}": {
      "get": {
        "tags": [
          "cloud_snapshot_vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshot_vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshot_vm_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_vm_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshot_vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshot_vms": {
      "get": {
        "tags": [
          "cloud_snapshot_vms"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshot_vms"
        ],
        "requestBody": {
          "description": "cloud_snapshot_vms body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_vms_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshot_vms/{id}": {
      "get": {
        "tags": [
          "cloud_snapshot_vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshot_vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshot_vms body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshot_vms_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshot_vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloud_snapshots": {
      "get": {
        "tags": [
          "cloud_snapshots"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloud_snapshots"
        ],
        "requestBody": {
          "description": "cloud_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshots_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloud_snapshots/{id}": {
      "get": {
        "tags": [
          "cloud_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloud_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloud_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloud_snapshots_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloud_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cloudinit_files": {
      "get": {
        "tags": [
          "cloudinit_files"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cloudinit_files"
        ],
        "requestBody": {
          "description": "cloudinit_files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudinit_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cloudinit_files/{id}": {
      "get": {
        "tags": [
          "cloudinit_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cloudinit_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cloudinit_files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudinit_files_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cloudinit_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_actions": {
      "get": {
        "tags": [
          "cluster_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_actions"
        ],
        "requestBody": {
          "description": "cluster_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_actions/{id}": {
      "get": {
        "tags": [
          "cluster_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_stats_history_long": {
      "get": {
        "tags": [
          "cluster_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_stats_history_long"
        ],
        "requestBody": {
          "description": "cluster_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_stats_history_long/{id}": {
      "get": {
        "tags": [
          "cluster_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_stats_history_short": {
      "get": {
        "tags": [
          "cluster_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_stats_history_short"
        ],
        "requestBody": {
          "description": "cluster_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_stats_history_short/{id}": {
      "get": {
        "tags": [
          "cluster_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_status": {
      "get": {
        "tags": [
          "cluster_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_status"
        ],
        "requestBody": {
          "description": "cluster_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_status/{id}": {
      "get": {
        "tags": [
          "cluster_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_tier_stats": {
      "get": {
        "tags": [
          "cluster_tier_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_tier_stats"
        ],
        "requestBody": {
          "description": "cluster_tier_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_tier_stats/{id}": {
      "get": {
        "tags": [
          "cluster_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_tier_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_tier_stats_history_long": {
      "get": {
        "tags": [
          "cluster_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_tier_stats_history_long"
        ],
        "requestBody": {
          "description": "cluster_tier_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_tier_stats_history_long/{id}": {
      "get": {
        "tags": [
          "cluster_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_tier_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_tier_stats_history_short": {
      "get": {
        "tags": [
          "cluster_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_tier_stats_history_short"
        ],
        "requestBody": {
          "description": "cluster_tier_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_tier_stats_history_short/{id}": {
      "get": {
        "tags": [
          "cluster_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_tier_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_tier_status": {
      "get": {
        "tags": [
          "cluster_tier_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_tier_status"
        ],
        "requestBody": {
          "description": "cluster_tier_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_tier_status/{id}": {
      "get": {
        "tags": [
          "cluster_tier_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_tier_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_tier_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tier_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_tier_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/cluster_tiers": {
      "get": {
        "tags": [
          "cluster_tiers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster_tiers"
        ],
        "requestBody": {
          "description": "cluster_tiers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tiers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cluster_tiers/{id}": {
      "get": {
        "tags": [
          "cluster_tiers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cluster_tiers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cluster_tiers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_tiers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "cluster_tiers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/clusters": {
      "get": {
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "clusters"
        ],
        "requestBody": {
          "description": "clusters body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clusters_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/clusters/{id}": {
      "get": {
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "clusters body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clusters_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/file_actions": {
      "get": {
        "tags": [
          "file_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "file_actions"
        ],
        "requestBody": {
          "description": "file_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/file_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/file_actions/{id}": {
      "get": {
        "tags": [
          "file_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "file_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "file_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/file_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "file_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "requestBody": {
          "description": "files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/files/{id}": {
      "get": {
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/files_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/files_public_links": {
      "get": {
        "tags": [
          "files_public_links"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files_public_links"
        ],
        "requestBody": {
          "description": "files_public_links body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/files_public_links_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/files_public_links/{id}": {
      "get": {
        "tags": [
          "files_public_links"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "files_public_links"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "files_public_links body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/files_public_links_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "files_public_links"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/group_logs": {
      "get": {
        "tags": [
          "group_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group_logs"
        ],
        "requestBody": {
          "description": "group_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/group_logs/{id}": {
      "get": {
        "tags": [
          "group_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "group_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "group_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "group_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "requestBody": {
          "description": "groups body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groups_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "groups body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groups_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/help_actions": {
      "get": {
        "tags": [
          "help_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "help_actions"
        ],
        "requestBody": {
          "description": "help_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/help_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/help_actions/{id}": {
      "get": {
        "tags": [
          "help_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "help_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "help_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/help_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "help_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/help_search": {
      "get": {
        "tags": [
          "help_search"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "help_search"
        ],
        "requestBody": {
          "description": "help_search body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/help_search_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/help_search/{id}": {
      "get": {
        "tags": [
          "help_search"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "help_search"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "help_search body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/help_search_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "help_search"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/license_actions": {
      "get": {
        "tags": [
          "license_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "license_actions"
        ],
        "requestBody": {
          "description": "license_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/license_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/license_actions/{id}": {
      "get": {
        "tags": [
          "license_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "license_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "license_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/license_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "license_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/licenses": {
      "get": {
        "tags": [
          "licenses"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "licenses"
        ],
        "requestBody": {
          "description": "licenses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/licenses_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/licenses/{id}": {
      "get": {
        "tags": [
          "licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "licenses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/licenses_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "logs"
        ],
        "requestBody": {
          "description": "logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/logs/{id}": {
      "get": {
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_console": {
      "get": {
        "tags": [
          "machine_console"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_console"
        ],
        "requestBody": {
          "description": "machine_console body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_console/{id}": {
      "get": {
        "tags": [
          "machine_console"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_console"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_console body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_console"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_console_active": {
      "get": {
        "tags": [
          "machine_console_active"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_console_active"
        ],
        "requestBody": {
          "description": "machine_console_active body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_active_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_console_active/{id}": {
      "get": {
        "tags": [
          "machine_console_active"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_console_active"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_console_active body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_active_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_console_active"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drives": {
      "get": {
        "tags": [
          "machine_drives"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drives"
        ],
        "requestBody": {
          "description": "machine_drives body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drives_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drives/{id}": {
      "get": {
        "tags": [
          "machine_drives"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drives"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drives body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drives_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drives"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_console_active_chat": {
      "get": {
        "tags": [
          "machine_console_active_chat"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_console_active_chat"
        ],
        "requestBody": {
          "description": "machine_console_active_chat body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_active_chat_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_console_active_chat/{id}": {
      "get": {
        "tags": [
          "machine_console_active_chat"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_console_active_chat"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_console_active_chat body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_console_active_chat_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_console_active_chat"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_gpu_stats_history_long": {
      "get": {
        "tags": [
          "machine_device_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_gpu_stats_history_long"
        ],
        "requestBody": {
          "description": "machine_device_gpu_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_gpu_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_gpu_stats_history_long/{id}": {
      "get": {
        "tags": [
          "machine_device_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_gpu_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_gpu_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_gpu_stats_history_short": {
      "get": {
        "tags": [
          "machine_device_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_gpu_stats_history_short"
        ],
        "requestBody": {
          "description": "machine_device_gpu_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_gpu_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_gpu_stats_history_short/{id}": {
      "get": {
        "tags": [
          "machine_device_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_gpu_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_gpu_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_settings_gpu": {
      "get": {
        "tags": [
          "machine_device_settings_gpu"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_settings_gpu"
        ],
        "requestBody": {
          "description": "machine_device_settings_gpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_gpu_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_settings_gpu/{id}": {
      "get": {
        "tags": [
          "machine_device_settings_gpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_settings_gpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_settings_gpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_gpu_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_settings_gpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_settings_nvidia_vgpu": {
      "get": {
        "tags": [
          "machine_device_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_settings_nvidia_vgpu"
        ],
        "requestBody": {
          "description": "machine_device_settings_nvidia_vgpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_nvidia_vgpu_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_settings_nvidia_vgpu/{id}": {
      "get": {
        "tags": [
          "machine_device_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_settings_nvidia_vgpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_nvidia_vgpu_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_settings_sriov_nic": {
      "get": {
        "tags": [
          "machine_device_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_settings_sriov_nic"
        ],
        "requestBody": {
          "description": "machine_device_settings_sriov_nic body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_sriov_nic_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_settings_sriov_nic/{id}": {
      "get": {
        "tags": [
          "machine_device_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_settings_sriov_nic body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_sriov_nic_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_settings_tpm": {
      "get": {
        "tags": [
          "machine_device_settings_tpm"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_settings_tpm"
        ],
        "requestBody": {
          "description": "machine_device_settings_tpm body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_tpm_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_settings_tpm/{id}": {
      "get": {
        "tags": [
          "machine_device_settings_tpm"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_settings_tpm"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_settings_tpm body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_tpm_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_settings_tpm"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_settings_usb": {
      "get": {
        "tags": [
          "machine_device_settings_usb"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_settings_usb"
        ],
        "requestBody": {
          "description": "machine_device_settings_usb body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_usb_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_settings_usb/{id}": {
      "get": {
        "tags": [
          "machine_device_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_settings_usb body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_settings_usb_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_stats": {
      "get": {
        "tags": [
          "machine_device_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_stats"
        ],
        "requestBody": {
          "description": "machine_device_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_stats/{id}": {
      "get": {
        "tags": [
          "machine_device_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_device_status": {
      "get": {
        "tags": [
          "machine_device_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_device_status"
        ],
        "requestBody": {
          "description": "machine_device_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_device_status/{id}": {
      "get": {
        "tags": [
          "machine_device_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_device_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_device_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_device_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_device_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_devices": {
      "get": {
        "tags": [
          "machine_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_devices"
        ],
        "requestBody": {
          "description": "machine_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_devices/{id}": {
      "get": {
        "tags": [
          "machine_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drive_phys": {
      "get": {
        "tags": [
          "machine_drive_phys"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drive_phys"
        ],
        "requestBody": {
          "description": "machine_drive_phys body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_phys_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drive_phys/{id}": {
      "get": {
        "tags": [
          "machine_drive_phys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drive_phys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drive_phys body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_phys_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drive_phys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drive_stats": {
      "get": {
        "tags": [
          "machine_drive_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drive_stats"
        ],
        "requestBody": {
          "description": "machine_drive_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drive_stats/{id}": {
      "get": {
        "tags": [
          "machine_drive_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drive_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drive_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drive_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drive_stats_history_long": {
      "get": {
        "tags": [
          "machine_drive_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drive_stats_history_long"
        ],
        "requestBody": {
          "description": "machine_drive_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drive_stats_history_long/{id}": {
      "get": {
        "tags": [
          "machine_drive_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drive_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drive_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drive_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drive_stats_history_short": {
      "get": {
        "tags": [
          "machine_drive_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drive_stats_history_short"
        ],
        "requestBody": {
          "description": "machine_drive_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drive_stats_history_short/{id}": {
      "get": {
        "tags": [
          "machine_drive_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drive_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drive_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drive_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_drive_status": {
      "get": {
        "tags": [
          "machine_drive_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_drive_status"
        ],
        "requestBody": {
          "description": "machine_drive_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_drive_status/{id}": {
      "get": {
        "tags": [
          "machine_drive_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_drive_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_drive_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_drive_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_drive_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machines": {
      "get": {
        "tags": [
          "machines"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machines"
        ],
        "requestBody": {
          "description": "machines body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machines_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machines/{id}": {
      "get": {
        "tags": [
          "machines"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machines"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machines body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machines_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machines"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_logs": {
      "get": {
        "tags": [
          "machine_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_logs"
        ],
        "requestBody": {
          "description": "machine_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_logs/{id}": {
      "get": {
        "tags": [
          "machine_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_nic_stats": {
      "get": {
        "tags": [
          "machine_nic_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_nic_stats"
        ],
        "requestBody": {
          "description": "machine_nic_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_nic_stats/{id}": {
      "get": {
        "tags": [
          "machine_nic_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_nic_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_nic_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_nic_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_nic_stats_history_long": {
      "get": {
        "tags": [
          "machine_nic_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_nic_stats_history_long"
        ],
        "requestBody": {
          "description": "machine_nic_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_nic_stats_history_long/{id}": {
      "get": {
        "tags": [
          "machine_nic_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_nic_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_nic_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_nic_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_nic_stats_history_short": {
      "get": {
        "tags": [
          "machine_nic_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_nic_stats_history_short"
        ],
        "requestBody": {
          "description": "machine_nic_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_nic_stats_history_short/{id}": {
      "get": {
        "tags": [
          "machine_nic_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_nic_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_nic_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_nic_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_nic_status": {
      "get": {
        "tags": [
          "machine_nic_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_nic_status"
        ],
        "requestBody": {
          "description": "machine_nic_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_nic_status/{id}": {
      "get": {
        "tags": [
          "machine_nic_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_nic_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_nic_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nic_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_nic_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_nics": {
      "get": {
        "tags": [
          "machine_nics"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_nics"
        ],
        "requestBody": {
          "description": "machine_nics body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nics_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_nics/{id}": {
      "get": {
        "tags": [
          "machine_nics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_nics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_nics body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_nics_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_nics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_snapshots": {
      "get": {
        "tags": [
          "machine_snapshots"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_snapshots"
        ],
        "requestBody": {
          "description": "machine_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_snapshots_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_snapshots/{id}": {
      "get": {
        "tags": [
          "machine_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_snapshots_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_stats": {
      "get": {
        "tags": [
          "machine_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_stats"
        ],
        "requestBody": {
          "description": "machine_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_stats/{id}": {
      "get": {
        "tags": [
          "machine_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_stats_history_long": {
      "get": {
        "tags": [
          "machine_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_stats_history_long"
        ],
        "requestBody": {
          "description": "machine_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_stats_history_long/{id}": {
      "get": {
        "tags": [
          "machine_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_stats_history_short": {
      "get": {
        "tags": [
          "machine_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_stats_history_short"
        ],
        "requestBody": {
          "description": "machine_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_stats_history_short/{id}": {
      "get": {
        "tags": [
          "machine_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/machine_status": {
      "get": {
        "tags": [
          "machine_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "machine_status"
        ],
        "requestBody": {
          "description": "machine_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/machine_status/{id}": {
      "get": {
        "tags": [
          "machine_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "machine_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "machine_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/machine_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "machine_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sites"
        ],
        "requestBody": {
          "description": "sites body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sites_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/sites/{id}": {
      "get": {
        "tags": [
          "sites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "sites body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sites_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/members": {
      "get": {
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "members"
        ],
        "requestBody": {
          "description": "members body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/members_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/members/{id}": {
      "get": {
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "members body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/members_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "requestBody": {
          "description": "messages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/messages_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "messages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/messages_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/meta_data": {
      "get": {
        "tags": [
          "meta_data"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "meta_data"
        ],
        "requestBody": {
          "description": "meta_data body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/meta_data_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/meta_data/{id}": {
      "get": {
        "tags": [
          "meta_data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "meta_data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "meta_data body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/meta_data_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "meta_data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_actions": {
      "get": {
        "tags": [
          "node_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_actions"
        ],
        "requestBody": {
          "description": "node_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_actions/{id}": {
      "get": {
        "tags": [
          "node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_allocated_gpus": {
      "get": {
        "tags": [
          "node_allocated_gpus"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_allocated_gpus"
        ],
        "requestBody": {
          "description": "node_allocated_gpus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_allocated_gpus_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_allocated_gpus/{id}": {
      "get": {
        "tags": [
          "node_allocated_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_allocated_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_allocated_gpus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_allocated_gpus_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_allocated_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_device_instances": {
      "get": {
        "tags": [
          "node_device_instances"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_device_instances"
        ],
        "requestBody": {
          "description": "node_device_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_device_instances_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_device_instances/{id}": {
      "get": {
        "tags": [
          "node_device_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_device_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_device_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_device_instances_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_device_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_drivers": {
      "get": {
        "tags": [
          "node_drivers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_drivers"
        ],
        "requestBody": {
          "description": "node_drivers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_drivers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_drivers/{id}": {
      "get": {
        "tags": [
          "node_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_drivers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_drivers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_drivers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_gpu_instances": {
      "get": {
        "tags": [
          "node_gpu_instances"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_gpu_instances"
        ],
        "requestBody": {
          "description": "node_gpu_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_instances_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_gpu_instances/{id}": {
      "get": {
        "tags": [
          "node_gpu_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_gpu_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_gpu_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_instances_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_gpu_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_gpu_stats": {
      "get": {
        "tags": [
          "node_gpu_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_gpu_stats"
        ],
        "requestBody": {
          "description": "node_gpu_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_gpu_stats/{id}": {
      "get": {
        "tags": [
          "node_gpu_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_gpu_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_gpu_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_gpu_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_gpu_stats_history_long": {
      "get": {
        "tags": [
          "node_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_gpu_stats_history_long"
        ],
        "requestBody": {
          "description": "node_gpu_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_gpu_stats_history_long/{id}": {
      "get": {
        "tags": [
          "node_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_gpu_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_gpu_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_gpu_stats_history_short": {
      "get": {
        "tags": [
          "node_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_gpu_stats_history_short"
        ],
        "requestBody": {
          "description": "node_gpu_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_gpu_stats_history_short/{id}": {
      "get": {
        "tags": [
          "node_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_gpu_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpu_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_gpu_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_gpus": {
      "get": {
        "tags": [
          "node_gpus"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_gpus"
        ],
        "requestBody": {
          "description": "node_gpus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpus_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_gpus/{id}": {
      "get": {
        "tags": [
          "node_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_gpus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_gpus_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_gpus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_lldp_neighbors": {
      "get": {
        "tags": [
          "node_lldp_neighbors"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_lldp_neighbors"
        ],
        "requestBody": {
          "description": "node_lldp_neighbors body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_lldp_neighbors_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_lldp_neighbors/{id}": {
      "get": {
        "tags": [
          "node_lldp_neighbors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_lldp_neighbors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_lldp_neighbors body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_lldp_neighbors_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_lldp_neighbors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_memory": {
      "get": {
        "tags": [
          "node_memory"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_memory"
        ],
        "requestBody": {
          "description": "node_memory body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_memory_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_memory/{id}": {
      "get": {
        "tags": [
          "node_memory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_memory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_memory body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_memory_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_memory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_nvidia_vgpu_devices": {
      "get": {
        "tags": [
          "node_nvidia_vgpu_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_nvidia_vgpu_devices"
        ],
        "requestBody": {
          "description": "node_nvidia_vgpu_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_nvidia_vgpu_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_nvidia_vgpu_devices/{id}": {
      "get": {
        "tags": [
          "node_nvidia_vgpu_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_nvidia_vgpu_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_nvidia_vgpu_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_nvidia_vgpu_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_nvidia_vgpu_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_nvidia_vgpu_profiles": {
      "get": {
        "tags": [
          "node_nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_nvidia_vgpu_profiles"
        ],
        "requestBody": {
          "description": "node_nvidia_vgpu_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_nvidia_vgpu_profiles_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_nvidia_vgpu_profiles/{id}": {
      "get": {
        "tags": [
          "node_nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_nvidia_vgpu_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_nvidia_vgpu_profiles_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_pci_devices": {
      "get": {
        "tags": [
          "node_pci_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_pci_devices"
        ],
        "requestBody": {
          "description": "node_pci_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_pci_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_pci_devices/{id}": {
      "get": {
        "tags": [
          "node_pci_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_pci_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_pci_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_pci_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_pci_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_queries": {
      "get": {
        "tags": [
          "node_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_queries"
        ],
        "requestBody": {
          "description": "node_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_queries/{id}": {
      "get": {
        "tags": [
          "node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_resources": {
      "get": {
        "tags": [
          "node_resources"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_resources"
        ],
        "requestBody": {
          "description": "node_resources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_resources_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_resources/{id}": {
      "get": {
        "tags": [
          "node_resources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_resources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_resources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_resources_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_resources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_sriov_nic_devices": {
      "get": {
        "tags": [
          "node_sriov_nic_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_sriov_nic_devices"
        ],
        "requestBody": {
          "description": "node_sriov_nic_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_sriov_nic_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_sriov_nic_devices/{id}": {
      "get": {
        "tags": [
          "node_sriov_nic_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_sriov_nic_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_sriov_nic_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_sriov_nic_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_sriov_nic_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_stats": {
      "get": {
        "tags": [
          "node_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_stats"
        ],
        "requestBody": {
          "description": "node_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_stats/{id}": {
      "get": {
        "tags": [
          "node_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/node_usb_devices": {
      "get": {
        "tags": [
          "node_usb_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "node_usb_devices"
        ],
        "requestBody": {
          "description": "node_usb_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_usb_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/node_usb_devices/{id}": {
      "get": {
        "tags": [
          "node_usb_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "node_usb_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "node_usb_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/node_usb_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "node_usb_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "requestBody": {
          "description": "nodes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nodes_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/nodes/{id}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "nodes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nodes_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/note_actions": {
      "get": {
        "tags": [
          "note_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "note_actions"
        ],
        "requestBody": {
          "description": "note_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/note_actions/{id}": {
      "get": {
        "tags": [
          "note_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "note_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "note_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "note_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/nvidia_vgpu_profiles": {
      "get": {
        "tags": [
          "nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "nvidia_vgpu_profiles"
        ],
        "requestBody": {
          "description": "nvidia_vgpu_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nvidia_vgpu_profiles_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/nvidia_vgpu_profiles/{id}": {
      "get": {
        "tags": [
          "nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "nvidia_vgpu_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/oidc_application_groups": {
      "get": {
        "tags": [
          "oidc_application_groups"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc_application_groups"
        ],
        "requestBody": {
          "description": "oidc_application_groups body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_application_groups_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/oidc_application_groups/{id}": {
      "get": {
        "tags": [
          "oidc_application_groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "oidc_application_groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "oidc_application_groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/oidc_application_logs": {
      "get": {
        "tags": [
          "oidc_application_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc_application_logs"
        ],
        "requestBody": {
          "description": "oidc_application_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_application_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/oidc_application_logs/{id}": {
      "get": {
        "tags": [
          "oidc_application_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "oidc_application_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "oidc_application_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_application_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "oidc_application_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/oidc_application_users": {
      "get": {
        "tags": [
          "oidc_application_users"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc_application_users"
        ],
        "requestBody": {
          "description": "oidc_application_users body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_application_users_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/oidc_application_users/{id}": {
      "get": {
        "tags": [
          "oidc_application_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "oidc_application_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "oidc_application_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/oidc_applications": {
      "get": {
        "tags": [
          "oidc_applications"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oidc_applications"
        ],
        "requestBody": {
          "description": "oidc_applications body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_applications_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/oidc_applications/{id}": {
      "get": {
        "tags": [
          "oidc_applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "oidc_applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "oidc_applications body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oidc_applications_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "oidc_applications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/recipe_questions": {
      "get": {
        "tags": [
          "recipe_questions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "recipe_questions"
        ],
        "requestBody": {
          "description": "recipe_questions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_questions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipe_questions/{id}": {
      "get": {
        "tags": [
          "recipe_questions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "recipe_questions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "recipe_questions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_questions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "recipe_questions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/recipe_sections": {
      "get": {
        "tags": [
          "recipe_sections"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "recipe_sections"
        ],
        "requestBody": {
          "description": "recipe_sections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_sections_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipe_sections/{id}": {
      "get": {
        "tags": [
          "recipe_sections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "recipe_sections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "recipe_sections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_sections_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "recipe_sections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/recipe_status": {
      "get": {
        "tags": [
          "recipe_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "recipe_status"
        ],
        "requestBody": {
          "description": "recipe_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipe_status/{id}": {
      "get": {
        "tags": [
          "recipe_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "recipe_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "recipe_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recipe_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "recipe_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/repair_servers": {
      "get": {
        "tags": [
          "repair_servers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "repair_servers"
        ],
        "requestBody": {
          "description": "repair_servers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/repair_servers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/repair_servers/{id}": {
      "get": {
        "tags": [
          "repair_servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "repair_servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "repair_servers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/repair_servers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "repair_servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/resource_group_settings_nvidia_vgpu": {
      "get": {
        "tags": [
          "resource_group_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource_group_settings_nvidia_vgpu"
        ],
        "requestBody": {
          "description": "resource_group_settings_nvidia_vgpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_nvidia_vgpu_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/resource_group_settings_nvidia_vgpu/{id}": {
      "get": {
        "tags": [
          "resource_group_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource_group_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "resource_group_settings_nvidia_vgpu body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_nvidia_vgpu_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "resource_group_settings_nvidia_vgpu"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/resource_group_settings_sriov_nic": {
      "get": {
        "tags": [
          "resource_group_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource_group_settings_sriov_nic"
        ],
        "requestBody": {
          "description": "resource_group_settings_sriov_nic body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_sriov_nic_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/resource_group_settings_sriov_nic/{id}": {
      "get": {
        "tags": [
          "resource_group_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource_group_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "resource_group_settings_sriov_nic body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_sriov_nic_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "resource_group_settings_sriov_nic"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/resource_group_settings_usb": {
      "get": {
        "tags": [
          "resource_group_settings_usb"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource_group_settings_usb"
        ],
        "requestBody": {
          "description": "resource_group_settings_usb body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_usb_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/resource_group_settings_usb/{id}": {
      "get": {
        "tags": [
          "resource_group_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource_group_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "resource_group_settings_usb body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_group_settings_usb_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "resource_group_settings_usb"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/resource_groups": {
      "get": {
        "tags": [
          "resource_groups"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource_groups"
        ],
        "requestBody": {
          "description": "resource_groups body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_groups_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/resource_groups/{uuid}": {
      "get": {
        "tags": [
          "resource_groups"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource_groups"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "resource_groups body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_groups_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "resource_groups"
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/resource_rules": {
      "get": {
        "tags": [
          "resource_rules"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "resource_rules"
        ],
        "requestBody": {
          "description": "resource_rules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_rules_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/resource_rules/{id}": {
      "get": {
        "tags": [
          "resource_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "resource_rules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resource_rules_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "resource_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/root_certificates": {
      "get": {
        "tags": [
          "root_certificates"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "root_certificates"
        ],
        "requestBody": {
          "description": "root_certificates body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/root_certificates_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/root_certificates/{id}": {
      "get": {
        "tags": [
          "root_certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "root_certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "root_certificates body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/root_certificates_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "root_certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schedule_task_events": {
      "get": {
        "tags": [
          "schedule_task_events"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedule_task_events"
        ],
        "requestBody": {
          "description": "schedule_task_events body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_events_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedule_task_events/{id}": {
      "get": {
        "tags": [
          "schedule_task_events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule_task_events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schedule_task_events body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_events_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schedule_task_events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schedule_task_setting_schema": {
      "get": {
        "tags": [
          "schedule_task_setting_schema"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedule_task_setting_schema"
        ],
        "requestBody": {
          "description": "schedule_task_setting_schema body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_setting_schema_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedule_task_setting_schema/{key}": {
      "get": {
        "tags": [
          "schedule_task_setting_schema"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule_task_setting_schema"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schedule_task_setting_schema body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_setting_schema_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schedule_task_setting_schema"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schedule_task_settings": {
      "get": {
        "tags": [
          "schedule_task_settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedule_task_settings"
        ],
        "requestBody": {
          "description": "schedule_task_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_settings_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedule_task_settings/{id}": {
      "get": {
        "tags": [
          "schedule_task_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule_task_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schedule_task_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_task_settings_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schedule_task_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schedule_tasks": {
      "get": {
        "tags": [
          "schedule_tasks"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedule_tasks"
        ],
        "requestBody": {
          "description": "schedule_tasks body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_tasks_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedule_tasks/{id}": {
      "get": {
        "tags": [
          "schedule_tasks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedule_tasks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schedule_tasks body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule_tasks_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schedule_tasks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "schedules"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schedules"
        ],
        "requestBody": {
          "description": "schedules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedules_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules/{id}": {
      "get": {
        "tags": [
          "schedules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schedules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schedules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedules_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schedules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schema_version_actions": {
      "get": {
        "tags": [
          "schema_version_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schema_version_actions"
        ],
        "requestBody": {
          "description": "schema_version_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema_version_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schema_version_actions/{id}": {
      "get": {
        "tags": [
          "schema_version_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schema_version_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schema_version_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema_version_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "schema_version_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/schema_versions": {
      "get": {
        "tags": [
          "schema_versions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schema_versions"
        ],
        "requestBody": {
          "description": "schema_versions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema_versions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schema_versions/{table}": {
      "get": {
        "tags": [
          "schema_versions"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "schema_versions"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "schema_versions"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "settings"
        ],
        "requestBody": {
          "description": "settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/settings/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "settings"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/settings_actions": {
      "get": {
        "tags": [
          "settings_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "settings_actions"
        ],
        "requestBody": {
          "description": "settings_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/settings_actions/{id}": {
      "get": {
        "tags": [
          "settings_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "settings_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "settings_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/settings_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "settings_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/shared_object_actions": {
      "get": {
        "tags": [
          "shared_object_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "shared_object_actions"
        ],
        "requestBody": {
          "description": "shared_object_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shared_object_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/shared_object_actions/{id}": {
      "get": {
        "tags": [
          "shared_object_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "shared_object_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "shared_object_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shared_object_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "shared_object_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/shared_objects": {
      "get": {
        "tags": [
          "shared_objects"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "shared_objects"
        ],
        "requestBody": {
          "description": "shared_objects body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shared_objects_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/shared_objects/{id}": {
      "get": {
        "tags": [
          "shared_objects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "shared_objects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "shared_objects body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shared_objects_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "shared_objects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_actions": {
      "get": {
        "tags": [
          "site_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_actions"
        ],
        "requestBody": {
          "description": "site_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_actions/{id}": {
      "get": {
        "tags": [
          "site_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_logs": {
      "get": {
        "tags": [
          "site_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_logs"
        ],
        "requestBody": {
          "description": "site_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_logs/{id}": {
      "get": {
        "tags": [
          "site_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_sync_stats": {
      "get": {
        "tags": [
          "site_sync_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_sync_stats"
        ],
        "requestBody": {
          "description": "site_sync_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_sync_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_sync_stats/{id}": {
      "get": {
        "tags": [
          "site_sync_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_sync_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_sync_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_sync_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_sync_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_sync_stats_history_long": {
      "get": {
        "tags": [
          "site_sync_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_sync_stats_history_long"
        ],
        "requestBody": {
          "description": "site_sync_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_sync_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_sync_stats_history_long/{id}": {
      "get": {
        "tags": [
          "site_sync_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_sync_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_sync_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_sync_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_sync_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_incoming": {
      "get": {
        "tags": [
          "site_syncs_incoming"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_incoming"
        ],
        "requestBody": {
          "description": "site_syncs_incoming body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_incoming/{id}": {
      "get": {
        "tags": [
          "site_syncs_incoming"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_incoming"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_incoming body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_incoming"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_incoming_actions": {
      "get": {
        "tags": [
          "site_syncs_incoming_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_incoming_actions"
        ],
        "requestBody": {
          "description": "site_syncs_incoming_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_incoming_actions/{id}": {
      "get": {
        "tags": [
          "site_syncs_incoming_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_incoming_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_incoming_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_incoming_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_incoming_logs": {
      "get": {
        "tags": [
          "site_syncs_incoming_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_incoming_logs"
        ],
        "requestBody": {
          "description": "site_syncs_incoming_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_incoming_logs/{id}": {
      "get": {
        "tags": [
          "site_syncs_incoming_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_incoming_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_incoming_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_incoming_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_incoming_verified": {
      "get": {
        "tags": [
          "site_syncs_incoming_verified"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_incoming_verified"
        ],
        "requestBody": {
          "description": "site_syncs_incoming_verified body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_verified_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_incoming_verified/{id}": {
      "get": {
        "tags": [
          "site_syncs_incoming_verified"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_incoming_verified"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_incoming_verified body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_verified_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_incoming_verified"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_incoming_verified_actions": {
      "get": {
        "tags": [
          "site_syncs_incoming_verified_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_incoming_verified_actions"
        ],
        "requestBody": {
          "description": "site_syncs_incoming_verified_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_verified_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_incoming_verified_actions/{id}": {
      "get": {
        "tags": [
          "site_syncs_incoming_verified_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_incoming_verified_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_incoming_verified_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_incoming_verified_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_incoming_verified_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing": {
      "get": {
        "tags": [
          "site_syncs_outgoing"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_actions": {
      "get": {
        "tags": [
          "site_syncs_outgoing_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_actions"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_actions/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_logs": {
      "get": {
        "tags": [
          "site_syncs_outgoing_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_logs"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_logs/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_profile_periods": {
      "get": {
        "tags": [
          "site_syncs_outgoing_profile_periods"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_profile_periods"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_profile_periods body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_profile_periods_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_profile_periods/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_profile_periods body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_profile_periods_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_queue": {
      "get": {
        "tags": [
          "site_syncs_outgoing_queue"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_queue"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_queue body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_queue_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_queue/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_queue body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_queue_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_remote_snap_actions": {
      "get": {
        "tags": [
          "site_syncs_outgoing_remote_snap_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_remote_snap_actions"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_remote_snap_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_remote_snap_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_remote_snap_actions/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_remote_snap_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_remote_snap_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_remote_snap_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_remote_snap_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_remote_snap_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/site_syncs_outgoing_remote_snaps": {
      "get": {
        "tags": [
          "site_syncs_outgoing_remote_snaps"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "site_syncs_outgoing_remote_snaps"
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_remote_snaps body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_remote_snaps_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/site_syncs_outgoing_remote_snaps/{id}": {
      "get": {
        "tags": [
          "site_syncs_outgoing_remote_snaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site_syncs_outgoing_remote_snaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "site_syncs_outgoing_remote_snaps body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/site_syncs_outgoing_remote_snaps_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "site_syncs_outgoing_remote_snaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vms": {
      "get": {
        "tags": [
          "vms"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vms"
        ],
        "requestBody": {
          "description": "vms body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vms_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vms/{id}": {
      "get": {
        "tags": [
          "vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vms body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vms_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vms"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/smtp_actions": {
      "get": {
        "tags": [
          "smtp_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp_actions"
        ],
        "requestBody": {
          "description": "smtp_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/smtp_actions/{id}": {
      "get": {
        "tags": [
          "smtp_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "smtp_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "smtp_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "smtp_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/smtp_logs": {
      "get": {
        "tags": [
          "smtp_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp_logs"
        ],
        "requestBody": {
          "description": "smtp_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/smtp_logs/{id}": {
      "get": {
        "tags": [
          "smtp_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "smtp_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "smtp_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "smtp_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/smtp_outbox": {
      "get": {
        "tags": [
          "smtp_outbox"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp_outbox"
        ],
        "requestBody": {
          "description": "smtp_outbox body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_outbox_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/smtp_outbox/{id}": {
      "get": {
        "tags": [
          "smtp_outbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "smtp_outbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "smtp_outbox body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_outbox_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "smtp_outbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/smtp_queue": {
      "get": {
        "tags": [
          "smtp_queue"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp_queue"
        ],
        "requestBody": {
          "description": "smtp_queue body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_queue_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/smtp_queue/{id}": {
      "get": {
        "tags": [
          "smtp_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "smtp_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "smtp_queue body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_queue_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "smtp_queue"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/smtp_settings": {
      "get": {
        "tags": [
          "smtp_settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "smtp_settings"
        ],
        "requestBody": {
          "description": "smtp_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_settings_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/smtp_settings/{id}": {
      "get": {
        "tags": [
          "smtp_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "smtp_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "smtp_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smtp_settings_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "smtp_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/snapshot_profile_actions": {
      "get": {
        "tags": [
          "snapshot_profile_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "snapshot_profile_actions"
        ],
        "requestBody": {
          "description": "snapshot_profile_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profile_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/snapshot_profile_actions/{id}": {
      "get": {
        "tags": [
          "snapshot_profile_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "snapshot_profile_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "snapshot_profile_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profile_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "snapshot_profile_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/snapshot_profile_periods": {
      "get": {
        "tags": [
          "snapshot_profile_periods"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "snapshot_profile_periods"
        ],
        "requestBody": {
          "description": "snapshot_profile_periods body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profile_periods_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/snapshot_profile_periods/{id}": {
      "get": {
        "tags": [
          "snapshot_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "snapshot_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "snapshot_profile_periods body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profile_periods_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "snapshot_profile_periods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/snapshot_profiles": {
      "get": {
        "tags": [
          "snapshot_profiles"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "snapshot_profiles"
        ],
        "requestBody": {
          "description": "snapshot_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profiles_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/snapshot_profiles/{id}": {
      "get": {
        "tags": [
          "snapshot_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "snapshot_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "snapshot_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot_profiles_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "snapshot_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/storage_tier_stats": {
      "get": {
        "tags": [
          "storage_tier_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "storage_tier_stats"
        ],
        "requestBody": {
          "description": "storage_tier_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/storage_tier_stats/{id}": {
      "get": {
        "tags": [
          "storage_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "storage_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "storage_tier_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "storage_tier_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/storage_tier_stats_history_long": {
      "get": {
        "tags": [
          "storage_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "storage_tier_stats_history_long"
        ],
        "requestBody": {
          "description": "storage_tier_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/storage_tier_stats_history_long/{id}": {
      "get": {
        "tags": [
          "storage_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "storage_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "storage_tier_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "storage_tier_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/storage_tier_stats_history_short": {
      "get": {
        "tags": [
          "storage_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "storage_tier_stats_history_short"
        ],
        "requestBody": {
          "description": "storage_tier_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/storage_tier_stats_history_short/{id}": {
      "get": {
        "tags": [
          "storage_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "storage_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "storage_tier_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tier_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "storage_tier_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/storage_tiers": {
      "get": {
        "tags": [
          "storage_tiers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "storage_tiers"
        ],
        "requestBody": {
          "description": "storage_tiers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tiers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/storage_tiers/{tier}": {
      "get": {
        "tags": [
          "storage_tiers"
        ],
        "parameters": [
          {
            "name": "tier",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "storage_tiers"
        ],
        "parameters": [
          {
            "name": "tier",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "storage_tiers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_tiers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "storage_tiers"
        ],
        "parameters": [
          {
            "name": "tier",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/subscription_profiles": {
      "get": {
        "tags": [
          "subscription_profiles"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscription_profiles"
        ],
        "requestBody": {
          "description": "subscription_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription_profiles_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/subscription_profiles/{id}": {
      "get": {
        "tags": [
          "subscription_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "subscription_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "subscription_profiles body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription_profiles_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "subscription_profiles"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "requestBody": {
          "description": "subscriptions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "subscriptions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscriptions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/swagger_actions": {
      "get": {
        "tags": [
          "swagger_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "swagger_actions"
        ],
        "requestBody": {
          "description": "swagger_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/swagger_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/swagger_actions/{id}": {
      "get": {
        "tags": [
          "swagger_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "swagger_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "swagger_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/swagger_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "swagger_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/system": {
      "get": {
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system"
        ],
        "requestBody": {
          "description": "system body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/system/{key}": {
      "get": {
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "system body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "system"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/system_actions": {
      "get": {
        "tags": [
          "system_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system_actions"
        ],
        "requestBody": {
          "description": "system_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/system_actions/{id}": {
      "get": {
        "tags": [
          "system_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "system_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "system_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/system_diagnostic_actions": {
      "get": {
        "tags": [
          "system_diagnostic_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system_diagnostic_actions"
        ],
        "requestBody": {
          "description": "system_diagnostic_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_diagnostic_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/system_diagnostic_actions/{id}": {
      "get": {
        "tags": [
          "system_diagnostic_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system_diagnostic_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "system_diagnostic_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_diagnostic_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "system_diagnostic_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/system_diagnostics": {
      "get": {
        "tags": [
          "system_diagnostics"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system_diagnostics"
        ],
        "requestBody": {
          "description": "system_diagnostics body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_diagnostics_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/system_diagnostics/{id}": {
      "get": {
        "tags": [
          "system_diagnostics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system_diagnostics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "system_diagnostics body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_diagnostics_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "system_diagnostics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_actions": {
      "get": {
        "tags": [
          "tenant_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_actions"
        ],
        "requestBody": {
          "description": "tenant_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_actions/{id}": {
      "get": {
        "tags": [
          "tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_logs": {
      "get": {
        "tags": [
          "tenant_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_logs"
        ],
        "requestBody": {
          "description": "tenant_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_logs/{id}": {
      "get": {
        "tags": [
          "tenant_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_node_actions": {
      "get": {
        "tags": [
          "tenant_node_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_node_actions"
        ],
        "requestBody": {
          "description": "tenant_node_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_node_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_node_actions/{id}": {
      "get": {
        "tags": [
          "tenant_node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_node_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_node_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_node_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_node_queries": {
      "get": {
        "tags": [
          "tenant_node_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_node_queries"
        ],
        "requestBody": {
          "description": "tenant_node_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_node_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_node_queries/{id}": {
      "get": {
        "tags": [
          "tenant_node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_node_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_node_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_node_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_nodes": {
      "get": {
        "tags": [
          "tenant_nodes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_nodes"
        ],
        "requestBody": {
          "description": "tenant_nodes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_nodes_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_nodes/{id}": {
      "get": {
        "tags": [
          "tenant_nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_nodes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_nodes_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_recipe_actions": {
      "get": {
        "tags": [
          "tenant_recipe_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_recipe_actions"
        ],
        "requestBody": {
          "description": "tenant_recipe_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_recipe_actions/{id}": {
      "get": {
        "tags": [
          "tenant_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_recipe_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_recipe_instances": {
      "get": {
        "tags": [
          "tenant_recipe_instances"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_recipe_instances"
        ],
        "requestBody": {
          "description": "tenant_recipe_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_instances_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_recipe_instances/{id}": {
      "get": {
        "tags": [
          "tenant_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_recipe_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_instances_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_recipe_logs": {
      "get": {
        "tags": [
          "tenant_recipe_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_recipe_logs"
        ],
        "requestBody": {
          "description": "tenant_recipe_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_recipe_logs/{id}": {
      "get": {
        "tags": [
          "tenant_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_recipe_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipe_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_recipes": {
      "get": {
        "tags": [
          "tenant_recipes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_recipes"
        ],
        "requestBody": {
          "description": "tenant_recipes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipes_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_recipes/{id}": {
      "get": {
        "tags": [
          "tenant_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_recipes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_recipes_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_snapshot_actions": {
      "get": {
        "tags": [
          "tenant_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_snapshot_actions"
        ],
        "requestBody": {
          "description": "tenant_snapshot_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_snapshot_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_snapshot_actions/{id}": {
      "get": {
        "tags": [
          "tenant_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_snapshot_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_snapshot_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_snapshot_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_snapshots": {
      "get": {
        "tags": [
          "tenant_snapshots"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_snapshots"
        ],
        "requestBody": {
          "description": "tenant_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_snapshots_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_snapshots/{id}": {
      "get": {
        "tags": [
          "tenant_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_snapshots_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_stats": {
      "get": {
        "tags": [
          "tenant_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_stats"
        ],
        "requestBody": {
          "description": "tenant_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_stats/{id}": {
      "get": {
        "tags": [
          "tenant_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_stats_history_long": {
      "get": {
        "tags": [
          "tenant_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_stats_history_long"
        ],
        "requestBody": {
          "description": "tenant_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_stats_history_long/{id}": {
      "get": {
        "tags": [
          "tenant_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_stats_history_short": {
      "get": {
        "tags": [
          "tenant_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_stats_history_short"
        ],
        "requestBody": {
          "description": "tenant_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_stats_history_short/{id}": {
      "get": {
        "tags": [
          "tenant_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_status": {
      "get": {
        "tags": [
          "tenant_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_status"
        ],
        "requestBody": {
          "description": "tenant_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_status/{id}": {
      "get": {
        "tags": [
          "tenant_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenant_storage": {
      "get": {
        "tags": [
          "tenant_storage"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenant_storage"
        ],
        "requestBody": {
          "description": "tenant_storage body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_storage_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenant_storage/{id}": {
      "get": {
        "tags": [
          "tenant_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenant_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenant_storage body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenant_storage_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenant_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "tenants"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tenants"
        ],
        "requestBody": {
          "description": "tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenants_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tenants/{id}": {
      "get": {
        "tags": [
          "tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tenants_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/ui_branding": {
      "get": {
        "tags": [
          "ui_branding"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ui_branding"
        ],
        "requestBody": {
          "description": "ui_branding body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ui_branding_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/ui_branding/{id}": {
      "get": {
        "tags": [
          "ui_branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ui_branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ui_branding body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ui_branding_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "ui_branding"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_actions": {
      "get": {
        "tags": [
          "update_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_actions"
        ],
        "requestBody": {
          "description": "update_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_actions/{id}": {
      "get": {
        "tags": [
          "update_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_branches": {
      "get": {
        "tags": [
          "update_branches"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_branches"
        ],
        "requestBody": {
          "description": "update_branches body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_branches_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_branches/{id}": {
      "get": {
        "tags": [
          "update_branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_branches body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_branches_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_file_finish": {
      "get": {
        "tags": [
          "update_file_finish"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_file_finish"
        ],
        "requestBody": {
          "description": "update_file_finish body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_file_finish_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_file_finish/{id}": {
      "get": {
        "tags": [
          "update_file_finish"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_file_finish"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_file_finish body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_file_finish_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_file_finish"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_file_verify": {
      "get": {
        "tags": [
          "update_file_verify"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_file_verify"
        ],
        "requestBody": {
          "description": "update_file_verify body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_file_verify_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_file_verify/{id}": {
      "get": {
        "tags": [
          "update_file_verify"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_file_verify"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_file_verify body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_file_verify_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_file_verify"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_files": {
      "get": {
        "tags": [
          "update_files"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_files"
        ],
        "requestBody": {
          "description": "update_files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_files/{id}": {
      "get": {
        "tags": [
          "update_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_files body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_files_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_files"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_logs": {
      "get": {
        "tags": [
          "update_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_logs"
        ],
        "requestBody": {
          "description": "update_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_logs/{id}": {
      "get": {
        "tags": [
          "update_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_packages": {
      "get": {
        "tags": [
          "update_packages"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_packages"
        ],
        "requestBody": {
          "description": "update_packages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_packages_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_packages/{name}": {
      "get": {
        "tags": [
          "update_packages"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_packages"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_packages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_packages_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_packages"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_settings": {
      "get": {
        "tags": [
          "update_settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_settings"
        ],
        "requestBody": {
          "description": "update_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_settings_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_settings/{id}": {
      "get": {
        "tags": [
          "update_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_settings_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_source_packages": {
      "get": {
        "tags": [
          "update_source_packages"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_source_packages"
        ],
        "requestBody": {
          "description": "update_source_packages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_source_packages_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_source_packages/{id}": {
      "get": {
        "tags": [
          "update_source_packages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_source_packages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_source_packages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_source_packages_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_source_packages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_source_status": {
      "get": {
        "tags": [
          "update_source_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_source_status"
        ],
        "requestBody": {
          "description": "update_source_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_source_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_source_status/{id}": {
      "get": {
        "tags": [
          "update_source_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_source_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_source_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_source_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_source_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/update_sources": {
      "get": {
        "tags": [
          "update_sources"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "update_sources"
        ],
        "requestBody": {
          "description": "update_sources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_sources_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/update_sources/{id}": {
      "get": {
        "tags": [
          "update_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "update_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update_sources body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_sources_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "update_sources"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "requestBody": {
          "description": "user body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/{request}": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user_actions": {
      "get": {
        "tags": [
          "user_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user_actions"
        ],
        "requestBody": {
          "description": "user_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user_actions/{id}": {
      "get": {
        "tags": [
          "user_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user_devices": {
      "get": {
        "tags": [
          "user_devices"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user_devices"
        ],
        "requestBody": {
          "description": "user_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_devices_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user_devices/{id}": {
      "get": {
        "tags": [
          "user_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user_devices body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_devices_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user_devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user_logs": {
      "get": {
        "tags": [
          "user_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user_logs"
        ],
        "requestBody": {
          "description": "user_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user_logs/{id}": {
      "get": {
        "tags": [
          "user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user_messages": {
      "get": {
        "tags": [
          "user_messages"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user_messages"
        ],
        "requestBody": {
          "description": "user_messages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_messages_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user_messages/{id}": {
      "get": {
        "tags": [
          "user_messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user_messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user_messages body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_messages_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user_messages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/user_settings": {
      "get": {
        "tags": [
          "user_settings"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user_settings"
        ],
        "requestBody": {
          "description": "user_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_settings_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user_settings/{id}": {
      "get": {
        "tags": [
          "user_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user_settings body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_settings_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user_settings"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "users body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "users body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/v3_vm_import": {
      "get": {
        "tags": [
          "v3_vm_import"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "v3_vm_import"
        ],
        "requestBody": {
          "description": "v3_vm_import body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v3_vm_import_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v3_vm_import/{id}": {
      "get": {
        "tags": [
          "v3_vm_import"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "v3_vm_import"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "v3_vm_import body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v3_vm_import_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "v3_vm_import"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_actions": {
      "get": {
        "tags": [
          "vm_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_actions"
        ],
        "requestBody": {
          "description": "vm_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_actions/{id}": {
      "get": {
        "tags": [
          "vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_console_actions": {
      "get": {
        "tags": [
          "vm_console_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_console_actions"
        ],
        "requestBody": {
          "description": "vm_console_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_console_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_console_actions/{id}": {
      "get": {
        "tags": [
          "vm_console_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_console_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_console_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_console_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_console_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_favorites": {
      "get": {
        "tags": [
          "vm_favorites"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_favorites"
        ],
        "requestBody": {
          "description": "vm_favorites body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_favorites_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_favorites/{id}": {
      "get": {
        "tags": [
          "vm_favorites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_favorites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vm_favorites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_import_logs": {
      "get": {
        "tags": [
          "vm_import_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_import_logs"
        ],
        "requestBody": {
          "description": "vm_import_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_import_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_import_logs/{id}": {
      "get": {
        "tags": [
          "vm_import_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_import_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_import_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_import_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_import_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_imports": {
      "get": {
        "tags": [
          "vm_imports"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_imports"
        ],
        "requestBody": {
          "description": "vm_imports body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_imports_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_imports/{id}": {
      "get": {
        "tags": [
          "vm_imports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_imports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_imports body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_imports_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_imports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_paste_configs": {
      "get": {
        "tags": [
          "vm_paste_configs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_paste_configs"
        ],
        "requestBody": {
          "description": "vm_paste_configs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_paste_configs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_paste_configs/{id}": {
      "get": {
        "tags": [
          "vm_paste_configs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_paste_configs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_paste_configs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_paste_configs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_paste_configs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_recipe_actions": {
      "get": {
        "tags": [
          "vm_recipe_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_recipe_actions"
        ],
        "requestBody": {
          "description": "vm_recipe_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_recipe_actions/{id}": {
      "get": {
        "tags": [
          "vm_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_recipe_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_recipe_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_recipe_instances": {
      "get": {
        "tags": [
          "vm_recipe_instances"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_recipe_instances"
        ],
        "requestBody": {
          "description": "vm_recipe_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_instances_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_recipe_instances/{id}": {
      "get": {
        "tags": [
          "vm_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_recipe_instances body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_instances_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_recipe_instances"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_recipe_logs": {
      "get": {
        "tags": [
          "vm_recipe_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_recipe_logs"
        ],
        "requestBody": {
          "description": "vm_recipe_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_recipe_logs/{id}": {
      "get": {
        "tags": [
          "vm_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_recipe_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipe_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_recipe_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_recipes": {
      "get": {
        "tags": [
          "vm_recipes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_recipes"
        ],
        "requestBody": {
          "description": "vm_recipes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipes_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_recipes/{id}": {
      "get": {
        "tags": [
          "vm_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_recipes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_recipes_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_recipes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_antivirus": {
      "get": {
        "tags": [
          "vm_service_antivirus"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_antivirus"
        ],
        "requestBody": {
          "description": "vm_service_antivirus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_antivirus_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_antivirus/{id}": {
      "get": {
        "tags": [
          "vm_service_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_antivirus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_antivirus_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_cifs": {
      "get": {
        "tags": [
          "vm_service_cifs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_cifs"
        ],
        "requestBody": {
          "description": "vm_service_cifs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_cifs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_cifs/{id}": {
      "get": {
        "tags": [
          "vm_service_cifs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_cifs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_cifs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_cifs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_cifs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_nfs": {
      "get": {
        "tags": [
          "vm_service_nfs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_nfs"
        ],
        "requestBody": {
          "description": "vm_service_nfs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_nfs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_nfs/{id}": {
      "get": {
        "tags": [
          "vm_service_nfs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_nfs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_nfs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_nfs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_nfs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_queries": {
      "get": {
        "tags": [
          "vm_service_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_queries"
        ],
        "requestBody": {
          "description": "vm_service_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_queries/{id}": {
      "get": {
        "tags": [
          "vm_service_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_user_logs": {
      "get": {
        "tags": [
          "vm_service_user_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_user_logs"
        ],
        "requestBody": {
          "description": "vm_service_user_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_user_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_user_logs/{id}": {
      "get": {
        "tags": [
          "vm_service_user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_user_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_user_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_user_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_user_status": {
      "get": {
        "tags": [
          "vm_service_user_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_user_status"
        ],
        "requestBody": {
          "description": "vm_service_user_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_user_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_user_status/{id}": {
      "get": {
        "tags": [
          "vm_service_user_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_user_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_user_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_user_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_user_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_service_users": {
      "get": {
        "tags": [
          "vm_service_users"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_service_users"
        ],
        "requestBody": {
          "description": "vm_service_users body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_users_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_service_users/{id}": {
      "get": {
        "tags": [
          "vm_service_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_service_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_service_users body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_service_users_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_service_users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vm_services": {
      "get": {
        "tags": [
          "vm_services"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vm_services"
        ],
        "requestBody": {
          "description": "vm_services body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_services_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vm_services/{id}": {
      "get": {
        "tags": [
          "vm_services"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vm_services"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vm_services body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_services_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vm_services"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vsan_queries": {
      "get": {
        "tags": [
          "vsan_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vsan_queries"
        ],
        "requestBody": {
          "description": "vsan_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vsan_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vsan_queries/{id}": {
      "get": {
        "tags": [
          "vsan_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vsan_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vsan_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vsan_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vsan_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_actions": {
      "get": {
        "tags": [
          "vmware_container_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_actions"
        ],
        "requestBody": {
          "description": "vmware_container_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_actions/{id}": {
      "get": {
        "tags": [
          "vmware_container_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_api": {
      "get": {
        "tags": [
          "vmware_container_api"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_api"
        ],
        "requestBody": {
          "description": "vmware_container_api body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_api_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_api/{id}": {
      "get": {
        "tags": [
          "vmware_container_api"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_api"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_api body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_api_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_api"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_backup_job_actions": {
      "get": {
        "tags": [
          "vmware_container_backup_job_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_backup_job_actions"
        ],
        "requestBody": {
          "description": "vmware_container_backup_job_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_backup_job_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_backup_job_actions/{id}": {
      "get": {
        "tags": [
          "vmware_container_backup_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_backup_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_backup_job_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_backup_job_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_backup_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_queries": {
      "get": {
        "tags": [
          "vmware_container_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_queries"
        ],
        "requestBody": {
          "description": "vmware_container_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_queries/{id}": {
      "get": {
        "tags": [
          "vmware_container_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_restore_job_actions": {
      "get": {
        "tags": [
          "vmware_container_restore_job_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_restore_job_actions"
        ],
        "requestBody": {
          "description": "vmware_container_restore_job_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_restore_job_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_restore_job_actions/{id}": {
      "get": {
        "tags": [
          "vmware_container_restore_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_restore_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_restore_job_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_restore_job_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_restore_job_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_container_storage": {
      "get": {
        "tags": [
          "vmware_container_storage"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_container_storage"
        ],
        "requestBody": {
          "description": "vmware_container_storage body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_storage_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_container_storage/{id}": {
      "get": {
        "tags": [
          "vmware_container_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_container_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_container_storage body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_container_storage_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_container_storage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vmware_containers": {
      "get": {
        "tags": [
          "vmware_containers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vmware_containers"
        ],
        "requestBody": {
          "description": "vmware_containers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_containers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vmware_containers/{id}": {
      "get": {
        "tags": [
          "vmware_containers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vmware_containers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vmware_containers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_containers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vmware_containers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_actions": {
      "get": {
        "tags": [
          "vnet_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_actions"
        ],
        "requestBody": {
          "description": "vnet_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_actions/{id}": {
      "get": {
        "tags": [
          "vnet_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_addresses": {
      "get": {
        "tags": [
          "vnet_addresses"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_addresses"
        ],
        "requestBody": {
          "description": "vnet_addresses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_addresses_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_addresses/{id}": {
      "get": {
        "tags": [
          "vnet_addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_addresses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_addresses_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp": {
      "get": {
        "tags": [
          "vnet_bgp"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp"
        ],
        "requestBody": {
          "description": "vnet_bgp body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp/{id}": {
      "get": {
        "tags": [
          "vnet_bgp"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_interface_commands": {
      "get": {
        "tags": [
          "vnet_bgp_interface_commands"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_interface_commands"
        ],
        "requestBody": {
          "description": "vnet_bgp_interface_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_interface_commands_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_interface_commands/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_interface_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_interface_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_interface_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_interface_commands_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_interface_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_interfaces": {
      "get": {
        "tags": [
          "vnet_bgp_interfaces"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_interfaces"
        ],
        "requestBody": {
          "description": "vnet_bgp_interfaces body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_interfaces_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_interfaces/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_interfaces body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_interfaces_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_ip": {
      "get": {
        "tags": [
          "vnet_bgp_ip"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_ip"
        ],
        "requestBody": {
          "description": "vnet_bgp_ip body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_ip_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_ip/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_ip"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_ip"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_ip body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_ip_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_ip"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_routemap_commands": {
      "get": {
        "tags": [
          "vnet_bgp_routemap_commands"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_routemap_commands"
        ],
        "requestBody": {
          "description": "vnet_bgp_routemap_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routemap_commands_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_routemap_commands/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_routemap_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_routemap_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_routemap_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routemap_commands_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_routemap_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_routemaps": {
      "get": {
        "tags": [
          "vnet_bgp_routemaps"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_routemaps"
        ],
        "requestBody": {
          "description": "vnet_bgp_routemaps body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routemaps_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_routemaps/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_routemaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_routemaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_routemaps body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routemaps_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_routemaps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_router_commands": {
      "get": {
        "tags": [
          "vnet_bgp_router_commands"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_router_commands"
        ],
        "requestBody": {
          "description": "vnet_bgp_router_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_router_commands_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_router_commands/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_router_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_router_commands_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bgp_routers": {
      "get": {
        "tags": [
          "vnet_bgp_routers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bgp_routers"
        ],
        "requestBody": {
          "description": "vnet_bgp_routers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bgp_routers/{id}": {
      "get": {
        "tags": [
          "vnet_bgp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bgp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bgp_routers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bgp_routers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bgp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bond_interfaces": {
      "get": {
        "tags": [
          "vnet_bond_interfaces"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bond_interfaces"
        ],
        "requestBody": {
          "description": "vnet_bond_interfaces body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bond_interfaces_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bond_interfaces/{id}": {
      "get": {
        "tags": [
          "vnet_bond_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bond_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vnet_bond_interfaces"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_bonds": {
      "get": {
        "tags": [
          "vnet_bonds"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_bonds"
        ],
        "requestBody": {
          "description": "vnet_bonds body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bonds_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_bonds/{id}": {
      "get": {
        "tags": [
          "vnet_bonds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_bonds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_bonds body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_bonds_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_bonds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_cidrs": {
      "get": {
        "tags": [
          "vnet_cidrs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_cidrs"
        ],
        "requestBody": {
          "description": "vnet_cidrs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_cidrs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_cidrs/{id}": {
      "get": {
        "tags": [
          "vnet_cidrs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_cidrs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_cidrs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_cidrs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_cidrs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_dns_views": {
      "get": {
        "tags": [
          "vnet_dns_views"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_dns_views"
        ],
        "requestBody": {
          "description": "vnet_dns_views body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_views_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_dns_views/{id}": {
      "get": {
        "tags": [
          "vnet_dns_views"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_dns_views"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_dns_views body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_views_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_dns_views"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_dns_zone_records": {
      "get": {
        "tags": [
          "vnet_dns_zone_records"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_dns_zone_records"
        ],
        "requestBody": {
          "description": "vnet_dns_zone_records body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_zone_records_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_dns_zone_records/{id}": {
      "get": {
        "tags": [
          "vnet_dns_zone_records"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_dns_zone_records"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_dns_zone_records body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_zone_records_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_dns_zone_records"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_dns_zones": {
      "get": {
        "tags": [
          "vnet_dns_zones"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_dns_zones"
        ],
        "requestBody": {
          "description": "vnet_dns_zones body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_zones_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_dns_zones/{id}": {
      "get": {
        "tags": [
          "vnet_dns_zones"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_dns_zones"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_dns_zones body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_dns_zones_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_dns_zones"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_eigrp_router_commands": {
      "get": {
        "tags": [
          "vnet_eigrp_router_commands"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_eigrp_router_commands"
        ],
        "requestBody": {
          "description": "vnet_eigrp_router_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_eigrp_router_commands_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_eigrp_router_commands/{id}": {
      "get": {
        "tags": [
          "vnet_eigrp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_eigrp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_eigrp_router_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_eigrp_router_commands_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_eigrp_router_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_eigrp_routers": {
      "get": {
        "tags": [
          "vnet_eigrp_routers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_eigrp_routers"
        ],
        "requestBody": {
          "description": "vnet_eigrp_routers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_eigrp_routers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_eigrp_routers/{id}": {
      "get": {
        "tags": [
          "vnet_eigrp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_eigrp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_eigrp_routers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_eigrp_routers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_eigrp_routers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_hosts": {
      "get": {
        "tags": [
          "vnet_hosts"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_hosts"
        ],
        "requestBody": {
          "description": "vnet_hosts body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_hosts_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_hosts/{id}": {
      "get": {
        "tags": [
          "vnet_hosts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_hosts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_hosts body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_hosts_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_hosts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_ipsec_connections": {
      "get": {
        "tags": [
          "vnet_ipsec_connections"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_ipsec_connections"
        ],
        "requestBody": {
          "description": "vnet_ipsec_connections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_connections_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_ipsec_connections/{id}": {
      "get": {
        "tags": [
          "vnet_ipsec_connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_ipsec_connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_ipsec_connections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_connections_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_ipsec_connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_ipsec_phase1s": {
      "get": {
        "tags": [
          "vnet_ipsec_phase1s"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_ipsec_phase1s"
        ],
        "requestBody": {
          "description": "vnet_ipsec_phase1s body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_phase1s_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_ipsec_phase1s/{id}": {
      "get": {
        "tags": [
          "vnet_ipsec_phase1s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_ipsec_phase1s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_ipsec_phase1s body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_phase1s_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_ipsec_phase1s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_ipsec_phase2s": {
      "get": {
        "tags": [
          "vnet_ipsec_phase2s"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_ipsec_phase2s"
        ],
        "requestBody": {
          "description": "vnet_ipsec_phase2s body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_phase2s_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_ipsec_phase2s/{id}": {
      "get": {
        "tags": [
          "vnet_ipsec_phase2s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_ipsec_phase2s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_ipsec_phase2s body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsec_phase2s_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_ipsec_phase2s"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_ipsecs": {
      "get": {
        "tags": [
          "vnet_ipsecs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_ipsecs"
        ],
        "requestBody": {
          "description": "vnet_ipsecs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsecs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_ipsecs/{id}": {
      "get": {
        "tags": [
          "vnet_ipsecs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_ipsecs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_ipsecs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ipsecs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_ipsecs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_monitor_stats_history_long": {
      "get": {
        "tags": [
          "vnet_monitor_stats_history_long"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_monitor_stats_history_long"
        ],
        "requestBody": {
          "description": "vnet_monitor_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_monitor_stats_history_long_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_monitor_stats_history_long/{id}": {
      "get": {
        "tags": [
          "vnet_monitor_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_monitor_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_monitor_stats_history_long body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_monitor_stats_history_long_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_monitor_stats_history_long"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_monitor_stats_history_short": {
      "get": {
        "tags": [
          "vnet_monitor_stats_history_short"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_monitor_stats_history_short"
        ],
        "requestBody": {
          "description": "vnet_monitor_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_monitor_stats_history_short_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_monitor_stats_history_short/{id}": {
      "get": {
        "tags": [
          "vnet_monitor_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_monitor_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_monitor_stats_history_short body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_monitor_stats_history_short_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_monitor_stats_history_short"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_ospf_commands": {
      "get": {
        "tags": [
          "vnet_ospf_commands"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_ospf_commands"
        ],
        "requestBody": {
          "description": "vnet_ospf_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ospf_commands_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_ospf_commands/{id}": {
      "get": {
        "tags": [
          "vnet_ospf_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_ospf_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_ospf_commands body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_ospf_commands_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_ospf_commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_proxy": {
      "get": {
        "tags": [
          "vnet_proxy"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_proxy"
        ],
        "requestBody": {
          "description": "vnet_proxy body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_proxy_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_proxy/{id}": {
      "get": {
        "tags": [
          "vnet_proxy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_proxy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_proxy body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_proxy_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_proxy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_proxy_tenants": {
      "get": {
        "tags": [
          "vnet_proxy_tenants"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_proxy_tenants"
        ],
        "requestBody": {
          "description": "vnet_proxy_tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_proxy_tenants_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_proxy_tenants/{id}": {
      "get": {
        "tags": [
          "vnet_proxy_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_proxy_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_proxy_tenants body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_proxy_tenants_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_proxy_tenants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_queries": {
      "get": {
        "tags": [
          "vnet_queries"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_queries"
        ],
        "requestBody": {
          "description": "vnet_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_queries_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_queries/{id}": {
      "get": {
        "tags": [
          "vnet_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_queries body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_queries_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_queries"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_rule_aliases": {
      "get": {
        "tags": [
          "vnet_rule_aliases"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_rule_aliases"
        ],
        "requestBody": {
          "description": "vnet_rule_aliases body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_rule_aliases_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_rule_aliases/{id}": {
      "get": {
        "tags": [
          "vnet_rule_aliases"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_rule_aliases"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_rule_aliases body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_rule_aliases_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_rule_aliases"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_rule_references": {
      "get": {
        "tags": [
          "vnet_rule_references"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_rule_references"
        ],
        "requestBody": {
          "description": "vnet_rule_references body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_rule_references_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_rule_references/{id}": {
      "get": {
        "tags": [
          "vnet_rule_references"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_rule_references"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "vnet_rule_references"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_rules": {
      "get": {
        "tags": [
          "vnet_rules"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_rules"
        ],
        "requestBody": {
          "description": "vnet_rules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_rules_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_rules/{id}": {
      "get": {
        "tags": [
          "vnet_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_rules body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_rules_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_wireguard_peer_status": {
      "get": {
        "tags": [
          "vnet_wireguard_peer_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_wireguard_peer_status"
        ],
        "requestBody": {
          "description": "vnet_wireguard_peer_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguard_peer_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_wireguard_peer_status/{id}": {
      "get": {
        "tags": [
          "vnet_wireguard_peer_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_wireguard_peer_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_wireguard_peer_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguard_peer_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_wireguard_peer_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_wireguard_peers": {
      "get": {
        "tags": [
          "vnet_wireguard_peers"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_wireguard_peers"
        ],
        "requestBody": {
          "description": "vnet_wireguard_peers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguard_peers_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_wireguard_peers/{id}": {
      "get": {
        "tags": [
          "vnet_wireguard_peers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_wireguard_peers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_wireguard_peers body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguard_peers_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_wireguard_peers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_wireguards": {
      "get": {
        "tags": [
          "vnet_wireguards"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_wireguards"
        ],
        "requestBody": {
          "description": "vnet_wireguards body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguards_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_wireguards/{id}": {
      "get": {
        "tags": [
          "vnet_wireguards"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_wireguards"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_wireguards body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wireguards_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_wireguards"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnet_wires": {
      "get": {
        "tags": [
          "vnet_wires"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnet_wires"
        ],
        "requestBody": {
          "description": "vnet_wires body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wires_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnet_wires/{id}": {
      "get": {
        "tags": [
          "vnet_wires"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnet_wires"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnet_wires body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnet_wires_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnet_wires"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/vnets": {
      "get": {
        "tags": [
          "vnets"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "vnets"
        ],
        "requestBody": {
          "description": "vnets body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnets_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/vnets/{id}": {
      "get": {
        "tags": [
          "vnets"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "vnets"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "vnets body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vnets_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "vnets"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_actions": {
      "get": {
        "tags": [
          "volume_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_actions"
        ],
        "requestBody": {
          "description": "volume_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_actions/{id}": {
      "get": {
        "tags": [
          "volume_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus": {
      "get": {
        "tags": [
          "volume_antivirus"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus"
        ],
        "requestBody": {
          "description": "volume_antivirus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus/{id}": {
      "get": {
        "tags": [
          "volume_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus_actions": {
      "get": {
        "tags": [
          "volume_antivirus_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus_actions"
        ],
        "requestBody": {
          "description": "volume_antivirus_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus_actions/{id}": {
      "get": {
        "tags": [
          "volume_antivirus_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus_infections": {
      "get": {
        "tags": [
          "volume_antivirus_infections"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus_infections"
        ],
        "requestBody": {
          "description": "volume_antivirus_infections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_infections_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus_infections/{id}": {
      "get": {
        "tags": [
          "volume_antivirus_infections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus_infections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus_infections body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_infections_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus_infections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus_logs": {
      "get": {
        "tags": [
          "volume_antivirus_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus_logs"
        ],
        "requestBody": {
          "description": "volume_antivirus_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus_logs/{id}": {
      "get": {
        "tags": [
          "volume_antivirus_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus_stats": {
      "get": {
        "tags": [
          "volume_antivirus_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus_stats"
        ],
        "requestBody": {
          "description": "volume_antivirus_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus_stats/{id}": {
      "get": {
        "tags": [
          "volume_antivirus_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_antivirus_status": {
      "get": {
        "tags": [
          "volume_antivirus_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_antivirus_status"
        ],
        "requestBody": {
          "description": "volume_antivirus_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_antivirus_status/{id}": {
      "get": {
        "tags": [
          "volume_antivirus_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_antivirus_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_antivirus_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_antivirus_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_antivirus_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_browser": {
      "get": {
        "tags": [
          "volume_browser"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_browser"
        ],
        "requestBody": {
          "description": "volume_browser body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_browser_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_browser/{id}": {
      "get": {
        "tags": [
          "volume_browser"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_browser"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_browser body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_browser_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_browser"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_cifs_shares": {
      "get": {
        "tags": [
          "volume_cifs_shares"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_cifs_shares"
        ],
        "requestBody": {
          "description": "volume_cifs_shares body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_cifs_shares_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_cifs_shares/{id}": {
      "get": {
        "tags": [
          "volume_cifs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_cifs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_cifs_shares body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_cifs_shares_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_cifs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_logs": {
      "get": {
        "tags": [
          "volume_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_logs"
        ],
        "requestBody": {
          "description": "volume_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_logs/{id}": {
      "get": {
        "tags": [
          "volume_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_nfs_shares": {
      "get": {
        "tags": [
          "volume_nfs_shares"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_nfs_shares"
        ],
        "requestBody": {
          "description": "volume_nfs_shares body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_nfs_shares_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_nfs_shares/{id}": {
      "get": {
        "tags": [
          "volume_nfs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_nfs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_nfs_shares body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_nfs_shares_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_nfs_shares"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_share_logs": {
      "get": {
        "tags": [
          "volume_share_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_share_logs"
        ],
        "requestBody": {
          "description": "volume_share_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_share_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_share_logs/{id}": {
      "get": {
        "tags": [
          "volume_share_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_share_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_share_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_share_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_share_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_share_status": {
      "get": {
        "tags": [
          "volume_share_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_share_status"
        ],
        "requestBody": {
          "description": "volume_share_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_share_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_share_status/{id}": {
      "get": {
        "tags": [
          "volume_share_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_share_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_share_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_share_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_share_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_snapshots": {
      "get": {
        "tags": [
          "volume_snapshots"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_snapshots"
        ],
        "requestBody": {
          "description": "volume_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_snapshots_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_snapshots/{id}": {
      "get": {
        "tags": [
          "volume_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_snapshots body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_snapshots_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_snapshots"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_status": {
      "get": {
        "tags": [
          "volume_status"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_status"
        ],
        "requestBody": {
          "description": "volume_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_status_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_status/{id}": {
      "get": {
        "tags": [
          "volume_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_status body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_status_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_status"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_sync_actions": {
      "get": {
        "tags": [
          "volume_sync_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_sync_actions"
        ],
        "requestBody": {
          "description": "volume_sync_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_sync_actions/{id}": {
      "get": {
        "tags": [
          "volume_sync_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_sync_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_sync_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_sync_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_sync_logs": {
      "get": {
        "tags": [
          "volume_sync_logs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_sync_logs"
        ],
        "requestBody": {
          "description": "volume_sync_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_logs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_sync_logs/{id}": {
      "get": {
        "tags": [
          "volume_sync_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_sync_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_sync_logs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_logs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_sync_logs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_sync_progresses": {
      "get": {
        "tags": [
          "volume_sync_progresses"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_sync_progresses"
        ],
        "requestBody": {
          "description": "volume_sync_progresses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_progresses_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_sync_progresses/{id}": {
      "get": {
        "tags": [
          "volume_sync_progresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_sync_progresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_sync_progresses body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_sync_progresses_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_sync_progresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_syncs": {
      "get": {
        "tags": [
          "volume_syncs"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_syncs"
        ],
        "requestBody": {
          "description": "volume_syncs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_syncs_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_syncs/{id}": {
      "get": {
        "tags": [
          "volume_syncs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_syncs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_syncs body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_syncs_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_syncs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_vm_export_actions": {
      "get": {
        "tags": [
          "volume_vm_export_actions"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_vm_export_actions"
        ],
        "requestBody": {
          "description": "volume_vm_export_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_export_actions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_vm_export_actions/{id}": {
      "get": {
        "tags": [
          "volume_vm_export_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_vm_export_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_vm_export_actions body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_export_actions_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_vm_export_actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_vm_export_stats": {
      "get": {
        "tags": [
          "volume_vm_export_stats"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_vm_export_stats"
        ],
        "requestBody": {
          "description": "volume_vm_export_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_export_stats_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_vm_export_stats/{id}": {
      "get": {
        "tags": [
          "volume_vm_export_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_vm_export_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_vm_export_stats body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_export_stats_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_vm_export_stats"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volume_vm_exports": {
      "get": {
        "tags": [
          "volume_vm_exports"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volume_vm_exports"
        ],
        "requestBody": {
          "description": "volume_vm_exports body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_exports_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volume_vm_exports/{id}": {
      "get": {
        "tags": [
          "volume_vm_exports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volume_vm_exports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volume_vm_exports body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volume_vm_exports_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volume_vm_exports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/volumes": {
      "get": {
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter list for rows",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset results (used for paging)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit result count",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort rows by field (example: +id, or -id)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volumes"
        ],
        "requestBody": {
          "description": "volumes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volumes_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/volumes/{id}": {
      "get": {
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "volumes body object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/volumes_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          },
          "421": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "resource id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Database Tables"
        ],
        "summary": "List tables",
        "description": "Get a list of database tables",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma delimited list of fields/view to return (most or all may be provided as an alias)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/table_response"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/err_response"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "permissions_post": {
        "required": [
          "identity",
          "row",
          "table",
          "tableid"
        ],
        "type": "object",
        "properties": {
          "identity": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "table": {
            "type": "string",
            "description": "alias type: text"
          },
          "rowdisplay": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity_display": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity_owner": {
            "type": "string",
            "description": "alias type: text"
          },
          "tableid": {
            "type": "integer",
            "format": "int64"
          },
          "row": {
            "type": "integer",
            "format": "int64"
          },
          "list": {
            "type": "boolean",
            "default": true
          },
          "read": {
            "type": "boolean"
          },
          "create": {
            "type": "boolean"
          },
          "modify": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          }
        }
      },
      "permissions_put": {
        "type": "object",
        "properties": {
          "identity": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "table": {
            "type": "string",
            "description": "alias type: text"
          },
          "rowdisplay": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity_display": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity_owner": {
            "type": "string",
            "description": "alias type: text"
          },
          "list": {
            "type": "boolean",
            "default": true
          },
          "read": {
            "type": "boolean"
          },
          "create": {
            "type": "boolean"
          },
          "modify": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          }
        }
      },
      "auth_source_states_post": {
        "required": [
          "auth_source"
        ],
        "type": "object",
        "properties": {
          "auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "auth_source_states_put": {
        "type": "object",
        "properties": {
          "auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "auth_sources_post": {
        "required": [
          "driver",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "button_background_color": {
            "type": "string"
          },
          "button_color": {
            "type": "string"
          },
          "button_fa_icon": {
            "type": "string"
          },
          "icon_color": {
            "type": "string"
          },
          "menu": {
            "type": "boolean",
            "default": false
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "debug": {
            "type": "boolean",
            "default": false
          },
          "debug_ts": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "driver": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "gitlab",
              "google",
              "oauth2",
              "okta",
              "openid",
              "openid-well-known",
              "azure",
              "verge.io"
            ]
          }
        }
      },
      "auth_sources_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "button_background_color": {
            "type": "string"
          },
          "button_color": {
            "type": "string"
          },
          "button_fa_icon": {
            "type": "string"
          },
          "icon_color": {
            "type": "string"
          },
          "menu": {
            "type": "boolean",
            "default": false
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "debug": {
            "type": "boolean",
            "default": false
          },
          "debug_ts": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          }
        }
      },
      "billing_post": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "tier_0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_0_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_1_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_2_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_3_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_4_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_5_total": {
            "type": "integer",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "workload_datapoints": {
            "type": "integer",
            "format": "int32"
          },
          "storage_datapoints": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "sent": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "billing_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "tier_0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_0_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_1_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_2_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_3_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_4_total": {
            "type": "integer",
            "format": "int64"
          },
          "tier_5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier_5_total": {
            "type": "integer",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "workload_datapoints": {
            "type": "integer",
            "format": "int32"
          },
          "storage_datapoints": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "sent": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "billing_actions_post": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "generate",
            "enum": [
              "generate"
            ]
          }
        }
      },
      "billing_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "generate",
            "enum": [
              "generate"
            ]
          }
        }
      },
      "catalog_logs_post": {
        "type": "object",
        "properties": {
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "catalog_logs_put": {
        "type": "object",
        "properties": {
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "catalog_repositories_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "local",
            "enum": [
              "local",
              "provider",
              "remote",
              "remote-git",
              "yottabyte"
            ]
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "type": "string"
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "auto_refresh": {
            "type": "boolean",
            "default": true
          },
          "max_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "1",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "override_default_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "none",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "last_refreshed": {
            "type": "number",
            "format": "double"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "catalog_repositories_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: description"
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "type": "string"
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "auto_refresh": {
            "type": "boolean",
            "default": true
          },
          "max_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "1",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "override_default_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "none",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "last_refreshed": {
            "type": "number",
            "format": "double"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "catalog_repository_actions_post": {
        "required": [
          "repository"
        ],
        "type": "object",
        "properties": {
          "repository": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "refresh",
            "enum": [
              "refresh"
            ]
          }
        }
      },
      "catalog_repository_actions_put": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "refresh",
            "enum": [
              "refresh"
            ]
          }
        }
      },
      "catalog_repository_logs_post": {
        "required": [
          "catalog_repository"
        ],
        "type": "object",
        "properties": {
          "catalog_repository": {
            "type": "integer",
            "description": "alias type: parent_catalog_repository",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "catalog_repository_logs_put": {
        "type": "object",
        "properties": {
          "catalog_repository": {
            "type": "integer",
            "description": "alias type: parent_catalog_repository",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "catalog_repository_status_post": {
        "required": [
          "repository"
        ],
        "type": "object",
        "properties": {
          "repository": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "online",
            "enum": [
              "online",
              "refreshing",
              "downloading",
              "installing",
              "applying",
              "offline",
              "error"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "catalog_repository_status_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "online",
            "enum": [
              "online",
              "refreshing",
              "downloading",
              "installing",
              "applying",
              "offline",
              "error"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "catalogs_post": {
        "required": [
          "name",
          "repository"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string"
          },
          "repository": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "publishing_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "private",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          }
        }
      },
      "catalogs_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "publishing_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "private",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "certificates_post": {
        "required": [
          "listener"
        ],
        "type": "object",
        "properties": {
          "listener": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "domain": {
            "type": "string",
            "description": "alias type: text"
          },
          "public": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "cipher": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "type": {
            "type": "string",
            "default": "manual",
            "enum": [
              "manual",
              "letsencrypt"
            ]
          },
          "acme_server": {
            "pattern": "https://.*",
            "type": "string",
            "description": "alias type: text"
          },
          "renew": {
            "type": "boolean",
            "default": true
          },
          "contact": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "agree_tos": {
            "type": "boolean",
            "default": false
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "certificates_put": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "alias type: text"
          },
          "public": {
            "type": "string"
          },
          "private": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "cipher": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "type": {
            "type": "string",
            "default": "manual",
            "enum": [
              "manual",
              "letsencrypt"
            ]
          },
          "acme_server": {
            "pattern": "https://.*",
            "type": "string",
            "description": "alias type: text"
          },
          "renew": {
            "type": "boolean",
            "default": true
          },
          "contact": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "agree_tos": {
            "type": "boolean",
            "default": false
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "clone_iso_post": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "alias type: text",
            "default": "Verge.io Clone ISO"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "ready",
            "enum": [
              "ready",
              "building",
              "error",
              "cancel"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "clone_iso_put": {
        "type": "object",
        "properties": {
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "clone_iso_actions_post": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "update",
            "enum": [
              "update",
              "delete",
              "cancel"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "clone_iso_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "update",
            "enum": [
              "update",
              "delete",
              "cancel"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_restore_post": {
        "required": [
          "cloud_snapshot"
        ],
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "backup": {
            "type": "boolean",
            "default": true
          },
          "auto_reboot": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "cloud_restore_put": {
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "backup": {
            "type": "boolean",
            "default": true
          },
          "confirm": {
            "type": "boolean",
            "default": false
          },
          "auto_reboot": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "cloud_snapshot_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh",
              "request",
              "find_tenants",
              "find_vms"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_actions_put": {
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh",
              "request",
              "find_tenants",
              "find_vms"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_tenant_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "recover"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_tenant_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "recover"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_tenants_post": {
        "required": [
          "cloud_snapshot",
          "name",
          "original_key"
        ],
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "original_key": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "nodes": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "cpu_cores": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "importing",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "cloud_snapshot_tenants_put": {
        "type": "object",
        "properties": {
          "is_snapshot": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "importing",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "cloud_snapshot_vm_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "recover"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_vm_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "recover"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cloud_snapshot_vms_post": {
        "required": [
          "cloud_snapshot",
          "name",
          "original_key"
        ],
        "type": "object",
        "properties": {
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "original_key": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "machine_uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "cpu_cores": {
            "maximum": 128,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 256,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "os_family": {
            "type": "string",
            "description": "alias type: text"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "importing",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "cloud_snapshot_vms_put": {
        "type": "object",
        "properties": {
          "is_snapshot": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "importing",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "cloud_snapshots_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "snapshot_period": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "schedule_task": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "provider": {
            "type": "boolean",
            "default": false
          },
          "private": {
            "type": "boolean",
            "default": false
          },
          "remote_sync": {
            "type": "boolean"
          },
          "incoming_sync": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "cloud_snapshots_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "snapshot_period": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "schedule_task": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "provider": {
            "type": "boolean",
            "default": false
          },
          "private": {
            "type": "boolean",
            "default": false
          },
          "remote_sync": {
            "type": "boolean"
          },
          "incoming_sync": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "cloudinit_files_post": {
        "required": [
          "name",
          "owner"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "allocated_bytes": {
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: filemodified",
            "format": "int32"
          },
          "contents": {
            "maxLength": 65536,
            "type": "string"
          },
          "contains_variables": {
            "type": "boolean",
            "default": false
          },
          "render": {
            "type": "string",
            "default": "no",
            "enum": [
              "no",
              "variables",
              "jinja2"
            ]
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "cloudinit_files_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "allocated_bytes": {
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: filemodified",
            "format": "int32"
          },
          "contents": {
            "maxLength": 65536,
            "type": "string"
          },
          "contains_variables": {
            "type": "boolean",
            "default": false
          },
          "render": {
            "type": "string",
            "default": "no",
            "enum": [
              "no",
              "variables",
              "jinja2"
            ]
          }
        }
      },
      "cluster_actions_post": {
        "required": [
          "action",
          "cluster"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "shutdown",
              "cancel_shutdown",
              "refresh"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cluster_actions_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "shutdown",
              "cancel_shutdown",
              "refresh"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cluster_stats_history_long_post": {
        "required": [
          "cluster"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_stats_history_long_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_stats_history_short_post": {
        "required": [
          "cluster"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_stats_history_short_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_status_post": {
        "required": [
          "cluster"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "shutdown",
              "offline",
              "maintenance",
              "reduced",
              "noredundant",
              "error",
              "updating",
              "insufficient"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_status_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "shutdown",
              "offline",
              "maintenance",
              "reduced",
              "noredundant",
              "error",
              "updating",
              "insufficient"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "total_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "online_nodes": {
            "type": "integer",
            "format": "int32"
          },
          "running_machines": {
            "type": "integer",
            "format": "int32"
          },
          "total_ram": {
            "type": "integer",
            "format": "int32"
          },
          "online_ram": {
            "type": "integer",
            "format": "int32"
          },
          "used_ram": {
            "type": "integer",
            "format": "int32"
          },
          "total_cores": {
            "type": "integer",
            "format": "int32"
          },
          "online_cores": {
            "type": "integer",
            "format": "int32"
          },
          "used_cores": {
            "type": "integer",
            "format": "int32"
          },
          "phys_ram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_vram_used": {
            "type": "integer",
            "format": "int64"
          },
          "phys_total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_tier_stats_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "cluster_tier_stats_put": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "cluster_tier_stats_history_long_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_tier_stats_history_long_put": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "cluster_tier_stats_history_short_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "cluster_tier_stats_history_short_put": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "cluster_tier_status_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "repairing",
              "initializing",
              "verifying",
              "noredundant",
              "outofspace"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "redundant": {
            "type": "boolean"
          },
          "encrypted": {
            "type": "boolean"
          },
          "working": {
            "type": "boolean"
          },
          "last_walk_time_ms": {
            "type": "integer",
            "format": "int64"
          },
          "last_fullwalk_time_ms": {
            "type": "integer",
            "format": "int64"
          },
          "transaction": {
            "type": "integer",
            "format": "int64"
          },
          "repairs": {
            "type": "integer",
            "format": "int64"
          },
          "bad_drives": {
            "type": "number",
            "format": "double"
          },
          "fullwalk": {
            "type": "boolean"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "index_unique": {
            "type": "integer",
            "format": "int64"
          },
          "state_timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "cur_space_throttle_ms": {
            "type": "number",
            "format": "double"
          },
          "transaction_start_stamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "cluster_tier_status_put": {
        "type": "object",
        "properties": {
          "tier": {
            "type": "integer",
            "description": "alias type: parent_tier",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "repairing",
              "initializing",
              "verifying",
              "noredundant",
              "outofspace"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "redundant": {
            "type": "boolean"
          },
          "encrypted": {
            "type": "boolean"
          },
          "working": {
            "type": "boolean"
          },
          "last_walk_time_ms": {
            "type": "integer",
            "format": "int64"
          },
          "last_fullwalk_time_ms": {
            "type": "integer",
            "format": "int64"
          },
          "transaction": {
            "type": "integer",
            "format": "int64"
          },
          "repairs": {
            "type": "integer",
            "format": "int64"
          },
          "bad_drives": {
            "type": "number",
            "format": "double"
          },
          "fullwalk": {
            "type": "boolean"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "index_unique": {
            "type": "integer",
            "format": "int64"
          },
          "state_timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "cur_space_throttle_ms": {
            "type": "number",
            "format": "double"
          },
          "transaction_start_stamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "cluster_tiers_post": {
        "required": [
          "cluster",
          "tier"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "cost_per_gb": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "price_per_gb": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "dashboard": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "cluster_tiers_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "cost_per_gb": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "price_per_gb": {
            "minimum": 0,
            "type": "number",
            "format": "double"
          },
          "dashboard": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "clusters_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "storage": {
            "type": "boolean"
          },
          "compute": {
            "type": "boolean"
          },
          "kvm_nested": {
            "type": "boolean",
            "default": false
          },
          "allow_nested_virt_migration": {
            "type": "boolean",
            "default": true
          },
          "allow_vgpu_migration": {
            "type": "boolean",
            "default": false
          },
          "enable_split_lock_detection": {
            "type": "boolean",
            "default": false
          },
          "recommended_cpu_type": {
            "type": "string",
            "description": "alias type: cpu_types",
            "default": "qemu64",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "default_cpu": {
            "type": "string",
            "description": "alias type: cpu_types",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "disable_cpu_security_mitigations": {
            "type": "boolean",
            "default": false
          },
          "spec_store_bypass_disable": {
            "type": "boolean",
            "default": false
          },
          "disable_smt": {
            "type": "boolean",
            "default": false
          },
          "x86_energy_perf_policy": {
            "type": "string",
            "description": "alias type: text",
            "default": "performance",
            "enum": [
              "balance-performance",
              "balance-power",
              "normal",
              "performance",
              "power"
            ]
          },
          "scaling_governor": {
            "type": "string",
            "description": "alias type: text",
            "default": "performance",
            "enum": [
              "ondemand",
              "performance",
              "powersave"
            ]
          },
          "ram_per_unit": {
            "maximum": 1048576,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 4096
          },
          "cores_per_unit": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "cost_per_unit": {
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "price_per_unit": {
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "max_ram_per_vm": {
            "maximum": 1048576,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 65536
          },
          "max_cores_per_vm": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 16
          },
          "storage_cachesize": {
            "maximum": 5000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "storage_buffersize": {
            "maximum": 5000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "storage_hugepages": {
            "type": "boolean",
            "default": true
          },
          "target_ram_pct": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 80
          },
          "ram_overcommit_pct": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "swap_tier": {
            "maximum": 5,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "swap_per_drive": {
            "maximum": 1000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "log_filter": {
            "type": "string",
            "description": "alias type: text",
            "default": "*:3,ipmievd:5,rasdaemon:4,!ntpd"
          },
          "max_core_temp": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "max_core_temp_warn_perc": {
            "maximum": 100,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "critical_core_temp": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "disable_sleep": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "clusters_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "compute": {
            "type": "boolean"
          },
          "kvm_nested": {
            "type": "boolean",
            "default": false
          },
          "allow_nested_virt_migration": {
            "type": "boolean",
            "default": true
          },
          "allow_vgpu_migration": {
            "type": "boolean",
            "default": false
          },
          "enable_split_lock_detection": {
            "type": "boolean",
            "default": false
          },
          "recommended_cpu_type": {
            "type": "string",
            "description": "alias type: cpu_types",
            "default": "qemu64",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "default_cpu": {
            "type": "string",
            "description": "alias type: cpu_types",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "disable_cpu_security_mitigations": {
            "type": "boolean",
            "default": false
          },
          "spec_store_bypass_disable": {
            "type": "boolean",
            "default": false
          },
          "disable_smt": {
            "type": "boolean",
            "default": false
          },
          "x86_energy_perf_policy": {
            "type": "string",
            "description": "alias type: text",
            "default": "performance",
            "enum": [
              "balance-performance",
              "balance-power",
              "normal",
              "performance",
              "power"
            ]
          },
          "scaling_governor": {
            "type": "string",
            "description": "alias type: text",
            "default": "performance",
            "enum": [
              "ondemand",
              "performance",
              "powersave"
            ]
          },
          "ram_per_unit": {
            "maximum": 1048576,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 4096
          },
          "cores_per_unit": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "cost_per_unit": {
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "price_per_unit": {
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "max_ram_per_vm": {
            "maximum": 1048576,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 65536
          },
          "max_cores_per_vm": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 16
          },
          "storage_cachesize": {
            "maximum": 5000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "storage_buffersize": {
            "maximum": 5000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "storage_hugepages": {
            "type": "boolean",
            "default": true
          },
          "target_ram_pct": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 80
          },
          "ram_overcommit_pct": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "swap_tier": {
            "maximum": 5,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "swap_per_drive": {
            "maximum": 1000000,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "log_filter": {
            "type": "string",
            "description": "alias type: text",
            "default": "*:3,ipmievd:5,rasdaemon:4,!ntpd"
          },
          "max_core_temp": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "max_core_temp_warn_perc": {
            "maximum": 100,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 10
          },
          "critical_core_temp": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "disable_sleep": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "file_actions_post": {
        "required": [
          "action",
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "overwrite",
              "add_link",
              "delete_link",
              "delete_reference",
              "make_iso"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "file_actions_put": {
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "overwrite",
              "add_link",
              "delete_link",
              "delete_reference",
              "make_iso"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "files_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: filename"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "iso",
              "img",
              "qcow",
              "qcow2",
              "qed",
              "raw",
              "vdi",
              "vhd",
              "vhdx",
              "vmdk",
              "ova",
              "ovf",
              "vmx",
              "9p",
              "dir",
              "png",
              "jpg",
              "ybvm",
              "nvram",
              "unknown",
              "ico",
              "diagnostics",
              "zip",
              "lrq",
              "run"
            ]
          },
          "owner": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "allocated_bytes": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: filemodified",
            "format": "int32"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "url": {
            "maxLength": 4096,
            "pattern": "^(((https?|ftp|inbox)://.*)|)$",
            "type": "string"
          },
          "public_link": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          },
          "skip_upload_head_check": {
            "type": "boolean"
          }
        }
      },
      "files_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: filename"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "iso",
              "img",
              "qcow",
              "qcow2",
              "qed",
              "raw",
              "vdi",
              "vhd",
              "vhdx",
              "vmdk",
              "ova",
              "ovf",
              "vmx",
              "9p",
              "dir",
              "png",
              "jpg",
              "ybvm",
              "nvram",
              "unknown",
              "ico",
              "diagnostics",
              "zip",
              "lrq",
              "run"
            ]
          },
          "owner": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "allocated_bytes": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "maximum": 281474976710656,
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: filemodified",
            "format": "int32"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "public_link": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "skip_upload_head_check": {
            "type": "boolean"
          }
        }
      },
      "files_public_links_post": {
        "required": [
          "file",
          "format"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "link_name": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "description": "alias type: text",
            "default": "filename",
            "enum": [
              "anonymous",
              "filename",
              "custom"
            ]
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          }
        }
      },
      "files_public_links_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "link_name": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "description": "alias type: text",
            "default": "filename",
            "enum": [
              "anonymous",
              "filename",
              "custom"
            ]
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          }
        }
      },
      "group_logs_post": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "description": "alias type: parent_group",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "group_logs_put": {
        "type": "object",
        "properties": {
          "group": {
            "type": "integer",
            "description": "alias type: parent_group",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "groups_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "system_group": {
            "type": "boolean"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "groups_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "help_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "search"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "help_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "search"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "help_search_post": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "searching",
            "enum": [
              "searching",
              "complete",
              "error"
            ]
          },
          "text": {
            "type": "string"
          },
          "result": {
            "type": "object",
            "properties": {}
          },
          "nav": {
            "type": "string"
          }
        }
      },
      "help_search_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "searching",
            "enum": [
              "searching",
              "complete",
              "error"
            ]
          },
          "text": {
            "type": "string"
          },
          "result": {
            "type": "object",
            "properties": {}
          },
          "nav": {
            "type": "string"
          }
        }
      },
      "license_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "generate"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "license_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "generate"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "licenses_post": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "added_by": {
            "type": "string",
            "description": "alias type: text"
          },
          "key": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "licenses_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: name"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "added": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "issued": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "valid_from": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "valid_until": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "added_by": {
            "type": "string",
            "description": "alias type: text"
          },
          "features": {
            "type": "object",
            "properties": {}
          },
          "allow_branding": {
            "type": "boolean",
            "default": false
          },
          "auto_renewal": {
            "type": "boolean",
            "default": false
          },
          "key": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "logs_post": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "object_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "other",
            "enum": [
              "catalog_repository",
              "cloud_snapshots",
              "cluster",
              "file",
              "group",
              "node",
              "oidc_application",
              "other",
              "permission",
              "smtp",
              "tenant",
              "updates",
              "user",
              "vm",
              "vm_service",
              "vm_import",
              "vmware_container",
              "vnet",
              "site",
              "system",
              "snapshot_profile",
              "backup_dr"
            ]
          },
          "object_name": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "logs_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "object_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "other",
            "enum": [
              "catalog_repository",
              "cloud_snapshots",
              "cluster",
              "file",
              "group",
              "node",
              "oidc_application",
              "other",
              "permission",
              "smtp",
              "tenant",
              "updates",
              "user",
              "vm",
              "vm_service",
              "vm_import",
              "vmware_container",
              "vnet",
              "site",
              "system",
              "snapshot_profile",
              "backup_dr"
            ]
          },
          "object_name": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "machine_console_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "host": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: port",
            "format": "int32"
          },
          "websocket_request": {
            "type": "boolean"
          }
        }
      },
      "machine_console_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "host": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: port",
            "format": "int32"
          },
          "websocket_request": {
            "type": "boolean"
          }
        }
      },
      "machine_console_active_post": {
        "required": [
          "console",
          "fd"
        ],
        "type": "object",
        "properties": {
          "console": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "fd": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "type": "string",
            "description": "alias type: text"
          },
          "agent": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity": {
            "type": "string",
            "description": "alias type: row"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_console_active_put": {
        "type": "object",
        "properties": {
          "console": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "fd": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "type": "string",
            "description": "alias type: text"
          },
          "agent": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity": {
            "type": "string",
            "description": "alias type: row"
          }
        }
      },
      "machine_drives_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "orderid": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "virtio-scsi",
            "enum": [
              "virtio",
              "ide",
              "ahci",
              "cifs",
              "nfs",
              "vsan",
              "lsi53c895a",
              "megasas",
              "megasas-gen2",
              "mptsas1068",
              "virtio-scsi",
              "virtio-scsi-dedicated",
              "pflash",
              "direct",
              "tpm_state",
              "usb"
            ]
          },
          "media": {
            "type": "string",
            "description": "alias type: text",
            "default": "disk",
            "enum": [
              "cdrom",
              "disk",
              "efidisk",
              "import",
              "9p",
              "dir",
              "clone",
              "clone9p",
              "clonedir",
              "nonpersistent",
              "nonpersistent9p",
              "nonpersistentdir"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "serial": {
            "pattern": "^[a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "disksize": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "used_bytes": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "media_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "readonly": {
            "type": "boolean",
            "default": false
          },
          "optimize": {
            "type": "string",
            "description": "alias type: optimize",
            "default": "general",
            "enum": [
              "general",
              "large"
            ]
          },
          "preserve_drive_format": {
            "type": "boolean",
            "default": false
          },
          "nocreate": {
            "type": "boolean"
          },
          "spare": {
            "type": "boolean"
          },
          "asset": {
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "fsync": {
            "type": "string",
            "default": "",
            "enum": [
              "",
              "0",
              "1"
            ]
          },
          "discard": {
            "type": "boolean",
            "default": true
          },
          "advanced": {
            "type": "string"
          }
        }
      },
      "machine_drives_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "orderid": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "virtio-scsi",
            "enum": [
              "virtio",
              "ide",
              "ahci",
              "cifs",
              "nfs",
              "vsan",
              "lsi53c895a",
              "megasas",
              "megasas-gen2",
              "mptsas1068",
              "virtio-scsi",
              "virtio-scsi-dedicated",
              "pflash",
              "direct",
              "tpm_state",
              "usb"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "serial": {
            "pattern": "^[a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "disksize": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "media_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "readonly": {
            "type": "boolean",
            "default": false
          },
          "optimize": {
            "type": "string",
            "description": "alias type: optimize",
            "default": "general",
            "enum": [
              "general",
              "large"
            ]
          },
          "preserve_drive_format": {
            "type": "boolean",
            "default": false
          },
          "nocreate": {
            "type": "boolean"
          },
          "spare": {
            "type": "boolean"
          },
          "asset": {
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "fsync": {
            "type": "string",
            "default": "",
            "enum": [
              "",
              "0",
              "1"
            ]
          },
          "discard": {
            "type": "boolean",
            "default": true
          },
          "advanced": {
            "type": "string"
          }
        }
      },
      "machine_console_active_chat_post": {
        "required": [
          "console"
        ],
        "type": "object",
        "properties": {
          "console": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity": {
            "type": "string",
            "description": "alias type: row"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_console_active_chat_put": {
        "type": "object",
        "properties": {
          "console": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "identity": {
            "type": "string",
            "description": "alias type: row"
          }
        }
      },
      "machine_device_gpu_stats_history_long_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_device_gpu_stats_history_long_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_device_gpu_stats_history_short_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_device_gpu_stats_history_short_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_gpu_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_gpu_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "vendor_device_hex": {
            "type": "string"
          }
        }
      },
      "machine_device_settings_nvidia_vgpu_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "profile_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "any"
          },
          "attach_drivers": {
            "type": "boolean",
            "default": false
          },
          "frame_rate_limiter": {
            "maximum": 10000,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 60
          },
          "disable_vnc": {
            "type": "boolean",
            "default": false
          },
          "enable_uvm": {
            "type": "boolean",
            "default": false
          },
          "enable_debugging": {
            "type": "boolean",
            "default": false
          },
          "enable_profiling": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_nvidia_vgpu_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "profile_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "any"
          },
          "attach_drivers": {
            "type": "boolean",
            "default": false
          },
          "frame_rate_limiter": {
            "maximum": 10000,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 60
          },
          "disable_vnc": {
            "type": "boolean",
            "default": false
          },
          "enable_uvm": {
            "type": "boolean",
            "default": false
          },
          "enable_debugging": {
            "type": "boolean",
            "default": false
          },
          "enable_profiling": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "machine_device_settings_sriov_nic_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "macaddress": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "vlan": {
            "maximum": 4094,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "qos": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "proto": {
            "type": "string",
            "description": "alias type: text",
            "default": "802.1Q",
            "enum": [
              "802.1Q",
              "802.1ad"
            ]
          },
          "max_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "min_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "trust": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "spoofchk": {
            "type": "string",
            "description": "alias type: text",
            "default": "on",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "query_rss": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "auto",
              "enable",
              "disable"
            ]
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_sriov_nic_put": {
        "type": "object",
        "properties": {
          "nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "macaddress": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "vlan": {
            "maximum": 4094,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "qos": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "proto": {
            "type": "string",
            "description": "alias type: text",
            "default": "802.1Q",
            "enum": [
              "802.1Q",
              "802.1ad"
            ]
          },
          "max_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "min_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "trust": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "spoofchk": {
            "type": "string",
            "description": "alias type: text",
            "default": "on",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "query_rss": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "auto",
              "enable",
              "disable"
            ]
          }
        }
      },
      "machine_device_settings_tpm_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "model": {
            "type": "string",
            "description": "alias type: text",
            "default": "crb",
            "enum": [
              "tis",
              "crb"
            ]
          },
          "version": {
            "type": "string",
            "description": "alias type: text",
            "default": "2",
            "enum": [
              "2",
              "1"
            ]
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_tpm_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "model": {
            "type": "string",
            "description": "alias type: text",
            "default": "crb",
            "enum": [
              "tis",
              "crb"
            ]
          }
        }
      },
      "machine_device_settings_usb_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "guest_reset": {
            "type": "boolean",
            "default": true
          },
          "guest_resets_all": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_settings_usb_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "guest_reset": {
            "type": "boolean",
            "default": true
          },
          "guest_resets_all": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "machine_device_stats_post": {
        "required": [
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_device_stats_put": {
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: parent_machine_device",
            "format": "int64"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_device_status_post": {
        "required": [
          "parent_device"
        ],
        "type": "object",
        "properties": {
          "parent_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "errors",
              "warning",
              "hotplug",
              "initializing",
              "idle"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_device_status_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "errors",
              "warning",
              "hotplug",
              "initializing",
              "idle"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "machine_devices_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "machine_type": {
            "type": "string",
            "description": "alias type: machine_types",
            "default": "vm",
            "enum": [
              "vm",
              "container",
              "vmware_container",
              "metal",
              "vdi",
              "node",
              "tenant",
              "vnet"
            ]
          },
          "orderid": {
            "maximum": 64,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "node_pci_devices",
            "enum": [
              "gpu",
              "nvidia_vgpu",
              "tpm",
              "node_usb_devices",
              "node_sriov_nic_devices",
              "node_pci_devices",
              "node_nvidia_vgpu_devices"
            ]
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "asset": {
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "settings_args": {
            "type": "object",
            "properties": {}
          },
          "count": {
            "maximum": 16,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_devices_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "orderid": {
            "maximum": 64,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "asset": {
            "maxLength": 40,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "settings_args": {
            "type": "object",
            "properties": {}
          },
          "count": {
            "maximum": 16,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        }
      },
      "machine_drive_phys_post": {
        "required": [
          "parent_drive"
        ],
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "path": {
            "type": "string",
            "description": "alias type: text"
          },
          "all_paths": {
            "type": "string",
            "description": "alias type: text"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "fw": {
            "type": "string",
            "description": "alias type: text"
          },
          "serial": {
            "type": "string",
            "description": "alias type: text"
          },
          "temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "encrypted": {
            "type": "boolean",
            "default": false
          },
          "temp_warn": {
            "type": "boolean"
          },
          "enclosure_slot": {
            "pattern": "^[0-9]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "locate_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "unsupported",
            "enum": [
              "unsupported",
              "on",
              "off"
            ]
          },
          "location": {
            "type": "string",
            "description": "alias type: text"
          },
          "vsan_driveid": {
            "maximum": 127,
            "minimum": -127,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "vsan_tier": {
            "maximum": 127,
            "minimum": -127,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "realloc_sectors": {
            "type": "integer",
            "format": "int32"
          },
          "realloc_sectors_warn": {
            "type": "boolean"
          },
          "wear_level": {
            "type": "integer",
            "format": "int32"
          },
          "wear_level_warn": {
            "type": "boolean"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "hours_warn": {
            "type": "boolean"
          },
          "vsan_used": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_max": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_read_errors": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_write_errors": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_avg_latency": {
            "type": "integer",
            "format": "int32"
          },
          "vsan_max_latency": {
            "type": "integer",
            "format": "int32"
          },
          "vsan_repairing": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_repair_estimate": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_last_error": {
            "type": "string"
          },
          "vsan_throttle": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "spare": {
            "type": "boolean",
            "default": false
          },
          "swap": {
            "type": "boolean",
            "default": false
          },
          "swap_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "boot": {
            "type": "boolean",
            "default": false
          },
          "boot_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "ybpart": {
            "type": "boolean",
            "default": false
          },
          "ybpart_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "bus": {
            "type": "string",
            "description": "alias type: text"
          },
          "encryption_key": {
            "type": "boolean",
            "default": false
          },
          "current_pending_sector": {
            "type": "number",
            "format": "double"
          },
          "current_pending_sector_warn": {
            "type": "boolean"
          },
          "offline_uncorrectable": {
            "type": "number",
            "format": "double"
          },
          "offline_uncorrectable_warn": {
            "type": "boolean"
          },
          "vsan_online_since": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "machine_drive_phys_put": {
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "path": {
            "type": "string",
            "description": "alias type: text"
          },
          "all_paths": {
            "type": "string",
            "description": "alias type: text"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "fw": {
            "type": "string",
            "description": "alias type: text"
          },
          "serial": {
            "type": "string",
            "description": "alias type: text"
          },
          "temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "encrypted": {
            "type": "boolean",
            "default": false
          },
          "temp_warn": {
            "type": "boolean"
          },
          "enclosure_slot": {
            "pattern": "^[0-9]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "locate_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "unsupported",
            "enum": [
              "unsupported",
              "on",
              "off"
            ]
          },
          "location": {
            "type": "string",
            "description": "alias type: text"
          },
          "vsan_driveid": {
            "maximum": 127,
            "minimum": -127,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "vsan_tier": {
            "maximum": 127,
            "minimum": -127,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "realloc_sectors": {
            "type": "integer",
            "format": "int32"
          },
          "realloc_sectors_warn": {
            "type": "boolean"
          },
          "wear_level": {
            "type": "integer",
            "format": "int32"
          },
          "wear_level_warn": {
            "type": "boolean"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "hours_warn": {
            "type": "boolean"
          },
          "vsan_used": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_max": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_read_errors": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_write_errors": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_avg_latency": {
            "type": "integer",
            "format": "int32"
          },
          "vsan_max_latency": {
            "type": "integer",
            "format": "int32"
          },
          "vsan_repairing": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_repair_estimate": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_last_error": {
            "type": "string"
          },
          "vsan_throttle": {
            "type": "integer",
            "format": "int64"
          },
          "vsan_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "spare": {
            "type": "boolean",
            "default": false
          },
          "swap": {
            "type": "boolean",
            "default": false
          },
          "swap_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "boot": {
            "type": "boolean",
            "default": false
          },
          "boot_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "ybpart": {
            "type": "boolean",
            "default": false
          },
          "ybpart_size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "bus": {
            "type": "string",
            "description": "alias type: text"
          },
          "encryption_key": {
            "type": "boolean",
            "default": false
          },
          "current_pending_sector": {
            "type": "number",
            "format": "double"
          },
          "current_pending_sector_warn": {
            "type": "boolean"
          },
          "offline_uncorrectable": {
            "type": "number",
            "format": "double"
          },
          "offline_uncorrectable_warn": {
            "type": "boolean"
          },
          "vsan_online_since": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "machine_drive_stats_post": {
        "required": [
          "parent_drive"
        ],
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "physical": {
            "type": "boolean",
            "default": false
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          },
          "up_since": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "machine_drive_stats_put": {
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "physical": {
            "type": "boolean",
            "default": false
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          },
          "up_since": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "machine_drive_stats_history_long_post": {
        "required": [
          "parent_drive"
        ],
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes_peak": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes_avg": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "service_time_peak": {
            "type": "number",
            "format": "double"
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util_peak": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_drive_stats_history_long_put": {
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes_peak": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes_avg": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "service_time_peak": {
            "type": "number",
            "format": "double"
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util_peak": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_drive_stats_history_short_post": {
        "required": [
          "parent_drive"
        ],
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          }
        }
      },
      "machine_drive_stats_history_short_put": {
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "max_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "service_time": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "util": {
            "type": "number",
            "format": "double",
            "default": 0
          }
        }
      },
      "machine_drive_status_post": {
        "required": [
          "parent_drive"
        ],
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "repairing",
              "initializing",
              "importing",
              "errors",
              "warning",
              "replacing",
              "missing",
              "hotplug"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_drive_status_put": {
        "type": "object",
        "properties": {
          "parent_drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "repairing",
              "initializing",
              "importing",
              "errors",
              "warning",
              "replacing",
              "missing",
              "hotplug"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machines_post": {
        "required": [
          "parent"
        ],
        "type": "object",
        "properties": {
          "is_snapshot": {
            "type": "boolean"
          },
          "parent": {
            "type": "string",
            "description": "alias type: row"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: machine_types",
            "default": "vm",
            "enum": [
              "vm",
              "container",
              "vmware_container",
              "metal",
              "vdi",
              "node",
              "tenant",
              "vnet"
            ]
          },
          "is_workload_type": {
            "type": "boolean",
            "default": false
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          }
        }
      },
      "machines_put": {
        "type": "object",
        "properties": {
          "is_snapshot": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "is_workload_type": {
            "type": "boolean",
            "default": false
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "cluster": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "cluster_failover": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          }
        }
      },
      "machine_logs_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "machine_logs_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "machine_nic_stats_post": {
        "required": [
          "parent_nic"
        ],
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps": {
            "type": "integer",
            "format": "int64"
          },
          "txbps": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts_cur": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts_cur": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes_cur": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes_cur": {
            "type": "integer",
            "format": "int64"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_nic_stats_put": {
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps": {
            "type": "integer",
            "format": "int64"
          },
          "txbps": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts_cur": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts_cur": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes_cur": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes_cur": {
            "type": "integer",
            "format": "int64"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_nic_stats_history_long_post": {
        "required": [
          "parent_nic"
        ],
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "txbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "txpps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "txbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_nic_stats_history_long_put": {
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "txbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "txpps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "txbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_nic_stats_history_short_post": {
        "required": [
          "parent_nic"
        ],
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps": {
            "type": "integer",
            "format": "int64"
          },
          "txbps": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_nic_stats_history_short_put": {
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "txpps": {
            "type": "integer",
            "format": "int64"
          },
          "rxpps": {
            "type": "integer",
            "format": "int64"
          },
          "txbps": {
            "type": "integer",
            "format": "int64"
          },
          "rxbps": {
            "type": "integer",
            "format": "int64"
          },
          "totalxbps": {
            "type": "integer",
            "format": "int64"
          },
          "tx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "rx_pckts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_nic_status_post": {
        "required": [
          "parent_nic"
        ],
        "type": "object",
        "properties": {
          "parent_nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "down",
            "enum": [
              "up",
              "down",
              "unknown",
              "lowerlayerdown"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "speed": {
            "type": "integer",
            "format": "int32"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_nic_status_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "down",
            "enum": [
              "up",
              "down",
              "unknown",
              "lowerlayerdown"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "speed": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_nics_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "orderid": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "virtio",
            "enum": [
              "virtio",
              "e1000",
              "e1000e",
              "rtl8139",
              "pcnet",
              "igb",
              "vmxnet3",
              "direct"
            ]
          },
          "driver": {
            "type": "string",
            "description": "alias type: text"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "vendor": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "macaddress": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "asset": {
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "ipaddress": {
            "type": "string"
          },
          "device": {
            "type": "string"
          }
        }
      },
      "machine_nics_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "orderid": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "virtio",
            "enum": [
              "virtio",
              "e1000",
              "e1000e",
              "rtl8139",
              "pcnet",
              "igb",
              "vmxnet3",
              "direct"
            ]
          },
          "driver": {
            "type": "string",
            "description": "alias type: text"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "vendor": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "macaddress": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "asset": {
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string"
          },
          "ipaddress": {
            "type": "string"
          }
        }
      },
      "machine_snapshots_post": {
        "required": [
          "machine",
          "name"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "created_manually": {
            "type": "boolean",
            "default": false
          },
          "quiesce": {
            "type": "boolean"
          },
          "quiesced": {
            "type": "boolean",
            "default": false
          },
          "queue_delete": {
            "type": "boolean",
            "default": false
          },
          "snapshot_period": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "machine_snapshots_put": {
        "type": "object",
        "properties": {
          "snap_machine": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "created_manually": {
            "type": "boolean",
            "default": false
          },
          "quiesce": {
            "type": "boolean"
          },
          "quiesced": {
            "type": "boolean",
            "default": false
          },
          "queue_delete": {
            "type": "boolean",
            "default": false
          },
          "snapshot_period": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "machine_stats_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "ram_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_usagelist": {
            "type": "object",
            "properties": {}
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "machine_stats_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "ram_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_usagelist": {
            "type": "object",
            "properties": {}
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_stats_history_long_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_average": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_stats_history_long_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_average": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75_avg": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75_peak": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_stats_history_short_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_usagelist": {
            "type": "object",
            "properties": {}
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_stats_history_short_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "user_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "system_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "iowait_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vmusage_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "irq_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "core_usagelist": {
            "type": "object",
            "properties": {}
          },
          "core_temp": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_temp_top": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_peak": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_25": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_50": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count_gt_75": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "machine_status_post": {
        "required": [
          "machine"
        ],
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "running": {
            "type": "boolean"
          },
          "migratable": {
            "type": "boolean",
            "default": true
          },
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "migrated_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "migration_destination": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "started": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "local_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "stopped",
            "enum": [
              "initializing",
              "starting",
              "running",
              "stopping",
              "unresponsive",
              "stopped",
              "hibernated",
              "hibernating",
              "initmigrate",
              "startmigrate",
              "migrating",
              "migratecomplete",
              "importing",
              "maintenance",
              "leavingmaintenance",
              "unlicensed",
              "needsrefresh",
              "needsrestart",
              "waitingforresources",
              "error",
              "driversreloading"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "running_cores": {
            "type": "integer",
            "format": "int32"
          },
          "running_ram": {
            "type": "integer",
            "format": "int32"
          },
          "agent_version": {
            "type": "string"
          },
          "agent_features": {
            "type": "object",
            "properties": {}
          },
          "agent_guest_info": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "machine_status_put": {
        "type": "object",
        "properties": {
          "machine": {
            "type": "integer",
            "description": "alias type: parent_machine",
            "format": "int64"
          },
          "running": {
            "type": "boolean"
          },
          "migratable": {
            "type": "boolean",
            "default": true
          },
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "migrated_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "migration_destination": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "started": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "local_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "stopped",
            "enum": [
              "initializing",
              "starting",
              "running",
              "stopping",
              "unresponsive",
              "stopped",
              "hibernated",
              "hibernating",
              "initmigrate",
              "startmigrate",
              "migrating",
              "migratecomplete",
              "importing",
              "maintenance",
              "leavingmaintenance",
              "unlicensed",
              "needsrefresh",
              "needsrestart",
              "waitingforresources",
              "error",
              "driversreloading"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "running_cores": {
            "type": "integer",
            "format": "int32"
          },
          "running_ram": {
            "type": "integer",
            "format": "int32"
          },
          "agent_version": {
            "type": "string"
          },
          "agent_features": {
            "type": "object",
            "properties": {}
          },
          "agent_guest_info": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "sites_post": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[a-zA-Z0-9_-]{40}$",
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "city": {
            "type": "string",
            "description": "alias type: text"
          },
          "country": {
            "type": "string",
            "description": "alias type: country",
            "default": "US",
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KR",
              "KP",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "BL",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ]
          },
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double"
          },
          "timezone": {
            "type": "string",
            "description": "alias type: timezone",
            "default": "Etc/UTC",
            "enum": [
              "Europe/Andorra",
              "Asia/Dubai",
              "Asia/Kabul",
              "America/Antigua",
              "America/Anguilla",
              "Europe/Tirane",
              "Asia/Yerevan",
              "Africa/Luanda",
              "Antarctica/McMurdo",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Mawson",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Cordoba",
              "America/Argentina/Salta",
              "America/Argentina/Jujuy",
              "America/Argentina/Tucuman",
              "America/Argentina/Catamarca",
              "America/Argentina/La_Rioja",
              "America/Argentina/San_Juan",
              "America/Argentina/Mendoza",
              "America/Argentina/San_Luis",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Ushuaia",
              "Pacific/Pago_Pago",
              "Europe/Vienna",
              "Australia/Lord_Howe",
              "Antarctica/Macquarie",
              "Australia/Hobart",
              "Australia/Melbourne",
              "Australia/Sydney",
              "Australia/Broken_Hill",
              "Australia/Brisbane",
              "Australia/Lindeman",
              "Australia/Adelaide",
              "Australia/Darwin",
              "Australia/Perth",
              "Australia/Eucla",
              "America/Aruba",
              "Europe/Mariehamn",
              "Asia/Baku",
              "Europe/Sarajevo",
              "America/Barbados",
              "Asia/Dhaka",
              "Europe/Brussels",
              "Africa/Ouagadougou",
              "Europe/Sofia",
              "Asia/Bahrain",
              "Africa/Bujumbura",
              "Africa/Porto-Novo",
              "America/St_Barthelemy",
              "Atlantic/Bermuda",
              "Asia/Brunei",
              "America/La_Paz",
              "America/Kralendijk",
              "America/Noronha",
              "America/Belem",
              "America/Fortaleza",
              "America/Recife",
              "America/Araguaina",
              "America/Maceio",
              "America/Bahia",
              "America/Sao_Paulo",
              "America/Campo_Grande",
              "America/Cuiaba",
              "America/Santarem",
              "America/Porto_Velho",
              "America/Boa_Vista",
              "America/Manaus",
              "America/Eirunepe",
              "America/Rio_Branco",
              "America/Nassau",
              "Asia/Thimphu",
              "Africa/Gaborone",
              "Europe/Minsk",
              "America/Belize",
              "America/St_Johns",
              "America/Halifax",
              "America/Glace_Bay",
              "America/Moncton",
              "America/Goose_Bay",
              "America/Blanc-Sablon",
              "America/Toronto",
              "America/Nipigon",
              "America/Thunder_Bay",
              "America/Iqaluit",
              "America/Pangnirtung",
              "America/Atikokan",
              "America/Winnipeg",
              "America/Rainy_River",
              "America/Resolute",
              "America/Rankin_Inlet",
              "America/Regina",
              "America/Swift_Current",
              "America/Edmonton",
              "America/Cambridge_Bay",
              "America/Yellowknife",
              "America/Inuvik",
              "America/Creston",
              "America/Dawson_Creek",
              "America/Fort_Nelson",
              "America/Whitehorse",
              "America/Dawson",
              "America/Vancouver",
              "Indian/Cocos",
              "Africa/Kinshasa",
              "Africa/Lubumbashi",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Europe/Zurich",
              "Africa/Abidjan",
              "Pacific/Rarotonga",
              "America/Santiago",
              "America/Punta_Arenas",
              "Pacific/Easter",
              "Africa/Douala",
              "Asia/Shanghai",
              "Asia/Urumqi",
              "America/Bogota",
              "America/Costa_Rica",
              "America/Havana",
              "Atlantic/Cape_Verde",
              "America/Curacao",
              "Indian/Christmas",
              "Asia/Nicosia",
              "Asia/Famagusta",
              "Europe/Prague",
              "Europe/Berlin",
              "Europe/Busingen",
              "Africa/Djibouti",
              "Europe/Copenhagen",
              "America/Dominica",
              "America/Santo_Domingo",
              "Africa/Algiers",
              "America/Guayaquil",
              "Pacific/Galapagos",
              "Europe/Tallinn",
              "Africa/Cairo",
              "Africa/El_Aaiun",
              "Africa/Asmara",
              "Europe/Madrid",
              "Africa/Ceuta",
              "Atlantic/Canary",
              "Africa/Addis_Ababa",
              "Europe/Helsinki",
              "Pacific/Fiji",
              "Atlantic/Stanley",
              "Pacific/Chuuk",
              "Pacific/Pohnpei",
              "Pacific/Kosrae",
              "Atlantic/Faroe",
              "Europe/Paris",
              "Africa/Libreville",
              "Europe/London",
              "America/Grenada",
              "Asia/Tbilisi",
              "America/Cayenne",
              "Europe/Guernsey",
              "Africa/Accra",
              "Europe/Gibraltar",
              "America/Nuuk",
              "America/Danmarkshavn",
              "America/Scoresbysund",
              "America/Thule",
              "Africa/Banjul",
              "Africa/Conakry",
              "America/Guadeloupe",
              "Africa/Malabo",
              "Europe/Athens",
              "Atlantic/South_Georgia",
              "America/Guatemala",
              "Pacific/Guam",
              "Africa/Bissau",
              "America/Guyana",
              "Asia/Hong_Kong",
              "America/Tegucigalpa",
              "Europe/Zagreb",
              "America/Port-au-Prince",
              "Europe/Budapest",
              "Asia/Jakarta",
              "Asia/Pontianak",
              "Asia/Makassar",
              "Asia/Jayapura",
              "Europe/Dublin",
              "Asia/Jerusalem",
              "Europe/Isle_of_Man",
              "Asia/Kolkata",
              "Indian/Chagos",
              "Asia/Baghdad",
              "Asia/Tehran",
              "Atlantic/Reykjavik",
              "Europe/Rome",
              "Europe/Jersey",
              "America/Jamaica",
              "Asia/Amman",
              "Asia/Tokyo",
              "Africa/Nairobi",
              "Asia/Bishkek",
              "Asia/Phnom_Penh",
              "Pacific/Tarawa",
              "Pacific/Enderbury",
              "Pacific/Kiritimati",
              "Indian/Comoro",
              "America/St_Kitts",
              "Asia/Pyongyang",
              "Asia/Seoul",
              "Asia/Kuwait",
              "America/Cayman",
              "Asia/Almaty",
              "Asia/Qyzylorda",
              "Asia/Qostanay",
              "Asia/Aqtobe",
              "Asia/Aqtau",
              "Asia/Atyrau",
              "Asia/Oral",
              "Asia/Vientiane",
              "Asia/Beirut",
              "America/St_Lucia",
              "Europe/Vaduz",
              "Asia/Colombo",
              "Africa/Monrovia",
              "Africa/Maseru",
              "Europe/Vilnius",
              "Europe/Luxembourg",
              "Europe/Riga",
              "Africa/Tripoli",
              "Africa/Casablanca",
              "Europe/Monaco",
              "Europe/Chisinau",
              "Europe/Podgorica",
              "America/Marigot",
              "Indian/Antananarivo",
              "Pacific/Majuro",
              "Pacific/Kwajalein",
              "Europe/Skopje",
              "Africa/Bamako",
              "Asia/Yangon",
              "Asia/Ulaanbaatar",
              "Asia/Hovd",
              "Asia/Choibalsan",
              "Asia/Macau",
              "Pacific/Saipan",
              "America/Martinique",
              "Africa/Nouakchott",
              "America/Montserrat",
              "Europe/Malta",
              "Indian/Mauritius",
              "Indian/Maldives",
              "Africa/Blantyre",
              "America/Mexico_City",
              "America/Cancun",
              "America/Merida",
              "America/Monterrey",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Chihuahua",
              "America/Ojinaga",
              "America/Hermosillo",
              "America/Tijuana",
              "America/Bahia_Banderas",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Africa/Maputo",
              "Africa/Windhoek",
              "Pacific/Noumea",
              "Africa/Niamey",
              "Pacific/Norfolk",
              "Africa/Lagos",
              "America/Managua",
              "Europe/Amsterdam",
              "Europe/Oslo",
              "Asia/Kathmandu",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Auckland",
              "Pacific/Chatham",
              "Asia/Muscat",
              "America/Panama",
              "America/Lima",
              "Pacific/Tahiti",
              "Pacific/Marquesas",
              "Pacific/Gambier",
              "Pacific/Port_Moresby",
              "Pacific/Bougainville",
              "Asia/Manila",
              "Asia/Karachi",
              "Europe/Warsaw",
              "America/Miquelon",
              "Pacific/Pitcairn",
              "America/Puerto_Rico",
              "Asia/Gaza",
              "Asia/Hebron",
              "Europe/Lisbon",
              "Atlantic/Madeira",
              "Atlantic/Azores",
              "Pacific/Palau",
              "America/Asuncion",
              "Asia/Qatar",
              "Indian/Reunion",
              "Europe/Bucharest",
              "Europe/Belgrade",
              "Europe/Kaliningrad",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Kirov",
              "Europe/Volgograd",
              "Europe/Astrakhan",
              "Europe/Saratov",
              "Europe/Ulyanovsk",
              "Europe/Samara",
              "Asia/Yekaterinburg",
              "Asia/Omsk",
              "Asia/Novosibirsk",
              "Asia/Barnaul",
              "Asia/Tomsk",
              "Asia/Novokuznetsk",
              "Asia/Krasnoyarsk",
              "Asia/Irkutsk",
              "Asia/Chita",
              "Asia/Yakutsk",
              "Asia/Khandyga",
              "Asia/Vladivostok",
              "Asia/Ust-Nera",
              "Asia/Magadan",
              "Asia/Sakhalin",
              "Asia/Srednekolymsk",
              "Asia/Kamchatka",
              "Asia/Anadyr",
              "Africa/Kigali",
              "Asia/Riyadh",
              "Pacific/Guadalcanal",
              "Indian/Mahe",
              "Africa/Khartoum",
              "Europe/Stockholm",
              "Asia/Singapore",
              "Atlantic/St_Helena",
              "Europe/Ljubljana",
              "Arctic/Longyearbyen",
              "Europe/Bratislava",
              "Africa/Freetown",
              "Europe/San_Marino",
              "Africa/Dakar",
              "Africa/Mogadishu",
              "America/Paramaribo",
              "Africa/Juba",
              "Africa/Sao_Tome",
              "America/El_Salvador",
              "America/Lower_Princes",
              "Asia/Damascus",
              "Africa/Mbabane",
              "America/Grand_Turk",
              "Africa/Ndjamena",
              "Indian/Kerguelen",
              "Africa/Lome",
              "Asia/Bangkok",
              "Asia/Dushanbe",
              "Pacific/Fakaofo",
              "Asia/Dili",
              "Asia/Ashgabat",
              "Africa/Tunis",
              "Pacific/Tongatapu",
              "Europe/Istanbul",
              "America/Port_of_Spain",
              "Pacific/Funafuti",
              "Asia/Taipei",
              "Africa/Dar_es_Salaam",
              "Europe/Kiev",
              "Europe/Uzhgorod",
              "Europe/Zaporozhye",
              "Africa/Kampala",
              "Pacific/Midway",
              "Pacific/Wake",
              "America/New_York",
              "America/Detroit",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Indiana/Indianapolis",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Vevay",
              "America/Chicago",
              "America/Indiana/Tell_City",
              "America/Indiana/Knox",
              "America/Menominee",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/North_Dakota/Beulah",
              "America/Denver",
              "America/Boise",
              "America/Phoenix",
              "America/Los_Angeles",
              "America/Anchorage",
              "America/Juneau",
              "America/Sitka",
              "America/Metlakatla",
              "America/Yakutat",
              "America/Nome",
              "America/Adak",
              "Pacific/Honolulu",
              "America/Montevideo",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Europe/Vatican",
              "America/St_Vincent",
              "America/Caracas",
              "America/Tortola",
              "America/St_Thomas",
              "Asia/Ho_Chi_Minh",
              "Pacific/Efate",
              "Pacific/Wallis",
              "Pacific/Apia",
              "Asia/Aden",
              "Indian/Mayotte",
              "Africa/Johannesburg",
              "Africa/Lusaka",
              "Africa/Harare",
              "Etc/UTC"
            ]
          },
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "description": "alias type: password"
          },
          "statistics_interval": {
            "minimum": 300,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 600
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "authenticating",
              "syncing",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string"
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "auth_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "auth_password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "description": "alias type: password"
          },
          "remote_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote_password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "description": "alias type: password"
          },
          "remote_token": {
            "type": "string"
          },
          "request_url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "authentication_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "unauthenticated",
            "enum": [
              "unauthenticated",
              "authenticated",
              "legacy"
            ]
          },
          "is_tenant": {
            "type": "boolean",
            "default": false
          },
          "incoming_syncs_enabled": {
            "type": "boolean"
          },
          "outgoing_syncs_enabled": {
            "type": "boolean"
          },
          "repairs_outgoing_enabled": {
            "type": "boolean"
          },
          "incoming_stats_enabled": {
            "type": "boolean"
          },
          "outgoing_stats_enabled": {
            "type": "boolean"
          },
          "outgoing_management_enabled": {
            "type": "boolean"
          },
          "incoming_management_enabled": {
            "type": "boolean"
          },
          "config_cloud_snapshots": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "config_statistics": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "config_management": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "manage",
              "managed",
              "both"
            ]
          },
          "config_repair_server": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "logo_url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "header_bg": {
            "type": "string"
          },
          "map_color": {
            "type": "string"
          },
          "statistics_retention": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 3888000
          },
          "force_refresh": {
            "type": "boolean",
            "default": false
          },
          "automatically_create_syncs": {
            "type": "boolean",
            "default": true
          },
          "last_stat_update": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_log_timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "sites_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[a-zA-Z0-9_-]{40}$",
            "type": "string"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "city": {
            "type": "string",
            "description": "alias type: text"
          },
          "country": {
            "type": "string",
            "description": "alias type: country",
            "default": "US",
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KR",
              "KP",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "BL",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ]
          },
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double"
          },
          "timezone": {
            "type": "string",
            "description": "alias type: timezone",
            "default": "Etc/UTC",
            "enum": [
              "Europe/Andorra",
              "Asia/Dubai",
              "Asia/Kabul",
              "America/Antigua",
              "America/Anguilla",
              "Europe/Tirane",
              "Asia/Yerevan",
              "Africa/Luanda",
              "Antarctica/McMurdo",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Mawson",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Cordoba",
              "America/Argentina/Salta",
              "America/Argentina/Jujuy",
              "America/Argentina/Tucuman",
              "America/Argentina/Catamarca",
              "America/Argentina/La_Rioja",
              "America/Argentina/San_Juan",
              "America/Argentina/Mendoza",
              "America/Argentina/San_Luis",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Ushuaia",
              "Pacific/Pago_Pago",
              "Europe/Vienna",
              "Australia/Lord_Howe",
              "Antarctica/Macquarie",
              "Australia/Hobart",
              "Australia/Melbourne",
              "Australia/Sydney",
              "Australia/Broken_Hill",
              "Australia/Brisbane",
              "Australia/Lindeman",
              "Australia/Adelaide",
              "Australia/Darwin",
              "Australia/Perth",
              "Australia/Eucla",
              "America/Aruba",
              "Europe/Mariehamn",
              "Asia/Baku",
              "Europe/Sarajevo",
              "America/Barbados",
              "Asia/Dhaka",
              "Europe/Brussels",
              "Africa/Ouagadougou",
              "Europe/Sofia",
              "Asia/Bahrain",
              "Africa/Bujumbura",
              "Africa/Porto-Novo",
              "America/St_Barthelemy",
              "Atlantic/Bermuda",
              "Asia/Brunei",
              "America/La_Paz",
              "America/Kralendijk",
              "America/Noronha",
              "America/Belem",
              "America/Fortaleza",
              "America/Recife",
              "America/Araguaina",
              "America/Maceio",
              "America/Bahia",
              "America/Sao_Paulo",
              "America/Campo_Grande",
              "America/Cuiaba",
              "America/Santarem",
              "America/Porto_Velho",
              "America/Boa_Vista",
              "America/Manaus",
              "America/Eirunepe",
              "America/Rio_Branco",
              "America/Nassau",
              "Asia/Thimphu",
              "Africa/Gaborone",
              "Europe/Minsk",
              "America/Belize",
              "America/St_Johns",
              "America/Halifax",
              "America/Glace_Bay",
              "America/Moncton",
              "America/Goose_Bay",
              "America/Blanc-Sablon",
              "America/Toronto",
              "America/Nipigon",
              "America/Thunder_Bay",
              "America/Iqaluit",
              "America/Pangnirtung",
              "America/Atikokan",
              "America/Winnipeg",
              "America/Rainy_River",
              "America/Resolute",
              "America/Rankin_Inlet",
              "America/Regina",
              "America/Swift_Current",
              "America/Edmonton",
              "America/Cambridge_Bay",
              "America/Yellowknife",
              "America/Inuvik",
              "America/Creston",
              "America/Dawson_Creek",
              "America/Fort_Nelson",
              "America/Whitehorse",
              "America/Dawson",
              "America/Vancouver",
              "Indian/Cocos",
              "Africa/Kinshasa",
              "Africa/Lubumbashi",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Europe/Zurich",
              "Africa/Abidjan",
              "Pacific/Rarotonga",
              "America/Santiago",
              "America/Punta_Arenas",
              "Pacific/Easter",
              "Africa/Douala",
              "Asia/Shanghai",
              "Asia/Urumqi",
              "America/Bogota",
              "America/Costa_Rica",
              "America/Havana",
              "Atlantic/Cape_Verde",
              "America/Curacao",
              "Indian/Christmas",
              "Asia/Nicosia",
              "Asia/Famagusta",
              "Europe/Prague",
              "Europe/Berlin",
              "Europe/Busingen",
              "Africa/Djibouti",
              "Europe/Copenhagen",
              "America/Dominica",
              "America/Santo_Domingo",
              "Africa/Algiers",
              "America/Guayaquil",
              "Pacific/Galapagos",
              "Europe/Tallinn",
              "Africa/Cairo",
              "Africa/El_Aaiun",
              "Africa/Asmara",
              "Europe/Madrid",
              "Africa/Ceuta",
              "Atlantic/Canary",
              "Africa/Addis_Ababa",
              "Europe/Helsinki",
              "Pacific/Fiji",
              "Atlantic/Stanley",
              "Pacific/Chuuk",
              "Pacific/Pohnpei",
              "Pacific/Kosrae",
              "Atlantic/Faroe",
              "Europe/Paris",
              "Africa/Libreville",
              "Europe/London",
              "America/Grenada",
              "Asia/Tbilisi",
              "America/Cayenne",
              "Europe/Guernsey",
              "Africa/Accra",
              "Europe/Gibraltar",
              "America/Nuuk",
              "America/Danmarkshavn",
              "America/Scoresbysund",
              "America/Thule",
              "Africa/Banjul",
              "Africa/Conakry",
              "America/Guadeloupe",
              "Africa/Malabo",
              "Europe/Athens",
              "Atlantic/South_Georgia",
              "America/Guatemala",
              "Pacific/Guam",
              "Africa/Bissau",
              "America/Guyana",
              "Asia/Hong_Kong",
              "America/Tegucigalpa",
              "Europe/Zagreb",
              "America/Port-au-Prince",
              "Europe/Budapest",
              "Asia/Jakarta",
              "Asia/Pontianak",
              "Asia/Makassar",
              "Asia/Jayapura",
              "Europe/Dublin",
              "Asia/Jerusalem",
              "Europe/Isle_of_Man",
              "Asia/Kolkata",
              "Indian/Chagos",
              "Asia/Baghdad",
              "Asia/Tehran",
              "Atlantic/Reykjavik",
              "Europe/Rome",
              "Europe/Jersey",
              "America/Jamaica",
              "Asia/Amman",
              "Asia/Tokyo",
              "Africa/Nairobi",
              "Asia/Bishkek",
              "Asia/Phnom_Penh",
              "Pacific/Tarawa",
              "Pacific/Enderbury",
              "Pacific/Kiritimati",
              "Indian/Comoro",
              "America/St_Kitts",
              "Asia/Pyongyang",
              "Asia/Seoul",
              "Asia/Kuwait",
              "America/Cayman",
              "Asia/Almaty",
              "Asia/Qyzylorda",
              "Asia/Qostanay",
              "Asia/Aqtobe",
              "Asia/Aqtau",
              "Asia/Atyrau",
              "Asia/Oral",
              "Asia/Vientiane",
              "Asia/Beirut",
              "America/St_Lucia",
              "Europe/Vaduz",
              "Asia/Colombo",
              "Africa/Monrovia",
              "Africa/Maseru",
              "Europe/Vilnius",
              "Europe/Luxembourg",
              "Europe/Riga",
              "Africa/Tripoli",
              "Africa/Casablanca",
              "Europe/Monaco",
              "Europe/Chisinau",
              "Europe/Podgorica",
              "America/Marigot",
              "Indian/Antananarivo",
              "Pacific/Majuro",
              "Pacific/Kwajalein",
              "Europe/Skopje",
              "Africa/Bamako",
              "Asia/Yangon",
              "Asia/Ulaanbaatar",
              "Asia/Hovd",
              "Asia/Choibalsan",
              "Asia/Macau",
              "Pacific/Saipan",
              "America/Martinique",
              "Africa/Nouakchott",
              "America/Montserrat",
              "Europe/Malta",
              "Indian/Mauritius",
              "Indian/Maldives",
              "Africa/Blantyre",
              "America/Mexico_City",
              "America/Cancun",
              "America/Merida",
              "America/Monterrey",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Chihuahua",
              "America/Ojinaga",
              "America/Hermosillo",
              "America/Tijuana",
              "America/Bahia_Banderas",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Africa/Maputo",
              "Africa/Windhoek",
              "Pacific/Noumea",
              "Africa/Niamey",
              "Pacific/Norfolk",
              "Africa/Lagos",
              "America/Managua",
              "Europe/Amsterdam",
              "Europe/Oslo",
              "Asia/Kathmandu",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Auckland",
              "Pacific/Chatham",
              "Asia/Muscat",
              "America/Panama",
              "America/Lima",
              "Pacific/Tahiti",
              "Pacific/Marquesas",
              "Pacific/Gambier",
              "Pacific/Port_Moresby",
              "Pacific/Bougainville",
              "Asia/Manila",
              "Asia/Karachi",
              "Europe/Warsaw",
              "America/Miquelon",
              "Pacific/Pitcairn",
              "America/Puerto_Rico",
              "Asia/Gaza",
              "Asia/Hebron",
              "Europe/Lisbon",
              "Atlantic/Madeira",
              "Atlantic/Azores",
              "Pacific/Palau",
              "America/Asuncion",
              "Asia/Qatar",
              "Indian/Reunion",
              "Europe/Bucharest",
              "Europe/Belgrade",
              "Europe/Kaliningrad",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Kirov",
              "Europe/Volgograd",
              "Europe/Astrakhan",
              "Europe/Saratov",
              "Europe/Ulyanovsk",
              "Europe/Samara",
              "Asia/Yekaterinburg",
              "Asia/Omsk",
              "Asia/Novosibirsk",
              "Asia/Barnaul",
              "Asia/Tomsk",
              "Asia/Novokuznetsk",
              "Asia/Krasnoyarsk",
              "Asia/Irkutsk",
              "Asia/Chita",
              "Asia/Yakutsk",
              "Asia/Khandyga",
              "Asia/Vladivostok",
              "Asia/Ust-Nera",
              "Asia/Magadan",
              "Asia/Sakhalin",
              "Asia/Srednekolymsk",
              "Asia/Kamchatka",
              "Asia/Anadyr",
              "Africa/Kigali",
              "Asia/Riyadh",
              "Pacific/Guadalcanal",
              "Indian/Mahe",
              "Africa/Khartoum",
              "Europe/Stockholm",
              "Asia/Singapore",
              "Atlantic/St_Helena",
              "Europe/Ljubljana",
              "Arctic/Longyearbyen",
              "Europe/Bratislava",
              "Africa/Freetown",
              "Europe/San_Marino",
              "Africa/Dakar",
              "Africa/Mogadishu",
              "America/Paramaribo",
              "Africa/Juba",
              "Africa/Sao_Tome",
              "America/El_Salvador",
              "America/Lower_Princes",
              "Asia/Damascus",
              "Africa/Mbabane",
              "America/Grand_Turk",
              "Africa/Ndjamena",
              "Indian/Kerguelen",
              "Africa/Lome",
              "Asia/Bangkok",
              "Asia/Dushanbe",
              "Pacific/Fakaofo",
              "Asia/Dili",
              "Asia/Ashgabat",
              "Africa/Tunis",
              "Pacific/Tongatapu",
              "Europe/Istanbul",
              "America/Port_of_Spain",
              "Pacific/Funafuti",
              "Asia/Taipei",
              "Africa/Dar_es_Salaam",
              "Europe/Kiev",
              "Europe/Uzhgorod",
              "Europe/Zaporozhye",
              "Africa/Kampala",
              "Pacific/Midway",
              "Pacific/Wake",
              "America/New_York",
              "America/Detroit",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Indiana/Indianapolis",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Vevay",
              "America/Chicago",
              "America/Indiana/Tell_City",
              "America/Indiana/Knox",
              "America/Menominee",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/North_Dakota/Beulah",
              "America/Denver",
              "America/Boise",
              "America/Phoenix",
              "America/Los_Angeles",
              "America/Anchorage",
              "America/Juneau",
              "America/Sitka",
              "America/Metlakatla",
              "America/Yakutat",
              "America/Nome",
              "America/Adak",
              "Pacific/Honolulu",
              "America/Montevideo",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Europe/Vatican",
              "America/St_Vincent",
              "America/Caracas",
              "America/Tortola",
              "America/St_Thomas",
              "Asia/Ho_Chi_Minh",
              "Pacific/Efate",
              "Pacific/Wallis",
              "Pacific/Apia",
              "Asia/Aden",
              "Indian/Mayotte",
              "Africa/Johannesburg",
              "Africa/Lusaka",
              "Africa/Harare",
              "Etc/UTC"
            ]
          },
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "statistics_interval": {
            "minimum": 300,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 600
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "authenticating",
              "syncing",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string"
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "auth_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "auth_password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "description": "alias type: password"
          },
          "remote_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote_password": {
            "maxLength": 256,
            "minLength": 8,
            "type": "string",
            "description": "alias type: password"
          },
          "remote_token": {
            "type": "string"
          },
          "request_url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "authentication_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "unauthenticated",
            "enum": [
              "unauthenticated",
              "authenticated",
              "legacy"
            ]
          },
          "config_cloud_snapshots": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "config_statistics": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "config_management": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "manage",
              "managed",
              "both"
            ]
          },
          "config_repair_server": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "send",
              "receive",
              "both"
            ]
          },
          "logo_url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "header_bg": {
            "type": "string"
          },
          "map_color": {
            "type": "string"
          },
          "statistics_retention": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 3888000
          },
          "force_refresh": {
            "type": "boolean",
            "default": false
          },
          "automatically_create_syncs": {
            "type": "boolean",
            "default": true
          },
          "last_stat_update": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_log_timestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "members_post": {
        "type": "object",
        "properties": {
          "parent_group": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "member": {
            "type": "string",
            "description": "alias type: row"
          },
          "system": {
            "type": "boolean",
            "default": false
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "members_put": {
        "type": "object",
        "properties": {
          "system": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "messages_post": {
        "required": [
          "recipients",
          "text"
        ],
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "recipients": {
            "type": "string",
            "description": "alias type: text"
          },
          "recipients_display": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "messages_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "meta_data_post": {
        "required": [
          "key",
          "owner"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "key": {
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "default_value": {
            "type": "string",
            "description": "alias type: text"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "meta_data_put": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "node_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "refresh",
              "kill",
              "maintenance",
              "leavemaintenance",
              "execute",
              "refresh_status",
              "receive_file",
              "interfaces",
              "ipmi_test",
              "clear_sel"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "node_actions_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "refresh",
              "kill",
              "maintenance",
              "leavemaintenance",
              "execute",
              "refresh_status",
              "receive_file",
              "interfaces",
              "ipmi_test",
              "clear_sel"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "node_allocated_gpus_post": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "gpu",
            "enum": [
              "gpu",
              "nvidia_vgpu"
            ]
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_allocated_gpus_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "node_device_instances_post": {
        "required": [
          "machine_device",
          "node_resource"
        ],
        "type": "object",
        "properties": {
          "machine_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_device_instances_put": {
        "type": "object",
        "properties": {
          "node_resource": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "node_drivers_post": {
        "required": [
          "driver_file"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "driver_file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "driver_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "driver_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "status": {
            "type": "string",
            "default": "verifying",
            "enum": [
              "verifying",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "class_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "vendor_filter": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "node_drivers_put": {
        "type": "object",
        "properties": {
          "driver_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "driver_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "status": {
            "type": "string",
            "default": "verifying",
            "enum": [
              "verifying",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "class_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "vendor_filter": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "node_gpu_instances_post": {
        "required": [
          "gpu",
          "machine_device"
        ],
        "type": "object",
        "properties": {
          "gpu": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "machine_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_gpu_instances_put": {
        "type": "object",
        "properties": {
          "gpu": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "node_gpu_stats_post": {
        "required": [
          "node_gpu"
        ],
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "node_gpu_stats_put": {
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "node_gpu_stats_history_long_post": {
        "required": [
          "node_gpu"
        ],
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "node_gpu_stats_history_long_put": {
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "node_gpu_stats_history_short_post": {
        "required": [
          "node_gpu"
        ],
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "node_gpu_stats_history_short_put": {
        "type": "object",
        "properties": {
          "node_gpu": {
            "type": "integer",
            "description": "alias type: parent_node_gpu",
            "format": "int64"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "node_gpus_post": {
        "required": [
          "pci_device"
        ],
        "type": "object",
        "properties": {
          "pci_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "gpu",
              "nvidia_vgpu"
            ]
          },
          "nvidia_vgpu_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "max_instances": {
            "type": "number",
            "format": "double"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_gpus_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "gpu",
              "nvidia_vgpu"
            ]
          },
          "nvidia_vgpu_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "max_instances": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "node_lldp_neighbors_post": {
        "required": [
          "nic"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "rid": {
            "type": "string"
          },
          "via": {
            "type": "string"
          },
          "age": {
            "type": "string"
          },
          "chassis": {
            "type": "object",
            "properties": {}
          },
          "port": {
            "type": "object",
            "properties": {}
          },
          "vlan": {
            "type": "object",
            "properties": {}
          },
          "other": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "node_lldp_neighbors_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "nic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "rid": {
            "type": "string"
          },
          "via": {
            "type": "string"
          },
          "age": {
            "type": "string"
          },
          "chassis": {
            "type": "object",
            "properties": {}
          },
          "port": {
            "type": "object",
            "properties": {}
          },
          "vlan": {
            "type": "object",
            "properties": {}
          },
          "other": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "node_memory_post": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "handle": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "online",
            "enum": [
              "online",
              "error",
              "warning",
              "offline"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "label": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "array_handle": {
            "type": "string"
          },
          "error_handle": {
            "type": "string"
          },
          "error_information_handle": {
            "type": "string"
          },
          "total_width": {
            "type": "string"
          },
          "data_width": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "form_factor": {
            "type": "string"
          },
          "set": {
            "type": "string"
          },
          "locator": {
            "type": "string"
          },
          "bank_locator": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "type_detail": {
            "type": "string"
          },
          "speed": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "asset_tag": {
            "type": "string"
          },
          "part_number": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "configured_memory_speed": {
            "type": "string"
          },
          "memory_technology": {
            "type": "string"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_memory_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "handle": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "online",
            "enum": [
              "online",
              "error",
              "warning",
              "offline"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "label": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "array_handle": {
            "type": "string"
          },
          "error_handle": {
            "type": "string"
          },
          "error_information_handle": {
            "type": "string"
          },
          "total_width": {
            "type": "string"
          },
          "data_width": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "form_factor": {
            "type": "string"
          },
          "set": {
            "type": "string"
          },
          "locator": {
            "type": "string"
          },
          "bank_locator": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "type_detail": {
            "type": "string"
          },
          "speed": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "asset_tag": {
            "type": "string"
          },
          "part_number": {
            "type": "string"
          },
          "rank": {
            "type": "string"
          },
          "configured_memory_speed": {
            "type": "string"
          },
          "memory_technology": {
            "type": "string"
          }
        }
      },
      "node_nvidia_vgpu_devices_post": {
        "required": [
          "pci_device",
          "slot"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "pci_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "virtfn": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "physical_function": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "type_id": {
            "type": "number",
            "format": "double"
          },
          "max_instances": {
            "type": "number",
            "format": "double",
            "default": 1
          },
          "fingerprint": {
            "type": "string"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_nvidia_vgpu_devices_put": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "virtfn": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "physical_function": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "type_id": {
            "type": "number",
            "format": "double"
          },
          "max_instances": {
            "type": "number",
            "format": "double",
            "default": 1
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int64"
          }
        }
      },
      "node_nvidia_vgpu_profiles_post": {
        "required": [
          "name",
          "physical_gpu",
          "profile_folder"
        ],
        "type": "object",
        "properties": {
          "physical_gpu": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "num_heads": {
            "type": "number",
            "format": "double"
          },
          "frl_config": {
            "type": "number",
            "format": "double"
          },
          "framebuffer": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_resolution": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_instance": {
            "type": "number",
            "format": "double"
          },
          "available_instances": {
            "type": "number",
            "format": "double"
          },
          "device_api": {
            "type": "string",
            "description": "alias type: text"
          },
          "location": {
            "type": "string",
            "description": "alias type: text"
          },
          "profile_type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "A",
              "B",
              "C",
              "Q"
            ]
          },
          "virtual_function": {
            "type": "boolean"
          },
          "profile_folder": {
            "type": "string"
          }
        }
      },
      "node_nvidia_vgpu_profiles_put": {
        "type": "object",
        "properties": {
          "physical_gpu": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "node_pci_devices_post": {
        "required": [
          "slot"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "name": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "class_hex": {
            "type": "string"
          },
          "device_type": {
            "type": "string",
            "enum": [
              "00",
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "0a",
              "0b",
              "0c",
              "0d",
              "0e",
              "0f",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "40",
              "64",
              "ff"
            ]
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "prog_if": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "sriov_totalvfs": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "sriov_numvfs": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "logical_device": {
            "type": "string"
          },
          "driver_override": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_pci_devices_put": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "class": {
            "type": "string"
          },
          "class_hex": {
            "type": "string"
          },
          "device_type": {
            "type": "string",
            "enum": [
              "00",
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "0a",
              "0b",
              "0c",
              "0d",
              "0e",
              "0f",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "40",
              "64",
              "ff"
            ]
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "prog_if": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "sriov_totalvfs": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "sriov_numvfs": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "logical_device": {
            "type": "string"
          },
          "driver_override": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int64"
          }
        }
      },
      "node_queries_post": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "bridge",
              "whatsmyip",
              "ipmi-sel",
              "ipmi-sensor",
              "ipmi-fru",
              "ipmi-lan",
              "ipmi-chassis",
              "ipmi-bmc",
              "ipmi-sdr",
              "ipmi-reset",
              "dmidecode",
              "lsblk",
              "arp",
              "arp-scan",
              "smartctl",
              "smartctl-test",
              "ledctl",
              "openssl-speed",
              "tcp_connect",
              "eth-tool",
              "fabric",
              "clear-pstore",
              "ras-mc-ctl",
              "bonding"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "node_queries_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "bridge",
              "whatsmyip",
              "ipmi-sel",
              "ipmi-sensor",
              "ipmi-fru",
              "ipmi-lan",
              "ipmi-chassis",
              "ipmi-bmc",
              "ipmi-sdr",
              "ipmi-reset",
              "dmidecode",
              "lsblk",
              "arp",
              "arp-scan",
              "smartctl",
              "smartctl-test",
              "ledctl",
              "openssl-speed",
              "tcp_connect",
              "eth-tool",
              "fabric",
              "clear-pstore",
              "ras-mc-ctl",
              "bonding"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "node_resources_post": {
        "required": [
          "device"
        ],
        "type": "object",
        "properties": {
          "device": {
            "type": "string",
            "description": "alias type: row"
          },
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "max_instances": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "resource_rule": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "node_pci_devices",
              "node_sriov_nic_devices",
              "node_usb_devices",
              "node_nvidia_vgpu_devices"
            ]
          },
          "class": {
            "type": "string",
            "description": "alias type: text",
            "default": "pci",
            "enum": [
              "pci",
              "gpu",
              "vgpu",
              "storage",
              "hid",
              "usb",
              "network",
              "media",
              "audio",
              "fpga"
            ]
          },
          "host_uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_resources_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "max_instances": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "class": {
            "type": "string",
            "description": "alias type: text",
            "default": "pci",
            "enum": [
              "pci",
              "gpu",
              "vgpu",
              "storage",
              "hid",
              "usb",
              "network",
              "media",
              "audio",
              "fpga"
            ]
          }
        }
      },
      "node_sriov_nic_devices_post": {
        "required": [
          "pci_device",
          "slot"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "pci_device": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "physical_function": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_sriov_nic_devices_put": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "vendor_device_hex": {
            "type": "string"
          },
          "svendor": {
            "type": "string"
          },
          "subsystem_device": {
            "type": "string"
          },
          "physical_slot": {
            "type": "string"
          },
          "physical_function": {
            "type": "string"
          },
          "revision_number": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "numa": {
            "type": "string"
          },
          "iommu_group": {
            "type": "string"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int64"
          }
        }
      },
      "node_stats_post": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_stats_put": {
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_idle": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "node_usb_devices_post": {
        "required": [
          "bus",
          "device",
          "devpath",
          "path"
        ],
        "type": "object",
        "properties": {
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "bus": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "device": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "devpath": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "vendor_id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "major": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "minor": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "usb_version": {
            "type": "string"
          },
          "speed": {
            "type": "string"
          },
          "interface_drivers": {
            "type": "string"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "node_usb_devices_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "bus": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "device": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "devpath": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "vendor_id": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          },
          "serial": {
            "type": "string"
          },
          "major": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "minor": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "usb_version": {
            "type": "string"
          },
          "speed": {
            "type": "string"
          },
          "interface_drivers": {
            "type": "string"
          },
          "node_resource": {
            "type": "integer",
            "description": "alias type: node_resource",
            "format": "int64"
          }
        }
      },
      "nodes_post": {
        "required": [
          "cluster",
          "name"
        ],
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "name": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "sysnode": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "cpu": {
            "type": "string",
            "description": "alias type: text"
          },
          "physical": {
            "type": "boolean"
          },
          "ram": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "overcommit": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "vm_ram": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "failover_ram": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "cores": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "maintenance": {
            "type": "boolean",
            "default": false
          },
          "verify_maintenance": {
            "type": "string"
          },
          "maintenance_reset": {
            "type": "boolean"
          },
          "feature_vnet_migration": {
            "type": "boolean",
            "default": false
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "os_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "kernel_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "appserver_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "vsan_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "qemu_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "asset_tag": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_address": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "ipmi_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "ready",
              "connecting",
              "error"
            ]
          },
          "ipmi_status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_status_last_connected": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "capture_logs": {
            "type": "boolean"
          },
          "lldp": {
            "type": "boolean"
          },
          "apply_hotfix": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pxe_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "vsan_nodeid": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "vsan_connected": {
            "type": "boolean",
            "default": false
          },
          "max_core_temp": {
            "maximum": 120,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "max_core_temp_warn_perc": {
            "maximum": 100,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "critical_core_temp": {
            "maximum": 120,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "iommu": {
            "type": "boolean"
          },
          "need_restart": {
            "type": "boolean"
          },
          "restart_reason": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_sel_free": {
            "type": "integer",
            "format": "int32"
          },
          "ipmi_sel_used": {
            "type": "integer",
            "format": "int32"
          },
          "ipmi_sel_last_id": {
            "type": "string"
          },
          "ras_mc_last_timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "ignore_pstore": {
            "type": "boolean",
            "default": false
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "reload_drivers_required": {
            "type": "boolean"
          }
        }
      },
      "nodes_put": {
        "type": "object",
        "properties": {
          "cluster": {
            "type": "integer",
            "description": "alias type: parent_cluster",
            "format": "int64"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "model": {
            "type": "string",
            "description": "alias type: text"
          },
          "cpu": {
            "type": "string",
            "description": "alias type: text"
          },
          "physical": {
            "type": "boolean"
          },
          "overcommit": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "vm_ram": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "failover_ram": {
            "maximum": 5242880,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32"
          },
          "maintenance": {
            "type": "boolean",
            "default": false
          },
          "verify_maintenance": {
            "type": "string"
          },
          "maintenance_reset": {
            "type": "boolean"
          },
          "feature_vnet_migration": {
            "type": "boolean",
            "default": false
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "os_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "kernel_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "appserver_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "vsan_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "qemu_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "asset_tag": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_address": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "ipmi_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "ready",
              "connecting",
              "error"
            ]
          },
          "ipmi_status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipmi_status_last_connected": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "capture_logs": {
            "type": "boolean"
          },
          "lldp": {
            "type": "boolean"
          },
          "apply_hotfix": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pxe_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "vsan_nodeid": {
            "maximum": 65535,
            "minimum": -32767,
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "vsan_connected": {
            "type": "boolean",
            "default": false
          },
          "max_core_temp": {
            "maximum": 120,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "max_core_temp_warn_perc": {
            "maximum": 100,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "critical_core_temp": {
            "maximum": 120,
            "minimum": -1,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "ipmi_sel_free": {
            "type": "integer",
            "format": "int32"
          },
          "ipmi_sel_used": {
            "type": "integer",
            "format": "int32"
          },
          "ipmi_sel_last_id": {
            "type": "string"
          },
          "ras_mc_last_timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "ignore_pstore": {
            "type": "boolean",
            "default": false
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "note_actions_post": {
        "required": [
          "action",
          "owner"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "update"
            ]
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "note_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "update"
            ]
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "nvidia_vgpu_profiles_post": {
        "required": [
          "device_hex",
          "name",
          "profile_folder",
          "type_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "type_id": {
            "type": "number",
            "format": "double"
          },
          "device_hex": {
            "maxLength": 9,
            "minLength": 9,
            "pattern": "^[0-9a-fA-F]{4}:[0-9a-fA-F]{4}$",
            "type": "string"
          },
          "num_heads": {
            "type": "number",
            "format": "double"
          },
          "frl_config": {
            "type": "number",
            "format": "double"
          },
          "framebuffer": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_resolution": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_instance": {
            "type": "number",
            "format": "double"
          },
          "max_instances_per_vm": {
            "type": "number",
            "format": "double"
          },
          "placement_ids": {
            "type": "string",
            "description": "alias type: text"
          },
          "location": {
            "type": "string",
            "description": "alias type: text"
          },
          "profile_type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "A",
              "B",
              "C",
              "Q"
            ]
          },
          "grid_license": {
            "type": "string",
            "description": "alias type: text"
          },
          "virtual_function": {
            "type": "boolean"
          },
          "profile_folder": {
            "type": "string"
          }
        }
      },
      "oidc_application_groups_post": {
        "required": [
          "group",
          "oidc_application"
        ],
        "type": "object",
        "properties": {
          "oidc_application": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "group": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "oidc_application_logs_post": {
        "required": [
          "oidc_application"
        ],
        "type": "object",
        "properties": {
          "oidc_application": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "oidc_application_logs_put": {
        "type": "object",
        "properties": {
          "oidc_application": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "oidc_application_users_post": {
        "required": [
          "oidc_application",
          "user"
        ],
        "type": "object",
        "properties": {
          "oidc_application": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "oidc_applications_post": {
        "required": [
          "force_auth_source",
          "map_user",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "redirect_uri": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "force_auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "restrict_access": {
            "type": "boolean",
            "default": false
          },
          "map_user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64",
            "nullable": true
          },
          "scope_profile": {
            "type": "boolean",
            "default": true
          },
          "scope_email": {
            "type": "boolean",
            "default": true
          },
          "scope_groups": {
            "type": "boolean",
            "default": true
          },
          "well_known_configuration": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "oidc_applications_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "redirect_uri": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "client_id": {
            "maxLength": 256,
            "type": "string",
            "description": "alias type: text"
          },
          "client_secret": {
            "maxLength": 256,
            "type": "string",
            "description": "alias type: text"
          },
          "force_auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "restrict_access": {
            "type": "boolean",
            "default": false
          },
          "map_user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64",
            "nullable": true
          },
          "scope_profile": {
            "type": "boolean",
            "default": true
          },
          "scope_email": {
            "type": "boolean",
            "default": true
          },
          "scope_groups": {
            "type": "boolean",
            "default": true
          },
          "well_known_configuration": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "recipe_questions_post": {
        "required": [
          "name",
          "recipe",
          "section",
          "type"
        ],
        "type": "object",
        "properties": {
          "clone_from": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "recipe": {
            "type": "string",
            "description": "alias type: row"
          },
          "section": {
            "type": "string",
            "description": "alias type: row"
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "display": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "hint": {
            "type": "string",
            "description": "alias type: text"
          },
          "help": {
            "type": "string",
            "description": "alias type: text"
          },
          "note": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "bool",
              "cluster",
              "database_create",
              "database_edit",
              "field",
              "database_find",
              "timestamp",
              "disksize",
              "hidden",
              "list",
              "network",
              "num",
              "password",
              "ram",
              "row",
              "seconds",
              "string",
              "textarea",
              "virtualip"
            ]
          },
          "database_context": {
            "type": "string",
            "description": "alias type: text",
            "default": "tenant",
            "enum": [
              "local",
              "tenant"
            ]
          },
          "default": {
            "type": "string"
          },
          "table": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "regex": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "required": {
            "type": "boolean"
          },
          "min": {
            "type": "integer",
            "format": "int64"
          },
          "max": {
            "type": "integer",
            "format": "int64"
          },
          "normalize": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "postprocess_string": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "lowercase",
              "uppercase",
              "crypt-des",
              "crypt-md5",
              "crypt-sha256",
              "crypt-sha512",
              "trim",
              "base64",
              "hex",
              "escape"
            ]
          },
          "list": {
            "type": "object",
            "properties": {}
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "hide_none": {
            "type": "boolean",
            "default": false
          },
          "readonly": {
            "type": "boolean",
            "default": false
          },
          "dont_store": {
            "type": "boolean",
            "default": false
          },
          "system": {
            "type": "boolean",
            "default": false
          },
          "system_default": {
            "type": "boolean"
          },
          "conditions": {
            "type": "object",
            "properties": {}
          },
          "on_change": {
            "type": "object",
            "properties": {}
          },
          "autocomplete": {
            "type": "string",
            "description": "alias type: text"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "recipe_questions_put": {
        "type": "object",
        "properties": {
          "clone_from": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "section": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "display": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "hint": {
            "type": "string",
            "description": "alias type: text"
          },
          "help": {
            "type": "string",
            "description": "alias type: text"
          },
          "note": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "bool",
              "cluster",
              "database_create",
              "database_edit",
              "field",
              "database_find",
              "timestamp",
              "disksize",
              "hidden",
              "list",
              "network",
              "num",
              "password",
              "ram",
              "row",
              "seconds",
              "string",
              "textarea",
              "virtualip"
            ]
          },
          "database_context": {
            "type": "string",
            "description": "alias type: text",
            "default": "tenant",
            "enum": [
              "local",
              "tenant"
            ]
          },
          "default": {
            "type": "string"
          },
          "table": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "fields": {
            "type": "string"
          },
          "regex": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "required": {
            "type": "boolean"
          },
          "min": {
            "type": "integer",
            "format": "int64"
          },
          "max": {
            "type": "integer",
            "format": "int64"
          },
          "normalize": {
            "minimum": 0,
            "type": "integer",
            "format": "int64"
          },
          "postprocess_string": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "lowercase",
              "uppercase",
              "crypt-des",
              "crypt-md5",
              "crypt-sha256",
              "crypt-sha512",
              "trim",
              "base64",
              "hex",
              "escape"
            ]
          },
          "list": {
            "type": "object",
            "properties": {}
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "hide_none": {
            "type": "boolean",
            "default": false
          },
          "readonly": {
            "type": "boolean",
            "default": false
          },
          "dont_store": {
            "type": "boolean",
            "default": false
          },
          "system": {
            "type": "boolean",
            "default": false
          },
          "system_default": {
            "type": "boolean"
          },
          "conditions": {
            "type": "object",
            "properties": {}
          },
          "on_change": {
            "type": "object",
            "properties": {}
          },
          "autocomplete": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "recipe_sections_post": {
        "required": [
          "name",
          "recipe"
        ],
        "type": "object",
        "properties": {
          "clone_from": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "recipe": {
            "type": "string",
            "description": "alias type: row"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "recipe_sections_put": {
        "type": "object",
        "properties": {
          "clone_from": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "recipe_status_post": {
        "required": [
          "recipe"
        ],
        "type": "object",
        "properties": {
          "recipe": {
            "type": "string",
            "description": "alias type: row"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "downloading",
              "installing",
              "warning",
              "error"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "recipe_status_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "downloading",
              "installing",
              "warning",
              "error"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "repair_servers_post": {
        "required": [
          "name",
          "site"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "credential_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "use_outgoing_sync",
            "enum": [
              "use_outgoing_sync",
              "manual"
            ]
          },
          "host": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "encryption": {
            "type": "boolean",
            "default": true
          },
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "update_credentials": {
            "type": "boolean"
          }
        }
      },
      "repair_servers_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "host": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "encryption": {
            "type": "boolean",
            "default": true
          },
          "update_credentials": {
            "type": "boolean"
          }
        }
      },
      "resource_group_settings_nvidia_vgpu_post": {
        "type": "object",
        "properties": {
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "make_guest_driver_iso": {
            "type": "boolean"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "resource_group_settings_nvidia_vgpu_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "driver_file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "nvidia_vgpu_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "make_guest_driver_iso": {
            "type": "boolean"
          },
          "driver_iso": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "resource_group_settings_sriov_nic_post": {
        "type": "object",
        "properties": {
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "numvfs": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "macaddress_allow_override": {
            "type": "boolean"
          },
          "vlan_allow_override": {
            "type": "boolean",
            "default": false
          },
          "vlan": {
            "maximum": 4094,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "qos_allow_override": {
            "type": "boolean",
            "default": false
          },
          "qos": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "proto_allow_override": {
            "type": "boolean",
            "default": false
          },
          "proto": {
            "type": "string",
            "description": "alias type: text",
            "default": "802.1Q",
            "enum": [
              "802.1Q",
              "802.1ad"
            ]
          },
          "max_tx_rate_allow_override": {
            "type": "boolean",
            "default": false
          },
          "max_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "min_tx_rate_allow_override": {
            "type": "boolean",
            "default": false
          },
          "min_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "trust_allow_override": {
            "type": "boolean",
            "default": false
          },
          "trust": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "spoofchk_allow_override": {
            "type": "boolean",
            "default": false
          },
          "spoofchk": {
            "type": "string",
            "description": "alias type: text",
            "default": "on",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "query_rss_allow_override": {
            "type": "boolean",
            "default": false
          },
          "query_rss": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "state_allow_override": {
            "type": "boolean",
            "default": false
          },
          "state": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "auto",
              "enable",
              "disable"
            ]
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "resource_group_settings_sriov_nic_put": {
        "type": "object",
        "properties": {
          "numvfs": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "macaddress_allow_override": {
            "type": "boolean"
          },
          "vlan_allow_override": {
            "type": "boolean",
            "default": false
          },
          "vlan": {
            "maximum": 4094,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "qos_allow_override": {
            "type": "boolean",
            "default": false
          },
          "qos": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "proto_allow_override": {
            "type": "boolean",
            "default": false
          },
          "proto": {
            "type": "string",
            "description": "alias type: text",
            "default": "802.1Q",
            "enum": [
              "802.1Q",
              "802.1ad"
            ]
          },
          "max_tx_rate_allow_override": {
            "type": "boolean",
            "default": false
          },
          "max_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "min_tx_rate_allow_override": {
            "type": "boolean",
            "default": false
          },
          "min_tx_rate": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "trust_allow_override": {
            "type": "boolean",
            "default": false
          },
          "trust": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "spoofchk_allow_override": {
            "type": "boolean",
            "default": false
          },
          "spoofchk": {
            "type": "string",
            "description": "alias type: text",
            "default": "on",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "query_rss_allow_override": {
            "type": "boolean",
            "default": false
          },
          "query_rss": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "on",
              "off"
            ]
          },
          "state_allow_override": {
            "type": "boolean",
            "default": false
          },
          "state": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "auto",
              "enable",
              "disable"
            ]
          }
        }
      },
      "resource_group_settings_usb_post": {
        "type": "object",
        "properties": {
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "guest_reset": {
            "type": "boolean",
            "default": true
          },
          "guest_resets_all": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "resource_group_settings_usb_put": {
        "type": "object",
        "properties": {
          "guest_reset": {
            "type": "boolean",
            "default": true
          },
          "guest_resets_all": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "resource_groups_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "node_pci_devices",
            "enum": [
              "node_pci_devices",
              "node_sriov_nic_devices",
              "node_usb_devices",
              "node_nvidia_vgpu_devices"
            ]
          },
          "class": {
            "type": "string",
            "description": "alias type: text",
            "default": "unknown",
            "enum": [
              "unknown",
              "gpu",
              "vgpu",
              "storage",
              "hid",
              "usb",
              "network",
              "media",
              "audio",
              "fpga",
              "pci"
            ]
          },
          "settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "settings_args": {
            "type": "object",
            "properties": {}
          },
          "key_args": {
            "type": "object",
            "properties": {}
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "resource_groups_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "class": {
            "type": "string",
            "description": "alias type: text",
            "default": "unknown",
            "enum": [
              "unknown",
              "gpu",
              "vgpu",
              "storage",
              "hid",
              "usb",
              "network",
              "media",
              "audio",
              "fpga",
              "pci"
            ]
          },
          "settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "settings_args": {
            "type": "object",
            "properties": {}
          },
          "key_args": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "resource_rules_post": {
        "type": "object",
        "properties": {
          "resource_group": {
            "type": "object",
            "description": "row reference to table 'resource_groups'",
            "x-yb-table-reference": "resource_groups"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: name"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "node_pci_devices",
            "enum": [
              "node_pci_devices",
              "node_sriov_nic_devices",
              "node_usb_devices",
              "node_nvidia_vgpu_devices"
            ]
          },
          "filter": {
            "minLength": 1,
            "type": "string"
          },
          "filter_configuration": {
            "type": "object",
            "properties": {}
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "auto_create_based_on": {
            "type": "string",
            "description": "alias type: row"
          },
          "system_created": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "resource_rules_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: name"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "filter": {
            "minLength": 1,
            "type": "string"
          },
          "filter_configuration": {
            "type": "object",
            "properties": {}
          },
          "auto_create_based_on": {
            "type": "string",
            "description": "alias type: row"
          }
        }
      },
      "root_certificates_post": {
        "required": [
          "cert"
        ],
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "startdate": {
            "type": "string"
          },
          "enddate": {
            "type": "string"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "root_certificates_put": {
        "type": "object",
        "properties": {
          "cert": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "startdate": {
            "type": "string"
          },
          "enddate": {
            "type": "string"
          }
        }
      },
      "schedule_task_events_post": {
        "required": [
          "display",
          "event",
          "table"
        ],
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "alias type: text"
          },
          "display": {
            "type": "string",
            "description": "alias type: text"
          },
          "event": {
            "type": "string",
            "description": "alias type: text"
          },
          "filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "sort": {
            "type": "string",
            "description": "alias type: text",
            "default": "+$display"
          },
          "prependKey": {
            "type": "string",
            "description": "alias type: text"
          },
          "appendKey": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "schedule_task_events_put": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "alias type: text"
          },
          "display": {
            "type": "string",
            "description": "alias type: text"
          },
          "event": {
            "type": "string",
            "description": "alias type: text"
          },
          "filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "sort": {
            "type": "string",
            "description": "alias type: text",
            "default": "+$display"
          },
          "prependKey": {
            "type": "string",
            "description": "alias type: text"
          },
          "appendKey": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "schedule_task_setting_schema_post": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_\\.]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "field": {
            "type": "object",
            "properties": {}
          },
          "owner_table": {
            "type": "string",
            "description": "alias type: text",
            "default": "schedules/"
          },
          "owner_table_name": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "owner_table_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_owner": {
            "type": "boolean",
            "default": false
          },
          "event": {
            "type": "boolean",
            "default": false
          },
          "task_type": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          }
        }
      },
      "schedule_task_setting_schema_put": {
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_\\.]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "field": {
            "type": "object",
            "properties": {}
          },
          "owner_table": {
            "type": "string",
            "description": "alias type: text",
            "default": "schedules/"
          },
          "owner_table_name": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "owner_table_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_owner": {
            "type": "boolean",
            "default": false
          },
          "event": {
            "type": "boolean",
            "default": false
          },
          "task_type": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          }
        }
      },
      "schedule_task_settings_post": {
        "required": [
          "key",
          "task"
        ],
        "type": "object",
        "properties": {
          "task": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "key": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "value": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "schedule_task_settings_put": {
        "type": "object",
        "properties": {
          "task": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "value": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "schedule_tasks_post": {
        "required": [
          "name",
          "owner"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "task_type": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "run_on": {
            "type": "string",
            "description": "alias type: text",
            "default": "schedule",
            "enum": [
              "schedule",
              "event"
            ]
          },
          "event_owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "event": {
            "type": "string",
            "description": "alias type: text"
          },
          "repeat_iteration": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "repeat_every": {
            "type": "string",
            "description": "alias type: text",
            "default": "hour",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "never"
            ]
          },
          "monday": {
            "type": "boolean",
            "default": true
          },
          "tuesday": {
            "type": "boolean",
            "default": true
          },
          "wednesday": {
            "type": "boolean",
            "default": true
          },
          "thursday": {
            "type": "boolean",
            "default": true
          },
          "friday": {
            "type": "boolean",
            "default": true
          },
          "saturday": {
            "type": "boolean",
            "default": true
          },
          "sunday": {
            "type": "boolean",
            "default": true
          },
          "day_of_month": {
            "type": "string",
            "description": "alias type: text",
            "default": "start_date",
            "enum": [
              "first",
              "last",
              "15th",
              "start_date"
            ]
          },
          "start_date_epoch": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "start_date": {
            "pattern": "^20[0-9][0-9]-((0[1-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))$",
            "type": "string",
            "description": "alias type: text"
          },
          "start_time_of_day": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "end_time_of_day": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 86400
          },
          "end_date": {
            "pattern": "^(20[0-9][0-9]-((0[1-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9]))?$",
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "delete_after_run": {
            "type": "boolean",
            "default": false
          },
          "system_created": {
            "type": "boolean",
            "default": false
          },
          "creator": {
            "type": "string",
            "description": "alias type: row"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[a-zA-Z0-9_-]{40}$",
            "type": "string"
          }
        }
      },
      "schedule_tasks_put": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "task_type": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "event_owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "event": {
            "type": "string",
            "description": "alias type: text"
          },
          "repeat_iteration": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "repeat_every": {
            "type": "string",
            "description": "alias type: text",
            "default": "hour",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "never"
            ]
          },
          "monday": {
            "type": "boolean",
            "default": true
          },
          "tuesday": {
            "type": "boolean",
            "default": true
          },
          "wednesday": {
            "type": "boolean",
            "default": true
          },
          "thursday": {
            "type": "boolean",
            "default": true
          },
          "friday": {
            "type": "boolean",
            "default": true
          },
          "saturday": {
            "type": "boolean",
            "default": true
          },
          "sunday": {
            "type": "boolean",
            "default": true
          },
          "day_of_month": {
            "type": "string",
            "description": "alias type: text",
            "default": "start_date",
            "enum": [
              "first",
              "last",
              "15th",
              "start_date"
            ]
          },
          "start_date_epoch": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "start_date": {
            "pattern": "^20[0-9][0-9]-((0[1-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))$",
            "type": "string",
            "description": "alias type: text"
          },
          "start_time_of_day": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "end_time_of_day": {
            "maximum": 86400,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 86400
          },
          "end_date": {
            "pattern": "^(20[0-9][0-9]-((0[1-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1])) (([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9]))?$",
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "last_run": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "delete_after_run": {
            "type": "boolean",
            "default": false
          },
          "system_created": {
            "type": "boolean",
            "default": false
          },
          "creator": {
            "type": "string",
            "description": "alias type: row"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[a-zA-Z0-9_-]{40}$",
            "type": "string"
          }
        }
      },
      "schedules_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "schedules_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "schema_version_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "check"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "schema_version_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "check"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "schema_versions_post": {
        "required": [
          "table",
          "version"
        ],
        "type": "object",
        "properties": {
          "table": {
            "type": "string"
          },
          "version": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "settings_post": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "alias type: text"
          },
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "default_value": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "settings_put": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "settings_actions_post": {
        "required": [
          "action",
          "setting"
        ],
        "type": "object",
        "properties": {
          "setting": {
            "type": "object",
            "description": "row reference to table 'settings'",
            "x-yb-table-reference": "settings"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "reset"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "settings_actions_put": {
        "type": "object",
        "properties": {
          "setting": {
            "type": "object",
            "description": "row reference to table 'settings'",
            "x-yb-table-reference": "settings"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "reset"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "shared_object_actions_post": {
        "type": "object",
        "properties": {
          "shared_object": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "refresh",
            "enum": [
              "refresh",
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "shared_object_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "refresh",
            "enum": [
              "refresh",
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "shared_objects_post": {
        "required": [
          "recipient",
          "type"
        ],
        "type": "object",
        "properties": {
          "recipient": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "snapshot": {
            "type": "string",
            "description": "alias type: row"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "vm",
            "enum": [
              "vm"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          },
          "inbox": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "shared_objects_put": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "vm",
            "enum": [
              "vm"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "inbox": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "site_actions_post": {
        "required": [
          "action",
          "site"
        ],
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "run_updates",
              "refresh",
              "refresh_settings",
              "delete_remote_task",
              "auto_create_sync",
              "move_sync",
              "reauthenticate",
              "clear_synced_logs"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_actions_put": {
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "run_updates",
              "refresh",
              "refresh_settings",
              "delete_remote_task",
              "auto_create_sync",
              "move_sync",
              "reauthenticate",
              "clear_synced_logs"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_logs_post": {
        "required": [
          "site"
        ],
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_logs_put": {
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_sync_stats_post": {
        "required": [
          "parent"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "alias type: row"
          },
          "checked_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "scanned_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_net_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "checked": {
            "type": "string"
          },
          "scanned": {
            "type": "string"
          },
          "sent": {
            "type": "string"
          },
          "sent_net": {
            "type": "string"
          },
          "dirs_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_updated": {
            "type": "integer",
            "format": "int64"
          },
          "last_run_time": {
            "type": "integer",
            "format": "int64"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "error_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_error": {
            "type": "string"
          },
          "sendthrottle": {
            "type": "integer",
            "format": "int64"
          },
          "retry_count": {
            "type": "number",
            "format": "double"
          },
          "snapshot_name": {
            "type": "string"
          },
          "last_retry_attempt": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          }
        }
      },
      "site_sync_stats_put": {
        "type": "object",
        "properties": {
          "checked_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "scanned_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_net_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "checked": {
            "type": "string"
          },
          "scanned": {
            "type": "string"
          },
          "sent": {
            "type": "string"
          },
          "sent_net": {
            "type": "string"
          },
          "dirs_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_updated": {
            "type": "integer",
            "format": "int64"
          },
          "last_run_time": {
            "type": "integer",
            "format": "int64"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "error_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_error": {
            "type": "string"
          },
          "sendthrottle": {
            "type": "integer",
            "format": "int64"
          },
          "retry_count": {
            "type": "number",
            "format": "double"
          },
          "snapshot_name": {
            "type": "string"
          },
          "last_retry_attempt": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "site_sync_stats_history_long_post": {
        "required": [
          "parent"
        ],
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "alias type: row"
          },
          "checked_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "scanned_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_net_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "dirs_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_updated": {
            "type": "integer",
            "format": "int64"
          },
          "last_run_time": {
            "type": "integer",
            "format": "int64"
          },
          "snapshot_name": {
            "type": "string"
          }
        }
      },
      "site_sync_stats_history_long_put": {
        "type": "object",
        "properties": {
          "checked_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "scanned_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "sent_net_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "dirs_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_checked": {
            "type": "integer",
            "format": "int64"
          },
          "files_updated": {
            "type": "integer",
            "format": "int64"
          },
          "last_run_time": {
            "type": "integer",
            "format": "int64"
          },
          "snapshot_name": {
            "type": "string"
          }
        }
      },
      "site_syncs_incoming_post": {
        "required": [
          "name",
          "site"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "generating_reg",
              "syncing",
              "offline",
              "error",
              "regeneration_needed"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "current_stats": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "public_ip": {
            "pattern": "^((([xX][nN]--)?[a-zA-Z0-9]+([_-][a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,})|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0))$",
            "type": "string",
            "description": "alias type: text"
          },
          "registration_code": {
            "type": "string",
            "default": "Generating, please wait"
          },
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "vsan_userid": {
            "type": "string"
          },
          "verified": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "force_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "unspecified",
            "enum": [
              "unspecified",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "last_sync": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "system_created": {
            "type": "boolean",
            "default": false
          },
          "sync_back": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "request_url": {
            "type": "string"
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        }
      },
      "site_syncs_incoming_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "generating_reg",
              "syncing",
              "offline",
              "error",
              "regeneration_needed"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "public_ip": {
            "pattern": "^((([xX][nN]--)?[a-zA-Z0-9]+([_-][a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,})|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0))$",
            "type": "string",
            "description": "alias type: text"
          },
          "verified": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "force_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "unspecified",
            "enum": [
              "unspecified",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "last_sync": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "request_url": {
            "type": "string"
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        }
      },
      "site_syncs_incoming_actions_post": {
        "required": [
          "action",
          "site_syncs_incoming"
        ],
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "regenerate",
              "enable",
              "disable"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_incoming_actions_put": {
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "regenerate",
              "enable",
              "disable"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_incoming_logs_post": {
        "required": [
          "site_syncs_incoming"
        ],
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_incoming",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_syncs_incoming_logs_put": {
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_incoming",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_syncs_incoming_verified_post": {
        "required": [
          "site_syncs_incoming"
        ],
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_incoming",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "registered": {
            "type": "boolean",
            "default": false
          },
          "registered_on": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "site_syncs_incoming_verified_put": {
        "type": "object",
        "properties": {
          "site_syncs_incoming": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_incoming",
            "format": "int64"
          },
          "registered_on": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "site_syncs_incoming_verified_actions_post": {
        "required": [
          "action",
          "site_syncs_incoming_verified"
        ],
        "type": "object",
        "properties": {
          "site_syncs_incoming_verified": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "register",
              "notify_start",
              "notify_error",
              "notify_still_alive",
              "notify_complete",
              "list_snaps",
              "set_retention",
              "request",
              "config"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_incoming_verified_actions_put": {
        "type": "object",
        "properties": {
          "site_syncs_incoming_verified": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "register",
              "notify_start",
              "notify_error",
              "notify_still_alive",
              "notify_complete",
              "list_snaps",
              "set_retention",
              "request",
              "config"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_outgoing_post": {
        "required": [
          "name",
          "site"
        ],
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "initializing",
              "syncing",
              "offline",
              "error"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "registration_code": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "remote_site_id": {
            "type": "string"
          },
          "remote_vsan_user": {
            "type": "string"
          },
          "remote_vsan_host": {
            "type": "string"
          },
          "remote_vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "destination_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "unspecified",
            "enum": [
              "unspecified",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "remote_verify_id": {
            "type": "number",
            "format": "double"
          },
          "threads": {
            "maximum": 32,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 8
          },
          "sendthrottle": {
            "minimum": 0,
            "type": "number",
            "description": "alias type: throttle",
            "format": "double",
            "default": 0
          },
          "encryption": {
            "type": "boolean",
            "default": true
          },
          "remote_snaps_last_refresh": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "remote_snaps_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "unsupported",
              "error",
              "refreshing",
              "updating"
            ]
          },
          "remote_snaps_status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "queue_retry_count": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 10
          },
          "queue_retry_interval_seconds": {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 60
          },
          "queue_retry_interval_multiplier": {
            "type": "boolean",
            "default": true
          },
          "sync_back": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "remote_sync_id": {
            "type": "string"
          },
          "last_run": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "current_stats": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "remote_min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "repair_server": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "compression": {
            "type": "boolean",
            "default": true
          },
          "file_threads": {
            "maximum": 64,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          }
        }
      },
      "site_syncs_outgoing_put": {
        "type": "object",
        "properties": {
          "site": {
            "type": "integer",
            "description": "alias type: parent_site",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "initializing",
              "syncing",
              "offline",
              "error"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "registration_code": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "remote_site_id": {
            "type": "string"
          },
          "remote_vsan_host": {
            "type": "string"
          },
          "remote_vsan_port": {
            "type": "number",
            "format": "double",
            "default": 14201
          },
          "destination_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "unspecified",
            "enum": [
              "unspecified",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "remote_verify_id": {
            "type": "number",
            "format": "double"
          },
          "threads": {
            "maximum": 32,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 8
          },
          "sendthrottle": {
            "minimum": 0,
            "type": "number",
            "description": "alias type: throttle",
            "format": "double",
            "default": 0
          },
          "encryption": {
            "type": "boolean",
            "default": true
          },
          "remote_snaps_last_refresh": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "remote_snaps_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "unsupported",
              "error",
              "refreshing",
              "updating"
            ]
          },
          "remote_snaps_status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "queue_retry_count": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 10
          },
          "queue_retry_interval_seconds": {
            "maximum": 300,
            "minimum": 1,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 60
          },
          "queue_retry_interval_multiplier": {
            "type": "boolean",
            "default": true
          },
          "sync_back": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "last_run": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "compression": {
            "type": "boolean",
            "default": true
          },
          "file_threads": {
            "maximum": 64,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          }
        }
      },
      "site_syncs_outgoing_actions_post": {
        "required": [
          "action",
          "site_syncs_outgoing"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "throttle_sync",
              "add_to_queue",
              "refresh",
              "setup_sync_back",
              "create_repair_server",
              "update_remote_config"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_outgoing_actions_put": {
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "throttle_sync",
              "add_to_queue",
              "refresh",
              "setup_sync_back",
              "create_repair_server",
              "update_remote_config"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_outgoing_logs_post": {
        "required": [
          "site_syncs_outgoing"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_syncs_outgoing_logs_put": {
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "site_syncs_outgoing_profile_periods_post": {
        "required": [
          "retention",
          "site_syncs_outgoing"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "profile_period": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "schedule_task": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "priority": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "do_not_expire": {
            "type": "boolean",
            "default": false
          },
          "destination_prefix": {
            "pattern": "^[a-zA-Z0-9 :_.,+-]*$",
            "type": "string",
            "default": "remote"
          }
        }
      },
      "site_syncs_outgoing_profile_periods_put": {
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "priority": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "do_not_expire": {
            "type": "boolean",
            "default": false
          },
          "destination_prefix": {
            "pattern": "^[a-zA-Z0-9 :_.,+-]*$",
            "type": "string",
            "default": "remote"
          }
        }
      },
      "site_syncs_outgoing_queue_post": {
        "required": [
          "cloud_snapshot",
          "retention",
          "site_syncs_outgoing"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "alias type: text"
          },
          "cloud_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "priority": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "initializing",
            "enum": [
              "queue",
              "paused",
              "syncing",
              "complete",
              "error",
              "retry",
              "initializing",
              "skip_retention"
            ]
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 259200
          },
          "remote_expiration": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "destination_prefix": {
            "pattern": "^[a-zA-Z0-9 :_.,+-]*$",
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "do_not_expire": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "site_syncs_outgoing_queue_put": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "initializing",
            "enum": [
              "queue",
              "paused",
              "syncing",
              "complete",
              "error",
              "retry",
              "initializing",
              "skip_retention"
            ]
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 259200
          },
          "remote_expiration": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "destination_prefix": {
            "pattern": "^[a-zA-Z0-9 :_.,+-]*$",
            "type": "string"
          },
          "do_not_expire": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "site_syncs_outgoing_remote_snap_actions_post": {
        "required": [
          "action",
          "site_syncs_outgoing_remote_snap"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing_remote_snap": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "request",
              "set_retention"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_outgoing_remote_snap_actions_put": {
        "type": "object",
        "properties": {
          "site_syncs_outgoing_remote_snap": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "request",
              "set_retention"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "site_syncs_outgoing_remote_snaps_post": {
        "required": [
          "site_syncs_outgoing"
        ],
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "unsupported",
              "request",
              "downloading",
              "offline",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote_key": {
            "type": "number",
            "format": "double"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "site_syncs_outgoing_remote_snaps_put": {
        "type": "object",
        "properties": {
          "site_syncs_outgoing": {
            "type": "integer",
            "description": "alias type: parent_site_syncs_outgoing",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "unsupported",
              "request",
              "downloading",
              "offline",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "vms_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "recipe_instance": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "owner_user": {
            "type": "string",
            "description": "alias type: row"
          },
          "machine_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "pc-q35-9.0",
            "enum": [
              "pc",
              "pc-i440fx-2.7",
              "pc-i440fx-2.8",
              "pc-i440fx-2.9",
              "pc-i440fx-2.10",
              "pc-i440fx-2.11",
              "pc-i440fx-2.12",
              "pc-i440fx-3.0",
              "pc-i440fx-3.1",
              "pc-i440fx-4.0",
              "pc-i440fx-4.1",
              "pc-i440fx-4.2",
              "pc-i440fx-5.0",
              "pc-i440fx-5.1",
              "pc-i440fx-5.2",
              "pc-i440fx-6.0",
              "pc-i440fx-6.1",
              "pc-i440fx-6.2",
              "pc-i440fx-7.0",
              "pc-i440fx-7.1",
              "pc-i440fx-7.2",
              "pc-i440fx-8.0",
              "pc-i440fx-8.1",
              "pc-i440fx-8.2",
              "pc-i440fx-9.0",
              "q35",
              "pc-q35-2.7",
              "pc-q35-2.8",
              "pc-q35-2.9",
              "pc-q35-2.10",
              "pc-q35-2.11",
              "pc-q35-2.12",
              "pc-q35-3.0",
              "pc-q35-3.1",
              "pc-q35-4.0",
              "pc-q35-4.1",
              "pc-q35-4.2",
              "pc-q35-5.0",
              "pc-q35-5.1",
              "pc-q35-5.2",
              "pc-q35-6.0",
              "pc-q35-6.1",
              "pc-q35-6.2",
              "pc-q35-7.0",
              "pc-q35-7.1",
              "pc-q35-7.2",
              "pc-q35-8.0",
              "pc-q35-8.1",
              "pc-q35-8.2",
              "pc-q35-9.0",
              "yottabyte"
            ]
          },
          "allow_hotplug": {
            "type": "boolean",
            "default": true
          },
          "guest_agent": {
            "type": "boolean",
            "default": false
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "disable_powercycle": {
            "type": "boolean",
            "default": false
          },
          "cpu_cores": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "cpu_type": {
            "type": "string",
            "description": "alias type: cpu_types",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 256,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 1024
          },
          "console": {
            "type": "string",
            "description": "alias type: text",
            "default": "vnc",
            "enum": [
              "vnc",
              "spice",
              "serial",
              "none"
            ]
          },
          "video": {
            "type": "string",
            "description": "alias type: text",
            "default": "std",
            "enum": [
              "std",
              "cirrus",
              "vmware",
              "qxl",
              "virtio",
              "none"
            ]
          },
          "sound": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "sb16",
              "es1370",
              "ac97",
              "adlib",
              "gus",
              "cs4231a",
              "hda",
              "pcspk"
            ]
          },
          "os_family": {
            "type": "string",
            "description": "alias type: text",
            "default": "linux",
            "enum": [
              "linux",
              "windows",
              "freebsd",
              "other"
            ]
          },
          "os_description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "rtc_base": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "utc",
              "localtime"
            ]
          },
          "boot_order": {
            "type": "string",
            "description": "alias type: text",
            "default": "cd",
            "enum": [
              "cd",
              "cdn",
              "dc",
              "nc",
              "n",
              "c",
              "d",
              "strict"
            ]
          },
          "console_pass_enabled": {
            "type": "boolean",
            "default": false
          },
          "console_pass": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "usb_tablet": {
            "type": "boolean",
            "default": true
          },
          "uefi": {
            "type": "boolean",
            "default": false
          },
          "secure_boot": {
            "type": "boolean",
            "default": false
          },
          "serial_port": {
            "type": "boolean",
            "default": false
          },
          "boot_delay": {
            "maximum": 60,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 5
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "advanced": {
            "type": "string"
          },
          "need_restart": {
            "type": "boolean",
            "default": false
          },
          "cloudinit_datasource": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "config_drive_v2",
              "nocloud"
            ]
          },
          "imported": {
            "type": "boolean",
            "default": false
          },
          "created_from": {
            "type": "string",
            "description": "alias type: text",
            "default": "custom",
            "enum": [
              "import",
              "import_vmx",
              "import_ovf",
              "import_vmware",
              "import_shared",
              "clone",
              "recipe",
              "custom",
              "terraform"
            ]
          },
          "migration_method": {
            "type": "string",
            "description": "alias type: text",
            "default": "auto",
            "enum": [
              "auto",
              "live"
            ]
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "power_cycle_timeout": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "allow_export": {
            "type": "boolean",
            "default": true
          },
          "paste_key_config": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          },
          "nested_virtualization": {
            "type": "boolean",
            "default": false
          },
          "disable_hypervisor": {
            "type": "boolean",
            "default": false
          },
          "usb_legacy": {
            "type": "boolean"
          }
        }
      },
      "vms_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "owner_user": {
            "type": "string",
            "description": "alias type: row"
          },
          "machine_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "pc-q35-9.0",
            "enum": [
              "pc",
              "pc-i440fx-2.7",
              "pc-i440fx-2.8",
              "pc-i440fx-2.9",
              "pc-i440fx-2.10",
              "pc-i440fx-2.11",
              "pc-i440fx-2.12",
              "pc-i440fx-3.0",
              "pc-i440fx-3.1",
              "pc-i440fx-4.0",
              "pc-i440fx-4.1",
              "pc-i440fx-4.2",
              "pc-i440fx-5.0",
              "pc-i440fx-5.1",
              "pc-i440fx-5.2",
              "pc-i440fx-6.0",
              "pc-i440fx-6.1",
              "pc-i440fx-6.2",
              "pc-i440fx-7.0",
              "pc-i440fx-7.1",
              "pc-i440fx-7.2",
              "pc-i440fx-8.0",
              "pc-i440fx-8.1",
              "pc-i440fx-8.2",
              "pc-i440fx-9.0",
              "q35",
              "pc-q35-2.7",
              "pc-q35-2.8",
              "pc-q35-2.9",
              "pc-q35-2.10",
              "pc-q35-2.11",
              "pc-q35-2.12",
              "pc-q35-3.0",
              "pc-q35-3.1",
              "pc-q35-4.0",
              "pc-q35-4.1",
              "pc-q35-4.2",
              "pc-q35-5.0",
              "pc-q35-5.1",
              "pc-q35-5.2",
              "pc-q35-6.0",
              "pc-q35-6.1",
              "pc-q35-6.2",
              "pc-q35-7.0",
              "pc-q35-7.1",
              "pc-q35-7.2",
              "pc-q35-8.0",
              "pc-q35-8.1",
              "pc-q35-8.2",
              "pc-q35-9.0",
              "yottabyte"
            ]
          },
          "allow_hotplug": {
            "type": "boolean",
            "default": true
          },
          "guest_agent": {
            "type": "boolean",
            "default": false
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "disable_powercycle": {
            "type": "boolean",
            "default": false
          },
          "cpu_cores": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "cpu_type": {
            "type": "string",
            "description": "alias type: cpu_types",
            "enum": [
              "Broadwell",
              "Cascadelake-Server",
              "Conroe",
              "Cooperlake",
              "core2duo",
              "coreduo",
              "Denverton",
              "EPYC",
              "EPYC-Genoa",
              "EPYC-Milan",
              "EPYC-Rome",
              "GraniteRapids",
              "Haswell",
              "host",
              "Icelake-Server",
              "IvyBridge",
              "KnightsMill",
              "kvm64",
              "n270",
              "Nehalem",
              "Opteron_G1",
              "Opteron_G2",
              "Opteron_G3",
              "Opteron_G4",
              "Opteron_G5",
              "Penryn",
              "phenom",
              "qemu64",
              "SandyBridge",
              "SapphireRapids",
              "Skylake-Client",
              "Skylake-Server",
              "Snowridge",
              "Westmere"
            ]
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 256,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 1024
          },
          "console": {
            "type": "string",
            "description": "alias type: text",
            "default": "vnc",
            "enum": [
              "vnc",
              "spice",
              "serial",
              "none"
            ]
          },
          "video": {
            "type": "string",
            "description": "alias type: text",
            "default": "std",
            "enum": [
              "std",
              "cirrus",
              "vmware",
              "qxl",
              "virtio",
              "none"
            ]
          },
          "sound": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "sb16",
              "es1370",
              "ac97",
              "adlib",
              "gus",
              "cs4231a",
              "hda",
              "pcspk"
            ]
          },
          "os_family": {
            "type": "string",
            "description": "alias type: text",
            "default": "linux",
            "enum": [
              "linux",
              "windows",
              "freebsd",
              "other"
            ]
          },
          "os_description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "rtc_base": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "utc",
              "localtime"
            ]
          },
          "boot_order": {
            "type": "string",
            "description": "alias type: text",
            "default": "cd",
            "enum": [
              "cd",
              "cdn",
              "dc",
              "nc",
              "n",
              "c",
              "d",
              "strict"
            ]
          },
          "console_pass_enabled": {
            "type": "boolean",
            "default": false
          },
          "console_pass": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "usb_tablet": {
            "type": "boolean",
            "default": true
          },
          "uefi": {
            "type": "boolean",
            "default": false
          },
          "secure_boot": {
            "type": "boolean",
            "default": false
          },
          "serial_port": {
            "type": "boolean",
            "default": false
          },
          "boot_delay": {
            "maximum": 60,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 5
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "advanced": {
            "type": "string"
          },
          "need_restart": {
            "type": "boolean",
            "default": false
          },
          "cloudinit_datasource": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "config_drive_v2",
              "nocloud"
            ]
          },
          "imported": {
            "type": "boolean",
            "default": false
          },
          "created_from": {
            "type": "string",
            "description": "alias type: text",
            "default": "custom",
            "enum": [
              "import",
              "import_vmx",
              "import_ovf",
              "import_vmware",
              "import_shared",
              "clone",
              "recipe",
              "custom",
              "terraform"
            ]
          },
          "migration_method": {
            "type": "string",
            "description": "alias type: text",
            "default": "auto",
            "enum": [
              "auto",
              "live"
            ]
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "power_cycle_timeout": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "allow_export": {
            "type": "boolean",
            "default": true
          },
          "paste_key_config": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "nested_virtualization": {
            "type": "boolean",
            "default": false
          },
          "disable_hypervisor": {
            "type": "boolean",
            "default": false
          },
          "usb_legacy": {
            "type": "boolean"
          }
        }
      },
      "smtp_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "delete",
              "deleteall",
              "hold",
              "release",
              "flush",
              "flushall",
              "todayreport",
              "yesterdayreport",
              "refresh"
            ]
          },
          "report": {
            "type": "string",
            "description": "alias type: text"
          },
          "queue": {
            "type": "string",
            "description": "row reference to table 'smtp_queue'",
            "x-yb-table-reference": "smtp_queue"
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "smtp_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "delete",
              "deleteall",
              "hold",
              "release",
              "flush",
              "flushall",
              "todayreport",
              "yesterdayreport",
              "refresh"
            ]
          },
          "report": {
            "type": "string",
            "description": "alias type: text"
          },
          "queue": {
            "type": "string",
            "description": "row reference to table 'smtp_queue'",
            "x-yb-table-reference": "smtp_queue"
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "smtp_logs_post": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: text",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical"
            ]
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          }
        }
      },
      "smtp_logs_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: text",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical"
            ]
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "smtp_outbox_post": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "alias type: text"
          },
          "body": {
            "type": "string"
          },
          "secret_body": {
            "type": "string"
          },
          "attachments": {
            "type": "string",
            "description": "alias type: text"
          },
          "body_file": {
            "type": "string",
            "description": "alias type: text"
          },
          "from": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "to": {
            "type": "string",
            "description": "alias type: text"
          },
          "cc": {
            "type": "string",
            "description": "alias type: text"
          },
          "bcc": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "smtp_outbox_put": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "alias type: text"
          },
          "body": {
            "type": "string"
          },
          "secret_body": {
            "type": "string"
          },
          "attachments": {
            "type": "string",
            "description": "alias type: text"
          },
          "body_file": {
            "type": "string",
            "description": "alias type: text"
          },
          "from": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "to": {
            "type": "string",
            "description": "alias type: text"
          },
          "cc": {
            "type": "string",
            "description": "alias type: text"
          },
          "bcc": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "smtp_queue_post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "subject": {
            "type": "string",
            "description": "alias type: text"
          },
          "from": {
            "type": "string",
            "description": "alias type: text"
          },
          "to": {
            "type": "string",
            "description": "alias type: text"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "hold",
              "deferred",
              "bounce",
              "rejected",
              "active"
            ]
          }
        }
      },
      "smtp_queue_put": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "subject": {
            "type": "string",
            "description": "alias type: text"
          },
          "from": {
            "type": "string",
            "description": "alias type: text"
          },
          "to": {
            "type": "string",
            "description": "alias type: text"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "hold",
              "deferred",
              "bounce",
              "rejected",
              "active"
            ]
          }
        }
      },
      "smtp_settings_post": {
        "type": "object",
        "properties": {
          "relay_host": {
            "type": "string",
            "description": "alias type: text"
          },
          "relay_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "hostname": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_address": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "use_tls": {
            "type": "boolean"
          },
          "sasl_auth": {
            "type": "boolean"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          }
        }
      },
      "smtp_settings_put": {
        "type": "object",
        "properties": {
          "relay_host": {
            "type": "string",
            "description": "alias type: text"
          },
          "relay_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "hostname": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_address": {
            "type": "string",
            "description": "alias type: text"
          },
          "from_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "use_tls": {
            "type": "boolean"
          },
          "sasl_auth": {
            "type": "boolean"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          }
        }
      },
      "snapshot_profile_actions_post": {
        "required": [
          "action",
          "snapshot_profile"
        ],
        "type": "object",
        "properties": {
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "delete"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "snapshot_profile_actions_put": {
        "type": "object",
        "properties": {
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "delete"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "snapshot_profile_periods_post": {
        "required": [
          "name",
          "profile",
          "retention"
        ],
        "type": "object",
        "properties": {
          "profile": {
            "type": "integer",
            "description": "alias type: parent_snapshot_profile",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "frequency": {
            "type": "string",
            "description": "alias type: period_frequency",
            "enum": [
              "custom",
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ]
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: minute",
            "format": "int32"
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: hour",
            "format": "int32"
          },
          "day_of_week": {
            "type": "string",
            "description": "alias type: day_of_week",
            "default": "any",
            "enum": [
              "sun",
              "mon",
              "tue",
              "wed",
              "thu",
              "fri",
              "sat",
              "any"
            ]
          },
          "day_of_month": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: day_of_month",
            "format": "int32"
          },
          "month": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: month",
            "format": "int32"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "skip_missed": {
            "type": "boolean",
            "default": false
          },
          "max_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "1",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "quiesce": {
            "type": "boolean",
            "default": false
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "estimated_snapshot_count": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "snapshot_profile_periods_put": {
        "type": "object",
        "properties": {
          "profile": {
            "type": "integer",
            "description": "alias type: parent_snapshot_profile",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "frequency": {
            "type": "string",
            "description": "alias type: period_frequency",
            "enum": [
              "custom",
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ]
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: minute",
            "format": "int32"
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: hour",
            "format": "int32"
          },
          "day_of_week": {
            "type": "string",
            "description": "alias type: day_of_week",
            "default": "any",
            "enum": [
              "sun",
              "mon",
              "tue",
              "wed",
              "thu",
              "fri",
              "sat",
              "any"
            ]
          },
          "day_of_month": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: day_of_month",
            "format": "int32"
          },
          "month": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: month",
            "format": "int32"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "skip_missed": {
            "type": "boolean",
            "default": false
          },
          "max_tier": {
            "type": "string",
            "description": "alias type: text",
            "default": "1",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "quiesce": {
            "type": "boolean",
            "default": false
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          }
        }
      },
      "snapshot_profiles_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "ignore_warnings": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "snapshot_profiles_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "ignore_warnings": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "storage_tier_stats_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "storage_tier_stats_put": {
        "type": "object",
        "properties": {
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "storage_tier_stats_history_long_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "allocated": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "used_inflated": {
            "type": "integer",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "storage_tier_stats_history_long_put": {
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "rops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wops_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_avg": {
            "type": "integer",
            "format": "int64"
          },
          "rops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wops_peak": {
            "type": "integer",
            "format": "int64"
          },
          "rbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "wbps_peak": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "allocated": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "used_inflated": {
            "type": "integer",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "storage_tier_stats_history_short_post": {
        "required": [
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "allocated": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "used_inflated": {
            "type": "integer",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "storage_tier_stats_history_short_put": {
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "rops": {
            "type": "integer",
            "format": "int64"
          },
          "wops": {
            "type": "integer",
            "format": "int64"
          },
          "rbps": {
            "type": "integer",
            "format": "int64"
          },
          "wbps": {
            "type": "integer",
            "format": "int64"
          },
          "writes": {
            "type": "integer",
            "format": "int64"
          },
          "reads": {
            "type": "integer",
            "format": "int64"
          },
          "write_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "read_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "allocated": {
            "type": "integer",
            "format": "int64"
          },
          "capacity": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          },
          "used_inflated": {
            "type": "integer",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "storage_tiers_post": {
        "required": [
          "capacity",
          "tier"
        ],
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "used": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "allocated": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "used_inflated": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "storage_tiers_put": {
        "type": "object",
        "properties": {
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "used": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "allocated": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "used_inflated": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "dedupe_ratio": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "subscription_profiles_post": {
        "required": [
          "frequency_type",
          "name",
          "object_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "user_modded": {
            "type": "boolean",
            "default": false
          },
          "frequency_type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "ondemand",
              "scheduled"
            ]
          },
          "object_type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "catalog_dashboard",
              "machine_dashboard",
              "nas_dashboard",
              "vnet_dashboard",
              "tenant_dashboard",
              "dashboard",
              "system_dashboard",
              "update_dashboard",
              "vms",
              "vmware_containers",
              "machine_snapshots",
              "tenants",
              "clusters",
              "storage_tiers",
              "cluster_tiers",
              "nodes",
              "vnets",
              "volumes",
              "volume_syncs",
              "site_syncs_outgoing",
              "site_syncs_incoming"
            ]
          },
          "fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "sort": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_sort": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_target": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_threshold": {
            "type": "integer",
            "format": "int32"
          },
          "onchange_compare": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "different",
              "new",
              "gt0",
              "gt",
              "anyval"
            ]
          },
          "onchange_reminder": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "none",
              "hour_1",
              "hour_6",
              "hour_12",
              "hour_24"
            ]
          },
          "get_target": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "subscription_profiles_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "user_modded": {
            "type": "boolean",
            "default": false
          },
          "frequency_type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "ondemand",
              "scheduled"
            ]
          },
          "fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "sort": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_fields": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_filter": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_sort": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_target": {
            "type": "string",
            "description": "alias type: text"
          },
          "onchange_threshold": {
            "type": "integer",
            "format": "int32"
          },
          "onchange_compare": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "different",
              "new",
              "gt0",
              "gt",
              "anyval"
            ]
          },
          "onchange_reminder": {
            "type": "string",
            "description": "alias type: text",
            "default": "disabled",
            "enum": [
              "disabled",
              "none",
              "hour_1",
              "hour_6",
              "hour_12",
              "hour_24"
            ]
          },
          "get_target": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "subscriptions_post": {
        "required": [
          "name",
          "owner",
          "subscription_profile",
          "target"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "target": {
            "type": "string",
            "description": "alias type: row"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "subscription_profile": {
            "type": "string",
            "description": "alias type: row"
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: minute",
            "format": "int32"
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: hour",
            "format": "int32"
          },
          "frequency": {
            "type": "string",
            "description": "alias type: period_frequency",
            "enum": [
              "custom",
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ]
          },
          "day_of_week": {
            "type": "string",
            "description": "alias type: day_of_week",
            "default": "any",
            "enum": [
              "sun",
              "mon",
              "tue",
              "wed",
              "thu",
              "fri",
              "sat",
              "any"
            ]
          },
          "day_of_month": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: day_of_month",
            "format": "int32"
          },
          "month": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: month",
            "format": "int32"
          },
          "throttle": {
            "maximum": 60,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "reminder": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "none",
              "hour_1",
              "hour_6",
              "hour_12",
              "hour_24"
            ]
          },
          "suspend_until": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "subscriptions_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "target": {
            "type": "string",
            "description": "alias type: row"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "subscription_profile": {
            "type": "string",
            "description": "alias type: row"
          },
          "minute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: minute",
            "format": "int32"
          },
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: hour",
            "format": "int32"
          },
          "frequency": {
            "type": "string",
            "description": "alias type: period_frequency",
            "enum": [
              "custom",
              "hourly",
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ]
          },
          "day_of_week": {
            "type": "string",
            "description": "alias type: day_of_week",
            "default": "any",
            "enum": [
              "sun",
              "mon",
              "tue",
              "wed",
              "thu",
              "fri",
              "sat",
              "any"
            ]
          },
          "day_of_month": {
            "maximum": 31,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: day_of_month",
            "format": "int32"
          },
          "month": {
            "maximum": 12,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: month",
            "format": "int32"
          },
          "throttle": {
            "maximum": 60,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "reminder": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "none",
              "hour_1",
              "hour_6",
              "hour_12",
              "hour_24"
            ]
          },
          "suspend_until": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "swagger_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "generate"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "swagger_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "generate"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "system_post": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[a-zA-Z0-9_-]{40}$",
            "type": "string"
          },
          "cloud_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "os_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "string",
            "description": "alias type: text"
          },
          "is_tenant": {
            "type": "boolean"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "city": {
            "type": "string",
            "description": "alias type: text"
          },
          "country": {
            "type": "string",
            "description": "alias type: country",
            "default": "US",
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KR",
              "KP",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "BL",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ]
          },
          "timezone": {
            "type": "string",
            "description": "alias type: timezone",
            "default": "Etc/UTC",
            "enum": [
              "Europe/Andorra",
              "Asia/Dubai",
              "Asia/Kabul",
              "America/Antigua",
              "America/Anguilla",
              "Europe/Tirane",
              "Asia/Yerevan",
              "Africa/Luanda",
              "Antarctica/McMurdo",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Mawson",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Cordoba",
              "America/Argentina/Salta",
              "America/Argentina/Jujuy",
              "America/Argentina/Tucuman",
              "America/Argentina/Catamarca",
              "America/Argentina/La_Rioja",
              "America/Argentina/San_Juan",
              "America/Argentina/Mendoza",
              "America/Argentina/San_Luis",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Ushuaia",
              "Pacific/Pago_Pago",
              "Europe/Vienna",
              "Australia/Lord_Howe",
              "Antarctica/Macquarie",
              "Australia/Hobart",
              "Australia/Melbourne",
              "Australia/Sydney",
              "Australia/Broken_Hill",
              "Australia/Brisbane",
              "Australia/Lindeman",
              "Australia/Adelaide",
              "Australia/Darwin",
              "Australia/Perth",
              "Australia/Eucla",
              "America/Aruba",
              "Europe/Mariehamn",
              "Asia/Baku",
              "Europe/Sarajevo",
              "America/Barbados",
              "Asia/Dhaka",
              "Europe/Brussels",
              "Africa/Ouagadougou",
              "Europe/Sofia",
              "Asia/Bahrain",
              "Africa/Bujumbura",
              "Africa/Porto-Novo",
              "America/St_Barthelemy",
              "Atlantic/Bermuda",
              "Asia/Brunei",
              "America/La_Paz",
              "America/Kralendijk",
              "America/Noronha",
              "America/Belem",
              "America/Fortaleza",
              "America/Recife",
              "America/Araguaina",
              "America/Maceio",
              "America/Bahia",
              "America/Sao_Paulo",
              "America/Campo_Grande",
              "America/Cuiaba",
              "America/Santarem",
              "America/Porto_Velho",
              "America/Boa_Vista",
              "America/Manaus",
              "America/Eirunepe",
              "America/Rio_Branco",
              "America/Nassau",
              "Asia/Thimphu",
              "Africa/Gaborone",
              "Europe/Minsk",
              "America/Belize",
              "America/St_Johns",
              "America/Halifax",
              "America/Glace_Bay",
              "America/Moncton",
              "America/Goose_Bay",
              "America/Blanc-Sablon",
              "America/Toronto",
              "America/Nipigon",
              "America/Thunder_Bay",
              "America/Iqaluit",
              "America/Pangnirtung",
              "America/Atikokan",
              "America/Winnipeg",
              "America/Rainy_River",
              "America/Resolute",
              "America/Rankin_Inlet",
              "America/Regina",
              "America/Swift_Current",
              "America/Edmonton",
              "America/Cambridge_Bay",
              "America/Yellowknife",
              "America/Inuvik",
              "America/Creston",
              "America/Dawson_Creek",
              "America/Fort_Nelson",
              "America/Whitehorse",
              "America/Dawson",
              "America/Vancouver",
              "Indian/Cocos",
              "Africa/Kinshasa",
              "Africa/Lubumbashi",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Europe/Zurich",
              "Africa/Abidjan",
              "Pacific/Rarotonga",
              "America/Santiago",
              "America/Punta_Arenas",
              "Pacific/Easter",
              "Africa/Douala",
              "Asia/Shanghai",
              "Asia/Urumqi",
              "America/Bogota",
              "America/Costa_Rica",
              "America/Havana",
              "Atlantic/Cape_Verde",
              "America/Curacao",
              "Indian/Christmas",
              "Asia/Nicosia",
              "Asia/Famagusta",
              "Europe/Prague",
              "Europe/Berlin",
              "Europe/Busingen",
              "Africa/Djibouti",
              "Europe/Copenhagen",
              "America/Dominica",
              "America/Santo_Domingo",
              "Africa/Algiers",
              "America/Guayaquil",
              "Pacific/Galapagos",
              "Europe/Tallinn",
              "Africa/Cairo",
              "Africa/El_Aaiun",
              "Africa/Asmara",
              "Europe/Madrid",
              "Africa/Ceuta",
              "Atlantic/Canary",
              "Africa/Addis_Ababa",
              "Europe/Helsinki",
              "Pacific/Fiji",
              "Atlantic/Stanley",
              "Pacific/Chuuk",
              "Pacific/Pohnpei",
              "Pacific/Kosrae",
              "Atlantic/Faroe",
              "Europe/Paris",
              "Africa/Libreville",
              "Europe/London",
              "America/Grenada",
              "Asia/Tbilisi",
              "America/Cayenne",
              "Europe/Guernsey",
              "Africa/Accra",
              "Europe/Gibraltar",
              "America/Nuuk",
              "America/Danmarkshavn",
              "America/Scoresbysund",
              "America/Thule",
              "Africa/Banjul",
              "Africa/Conakry",
              "America/Guadeloupe",
              "Africa/Malabo",
              "Europe/Athens",
              "Atlantic/South_Georgia",
              "America/Guatemala",
              "Pacific/Guam",
              "Africa/Bissau",
              "America/Guyana",
              "Asia/Hong_Kong",
              "America/Tegucigalpa",
              "Europe/Zagreb",
              "America/Port-au-Prince",
              "Europe/Budapest",
              "Asia/Jakarta",
              "Asia/Pontianak",
              "Asia/Makassar",
              "Asia/Jayapura",
              "Europe/Dublin",
              "Asia/Jerusalem",
              "Europe/Isle_of_Man",
              "Asia/Kolkata",
              "Indian/Chagos",
              "Asia/Baghdad",
              "Asia/Tehran",
              "Atlantic/Reykjavik",
              "Europe/Rome",
              "Europe/Jersey",
              "America/Jamaica",
              "Asia/Amman",
              "Asia/Tokyo",
              "Africa/Nairobi",
              "Asia/Bishkek",
              "Asia/Phnom_Penh",
              "Pacific/Tarawa",
              "Pacific/Enderbury",
              "Pacific/Kiritimati",
              "Indian/Comoro",
              "America/St_Kitts",
              "Asia/Pyongyang",
              "Asia/Seoul",
              "Asia/Kuwait",
              "America/Cayman",
              "Asia/Almaty",
              "Asia/Qyzylorda",
              "Asia/Qostanay",
              "Asia/Aqtobe",
              "Asia/Aqtau",
              "Asia/Atyrau",
              "Asia/Oral",
              "Asia/Vientiane",
              "Asia/Beirut",
              "America/St_Lucia",
              "Europe/Vaduz",
              "Asia/Colombo",
              "Africa/Monrovia",
              "Africa/Maseru",
              "Europe/Vilnius",
              "Europe/Luxembourg",
              "Europe/Riga",
              "Africa/Tripoli",
              "Africa/Casablanca",
              "Europe/Monaco",
              "Europe/Chisinau",
              "Europe/Podgorica",
              "America/Marigot",
              "Indian/Antananarivo",
              "Pacific/Majuro",
              "Pacific/Kwajalein",
              "Europe/Skopje",
              "Africa/Bamako",
              "Asia/Yangon",
              "Asia/Ulaanbaatar",
              "Asia/Hovd",
              "Asia/Choibalsan",
              "Asia/Macau",
              "Pacific/Saipan",
              "America/Martinique",
              "Africa/Nouakchott",
              "America/Montserrat",
              "Europe/Malta",
              "Indian/Mauritius",
              "Indian/Maldives",
              "Africa/Blantyre",
              "America/Mexico_City",
              "America/Cancun",
              "America/Merida",
              "America/Monterrey",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Chihuahua",
              "America/Ojinaga",
              "America/Hermosillo",
              "America/Tijuana",
              "America/Bahia_Banderas",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Africa/Maputo",
              "Africa/Windhoek",
              "Pacific/Noumea",
              "Africa/Niamey",
              "Pacific/Norfolk",
              "Africa/Lagos",
              "America/Managua",
              "Europe/Amsterdam",
              "Europe/Oslo",
              "Asia/Kathmandu",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Auckland",
              "Pacific/Chatham",
              "Asia/Muscat",
              "America/Panama",
              "America/Lima",
              "Pacific/Tahiti",
              "Pacific/Marquesas",
              "Pacific/Gambier",
              "Pacific/Port_Moresby",
              "Pacific/Bougainville",
              "Asia/Manila",
              "Asia/Karachi",
              "Europe/Warsaw",
              "America/Miquelon",
              "Pacific/Pitcairn",
              "America/Puerto_Rico",
              "Asia/Gaza",
              "Asia/Hebron",
              "Europe/Lisbon",
              "Atlantic/Madeira",
              "Atlantic/Azores",
              "Pacific/Palau",
              "America/Asuncion",
              "Asia/Qatar",
              "Indian/Reunion",
              "Europe/Bucharest",
              "Europe/Belgrade",
              "Europe/Kaliningrad",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Kirov",
              "Europe/Volgograd",
              "Europe/Astrakhan",
              "Europe/Saratov",
              "Europe/Ulyanovsk",
              "Europe/Samara",
              "Asia/Yekaterinburg",
              "Asia/Omsk",
              "Asia/Novosibirsk",
              "Asia/Barnaul",
              "Asia/Tomsk",
              "Asia/Novokuznetsk",
              "Asia/Krasnoyarsk",
              "Asia/Irkutsk",
              "Asia/Chita",
              "Asia/Yakutsk",
              "Asia/Khandyga",
              "Asia/Vladivostok",
              "Asia/Ust-Nera",
              "Asia/Magadan",
              "Asia/Sakhalin",
              "Asia/Srednekolymsk",
              "Asia/Kamchatka",
              "Asia/Anadyr",
              "Africa/Kigali",
              "Asia/Riyadh",
              "Pacific/Guadalcanal",
              "Indian/Mahe",
              "Africa/Khartoum",
              "Europe/Stockholm",
              "Asia/Singapore",
              "Atlantic/St_Helena",
              "Europe/Ljubljana",
              "Arctic/Longyearbyen",
              "Europe/Bratislava",
              "Africa/Freetown",
              "Europe/San_Marino",
              "Africa/Dakar",
              "Africa/Mogadishu",
              "America/Paramaribo",
              "Africa/Juba",
              "Africa/Sao_Tome",
              "America/El_Salvador",
              "America/Lower_Princes",
              "Asia/Damascus",
              "Africa/Mbabane",
              "America/Grand_Turk",
              "Africa/Ndjamena",
              "Indian/Kerguelen",
              "Africa/Lome",
              "Asia/Bangkok",
              "Asia/Dushanbe",
              "Pacific/Fakaofo",
              "Asia/Dili",
              "Asia/Ashgabat",
              "Africa/Tunis",
              "Pacific/Tongatapu",
              "Europe/Istanbul",
              "America/Port_of_Spain",
              "Pacific/Funafuti",
              "Asia/Taipei",
              "Africa/Dar_es_Salaam",
              "Europe/Kiev",
              "Europe/Uzhgorod",
              "Europe/Zaporozhye",
              "Africa/Kampala",
              "Pacific/Midway",
              "Pacific/Wake",
              "America/New_York",
              "America/Detroit",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Indiana/Indianapolis",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Vevay",
              "America/Chicago",
              "America/Indiana/Tell_City",
              "America/Indiana/Knox",
              "America/Menominee",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/North_Dakota/Beulah",
              "America/Denver",
              "America/Boise",
              "America/Phoenix",
              "America/Los_Angeles",
              "America/Anchorage",
              "America/Juneau",
              "America/Sitka",
              "America/Metlakatla",
              "America/Yakutat",
              "America/Nome",
              "America/Adak",
              "Pacific/Honolulu",
              "America/Montevideo",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Europe/Vatican",
              "America/St_Vincent",
              "America/Caracas",
              "America/Tortola",
              "America/St_Thomas",
              "Asia/Ho_Chi_Minh",
              "Pacific/Efate",
              "Pacific/Wallis",
              "Pacific/Apia",
              "Asia/Aden",
              "Indian/Mayotte",
              "Africa/Johannesburg",
              "Africa/Lusaka",
              "Africa/Harare",
              "Etc/UTC"
            ]
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: port",
            "format": "int32",
            "default": 14201
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "map_color": {
            "type": "string"
          }
        }
      },
      "system_put": {
        "type": "object",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "os_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "city": {
            "type": "string",
            "description": "alias type: text"
          },
          "country": {
            "type": "string",
            "description": "alias type: country",
            "default": "US",
            "enum": [
              "AF",
              "AX",
              "AL",
              "DZ",
              "AS",
              "AD",
              "AO",
              "AI",
              "AQ",
              "AG",
              "AR",
              "AM",
              "AW",
              "AU",
              "AT",
              "AZ",
              "BS",
              "BH",
              "BD",
              "BB",
              "BY",
              "BE",
              "BZ",
              "BJ",
              "BM",
              "BT",
              "BO",
              "BA",
              "BW",
              "BV",
              "BR",
              "IO",
              "BN",
              "BG",
              "BF",
              "BI",
              "KH",
              "CM",
              "CA",
              "CV",
              "KY",
              "CF",
              "TD",
              "CL",
              "CN",
              "CX",
              "CC",
              "CO",
              "KM",
              "CG",
              "CD",
              "CK",
              "CR",
              "CI",
              "HR",
              "CU",
              "CY",
              "CZ",
              "DK",
              "DJ",
              "DM",
              "DO",
              "EC",
              "EG",
              "SV",
              "GQ",
              "ER",
              "EE",
              "ET",
              "FK",
              "FO",
              "FJ",
              "FI",
              "FR",
              "GF",
              "PF",
              "TF",
              "GA",
              "GM",
              "GE",
              "DE",
              "GH",
              "GI",
              "GR",
              "GL",
              "GD",
              "GP",
              "GU",
              "GT",
              "GG",
              "GN",
              "GW",
              "GY",
              "HT",
              "HM",
              "VA",
              "HN",
              "HK",
              "HU",
              "IS",
              "IN",
              "ID",
              "IR",
              "IQ",
              "IE",
              "IM",
              "IL",
              "IT",
              "JM",
              "JP",
              "JE",
              "JO",
              "KZ",
              "KE",
              "KI",
              "KR",
              "KP",
              "KW",
              "KG",
              "LA",
              "LV",
              "LB",
              "LS",
              "LR",
              "LY",
              "LI",
              "LT",
              "LU",
              "MO",
              "MK",
              "MG",
              "MW",
              "MY",
              "MV",
              "ML",
              "MT",
              "MH",
              "MQ",
              "MR",
              "MU",
              "YT",
              "MX",
              "FM",
              "MD",
              "MC",
              "MN",
              "ME",
              "MS",
              "MA",
              "MZ",
              "MM",
              "NA",
              "NR",
              "NP",
              "NL",
              "AN",
              "NC",
              "NZ",
              "NI",
              "NE",
              "NG",
              "NU",
              "NF",
              "MP",
              "NO",
              "OM",
              "PK",
              "PW",
              "PS",
              "PA",
              "PG",
              "PY",
              "PE",
              "PH",
              "PN",
              "PL",
              "PT",
              "PR",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "BL",
              "SH",
              "KN",
              "LC",
              "MF",
              "PM",
              "VC",
              "WS",
              "SM",
              "ST",
              "SA",
              "SN",
              "RS",
              "SC",
              "SL",
              "SG",
              "SK",
              "SI",
              "SB",
              "SO",
              "ZA",
              "GS",
              "ES",
              "LK",
              "SD",
              "SR",
              "SJ",
              "SZ",
              "SE",
              "CH",
              "SY",
              "TW",
              "TJ",
              "TZ",
              "TH",
              "TL",
              "TG",
              "TK",
              "TO",
              "TT",
              "TN",
              "TR",
              "TM",
              "TC",
              "TV",
              "UG",
              "UA",
              "AE",
              "GB",
              "US",
              "UM",
              "UY",
              "UZ",
              "VU",
              "VE",
              "VN",
              "VG",
              "VI",
              "WF",
              "EH",
              "YE",
              "ZM",
              "ZW"
            ]
          },
          "timezone": {
            "type": "string",
            "description": "alias type: timezone",
            "default": "Etc/UTC",
            "enum": [
              "Europe/Andorra",
              "Asia/Dubai",
              "Asia/Kabul",
              "America/Antigua",
              "America/Anguilla",
              "Europe/Tirane",
              "Asia/Yerevan",
              "Africa/Luanda",
              "Antarctica/McMurdo",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Mawson",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Cordoba",
              "America/Argentina/Salta",
              "America/Argentina/Jujuy",
              "America/Argentina/Tucuman",
              "America/Argentina/Catamarca",
              "America/Argentina/La_Rioja",
              "America/Argentina/San_Juan",
              "America/Argentina/Mendoza",
              "America/Argentina/San_Luis",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Ushuaia",
              "Pacific/Pago_Pago",
              "Europe/Vienna",
              "Australia/Lord_Howe",
              "Antarctica/Macquarie",
              "Australia/Hobart",
              "Australia/Melbourne",
              "Australia/Sydney",
              "Australia/Broken_Hill",
              "Australia/Brisbane",
              "Australia/Lindeman",
              "Australia/Adelaide",
              "Australia/Darwin",
              "Australia/Perth",
              "Australia/Eucla",
              "America/Aruba",
              "Europe/Mariehamn",
              "Asia/Baku",
              "Europe/Sarajevo",
              "America/Barbados",
              "Asia/Dhaka",
              "Europe/Brussels",
              "Africa/Ouagadougou",
              "Europe/Sofia",
              "Asia/Bahrain",
              "Africa/Bujumbura",
              "Africa/Porto-Novo",
              "America/St_Barthelemy",
              "Atlantic/Bermuda",
              "Asia/Brunei",
              "America/La_Paz",
              "America/Kralendijk",
              "America/Noronha",
              "America/Belem",
              "America/Fortaleza",
              "America/Recife",
              "America/Araguaina",
              "America/Maceio",
              "America/Bahia",
              "America/Sao_Paulo",
              "America/Campo_Grande",
              "America/Cuiaba",
              "America/Santarem",
              "America/Porto_Velho",
              "America/Boa_Vista",
              "America/Manaus",
              "America/Eirunepe",
              "America/Rio_Branco",
              "America/Nassau",
              "Asia/Thimphu",
              "Africa/Gaborone",
              "Europe/Minsk",
              "America/Belize",
              "America/St_Johns",
              "America/Halifax",
              "America/Glace_Bay",
              "America/Moncton",
              "America/Goose_Bay",
              "America/Blanc-Sablon",
              "America/Toronto",
              "America/Nipigon",
              "America/Thunder_Bay",
              "America/Iqaluit",
              "America/Pangnirtung",
              "America/Atikokan",
              "America/Winnipeg",
              "America/Rainy_River",
              "America/Resolute",
              "America/Rankin_Inlet",
              "America/Regina",
              "America/Swift_Current",
              "America/Edmonton",
              "America/Cambridge_Bay",
              "America/Yellowknife",
              "America/Inuvik",
              "America/Creston",
              "America/Dawson_Creek",
              "America/Fort_Nelson",
              "America/Whitehorse",
              "America/Dawson",
              "America/Vancouver",
              "Indian/Cocos",
              "Africa/Kinshasa",
              "Africa/Lubumbashi",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Europe/Zurich",
              "Africa/Abidjan",
              "Pacific/Rarotonga",
              "America/Santiago",
              "America/Punta_Arenas",
              "Pacific/Easter",
              "Africa/Douala",
              "Asia/Shanghai",
              "Asia/Urumqi",
              "America/Bogota",
              "America/Costa_Rica",
              "America/Havana",
              "Atlantic/Cape_Verde",
              "America/Curacao",
              "Indian/Christmas",
              "Asia/Nicosia",
              "Asia/Famagusta",
              "Europe/Prague",
              "Europe/Berlin",
              "Europe/Busingen",
              "Africa/Djibouti",
              "Europe/Copenhagen",
              "America/Dominica",
              "America/Santo_Domingo",
              "Africa/Algiers",
              "America/Guayaquil",
              "Pacific/Galapagos",
              "Europe/Tallinn",
              "Africa/Cairo",
              "Africa/El_Aaiun",
              "Africa/Asmara",
              "Europe/Madrid",
              "Africa/Ceuta",
              "Atlantic/Canary",
              "Africa/Addis_Ababa",
              "Europe/Helsinki",
              "Pacific/Fiji",
              "Atlantic/Stanley",
              "Pacific/Chuuk",
              "Pacific/Pohnpei",
              "Pacific/Kosrae",
              "Atlantic/Faroe",
              "Europe/Paris",
              "Africa/Libreville",
              "Europe/London",
              "America/Grenada",
              "Asia/Tbilisi",
              "America/Cayenne",
              "Europe/Guernsey",
              "Africa/Accra",
              "Europe/Gibraltar",
              "America/Nuuk",
              "America/Danmarkshavn",
              "America/Scoresbysund",
              "America/Thule",
              "Africa/Banjul",
              "Africa/Conakry",
              "America/Guadeloupe",
              "Africa/Malabo",
              "Europe/Athens",
              "Atlantic/South_Georgia",
              "America/Guatemala",
              "Pacific/Guam",
              "Africa/Bissau",
              "America/Guyana",
              "Asia/Hong_Kong",
              "America/Tegucigalpa",
              "Europe/Zagreb",
              "America/Port-au-Prince",
              "Europe/Budapest",
              "Asia/Jakarta",
              "Asia/Pontianak",
              "Asia/Makassar",
              "Asia/Jayapura",
              "Europe/Dublin",
              "Asia/Jerusalem",
              "Europe/Isle_of_Man",
              "Asia/Kolkata",
              "Indian/Chagos",
              "Asia/Baghdad",
              "Asia/Tehran",
              "Atlantic/Reykjavik",
              "Europe/Rome",
              "Europe/Jersey",
              "America/Jamaica",
              "Asia/Amman",
              "Asia/Tokyo",
              "Africa/Nairobi",
              "Asia/Bishkek",
              "Asia/Phnom_Penh",
              "Pacific/Tarawa",
              "Pacific/Enderbury",
              "Pacific/Kiritimati",
              "Indian/Comoro",
              "America/St_Kitts",
              "Asia/Pyongyang",
              "Asia/Seoul",
              "Asia/Kuwait",
              "America/Cayman",
              "Asia/Almaty",
              "Asia/Qyzylorda",
              "Asia/Qostanay",
              "Asia/Aqtobe",
              "Asia/Aqtau",
              "Asia/Atyrau",
              "Asia/Oral",
              "Asia/Vientiane",
              "Asia/Beirut",
              "America/St_Lucia",
              "Europe/Vaduz",
              "Asia/Colombo",
              "Africa/Monrovia",
              "Africa/Maseru",
              "Europe/Vilnius",
              "Europe/Luxembourg",
              "Europe/Riga",
              "Africa/Tripoli",
              "Africa/Casablanca",
              "Europe/Monaco",
              "Europe/Chisinau",
              "Europe/Podgorica",
              "America/Marigot",
              "Indian/Antananarivo",
              "Pacific/Majuro",
              "Pacific/Kwajalein",
              "Europe/Skopje",
              "Africa/Bamako",
              "Asia/Yangon",
              "Asia/Ulaanbaatar",
              "Asia/Hovd",
              "Asia/Choibalsan",
              "Asia/Macau",
              "Pacific/Saipan",
              "America/Martinique",
              "Africa/Nouakchott",
              "America/Montserrat",
              "Europe/Malta",
              "Indian/Mauritius",
              "Indian/Maldives",
              "Africa/Blantyre",
              "America/Mexico_City",
              "America/Cancun",
              "America/Merida",
              "America/Monterrey",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Chihuahua",
              "America/Ojinaga",
              "America/Hermosillo",
              "America/Tijuana",
              "America/Bahia_Banderas",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Africa/Maputo",
              "Africa/Windhoek",
              "Pacific/Noumea",
              "Africa/Niamey",
              "Pacific/Norfolk",
              "Africa/Lagos",
              "America/Managua",
              "Europe/Amsterdam",
              "Europe/Oslo",
              "Asia/Kathmandu",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Auckland",
              "Pacific/Chatham",
              "Asia/Muscat",
              "America/Panama",
              "America/Lima",
              "Pacific/Tahiti",
              "Pacific/Marquesas",
              "Pacific/Gambier",
              "Pacific/Port_Moresby",
              "Pacific/Bougainville",
              "Asia/Manila",
              "Asia/Karachi",
              "Europe/Warsaw",
              "America/Miquelon",
              "Pacific/Pitcairn",
              "America/Puerto_Rico",
              "Asia/Gaza",
              "Asia/Hebron",
              "Europe/Lisbon",
              "Atlantic/Madeira",
              "Atlantic/Azores",
              "Pacific/Palau",
              "America/Asuncion",
              "Asia/Qatar",
              "Indian/Reunion",
              "Europe/Bucharest",
              "Europe/Belgrade",
              "Europe/Kaliningrad",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Kirov",
              "Europe/Volgograd",
              "Europe/Astrakhan",
              "Europe/Saratov",
              "Europe/Ulyanovsk",
              "Europe/Samara",
              "Asia/Yekaterinburg",
              "Asia/Omsk",
              "Asia/Novosibirsk",
              "Asia/Barnaul",
              "Asia/Tomsk",
              "Asia/Novokuznetsk",
              "Asia/Krasnoyarsk",
              "Asia/Irkutsk",
              "Asia/Chita",
              "Asia/Yakutsk",
              "Asia/Khandyga",
              "Asia/Vladivostok",
              "Asia/Ust-Nera",
              "Asia/Magadan",
              "Asia/Sakhalin",
              "Asia/Srednekolymsk",
              "Asia/Kamchatka",
              "Asia/Anadyr",
              "Africa/Kigali",
              "Asia/Riyadh",
              "Pacific/Guadalcanal",
              "Indian/Mahe",
              "Africa/Khartoum",
              "Europe/Stockholm",
              "Asia/Singapore",
              "Atlantic/St_Helena",
              "Europe/Ljubljana",
              "Arctic/Longyearbyen",
              "Europe/Bratislava",
              "Africa/Freetown",
              "Europe/San_Marino",
              "Africa/Dakar",
              "Africa/Mogadishu",
              "America/Paramaribo",
              "Africa/Juba",
              "Africa/Sao_Tome",
              "America/El_Salvador",
              "America/Lower_Princes",
              "Asia/Damascus",
              "Africa/Mbabane",
              "America/Grand_Turk",
              "Africa/Ndjamena",
              "Indian/Kerguelen",
              "Africa/Lome",
              "Asia/Bangkok",
              "Asia/Dushanbe",
              "Pacific/Fakaofo",
              "Asia/Dili",
              "Asia/Ashgabat",
              "Africa/Tunis",
              "Pacific/Tongatapu",
              "Europe/Istanbul",
              "America/Port_of_Spain",
              "Pacific/Funafuti",
              "Asia/Taipei",
              "Africa/Dar_es_Salaam",
              "Europe/Kiev",
              "Europe/Uzhgorod",
              "Europe/Zaporozhye",
              "Africa/Kampala",
              "Pacific/Midway",
              "Pacific/Wake",
              "America/New_York",
              "America/Detroit",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Indiana/Indianapolis",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Vevay",
              "America/Chicago",
              "America/Indiana/Tell_City",
              "America/Indiana/Knox",
              "America/Menominee",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/North_Dakota/Beulah",
              "America/Denver",
              "America/Boise",
              "America/Phoenix",
              "America/Los_Angeles",
              "America/Anchorage",
              "America/Juneau",
              "America/Sitka",
              "America/Metlakatla",
              "America/Yakutat",
              "America/Nome",
              "America/Adak",
              "Pacific/Honolulu",
              "America/Montevideo",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Europe/Vatican",
              "America/St_Vincent",
              "America/Caracas",
              "America/Tortola",
              "America/St_Thomas",
              "Asia/Ho_Chi_Minh",
              "Pacific/Efate",
              "Pacific/Wallis",
              "Pacific/Apia",
              "Asia/Aden",
              "Indian/Mayotte",
              "Africa/Johannesburg",
              "Africa/Lusaka",
              "Africa/Harare",
              "Etc/UTC"
            ]
          },
          "vsan_host": {
            "type": "string"
          },
          "vsan_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "alias type: port",
            "format": "int32",
            "default": 14201
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "latitude": {
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "longitude": {
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "map_color": {
            "type": "string"
          }
        }
      },
      "system_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "geoip"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "system_actions_put": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "geoip"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "system_diagnostic_actions_post": {
        "required": [
          "action",
          "system_diagnostic"
        ],
        "type": "object",
        "properties": {
          "system_diagnostic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "send2support"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "system_diagnostic_actions_put": {
        "type": "object",
        "properties": {
          "system_diagnostic": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "send2support"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "system_diagnostics_post": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "initializing",
            "enum": [
              "initializing",
              "building",
              "uploading",
              "complete",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "send2support": {
            "type": "boolean"
          }
        }
      },
      "system_diagnostics_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "send2support": {
            "type": "boolean"
          }
        }
      },
      "tenant_actions_post": {
        "required": [
          "action",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "execute",
              "restore",
              "convert_cloud_snapshot",
              "recover_cloudsnapshot",
              "give_file",
              "clone",
              "refresh_status",
              "isolateon",
              "isolateoff"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_actions_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "execute",
              "restore",
              "convert_cloud_snapshot",
              "recover_cloudsnapshot",
              "give_file",
              "clone",
              "refresh_status",
              "isolateon",
              "isolateoff"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_logs_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "tenant_logs_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "tenant_node_actions_post": {
        "required": [
          "action",
          "tenant_node"
        ],
        "type": "object",
        "properties": {
          "tenant_node": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweronmigrate",
              "poweroff",
              "poweroffmaintenance",
              "reset",
              "refresh",
              "kill",
              "migrate",
              "execute"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_node_actions_put": {
        "type": "object",
        "properties": {
          "tenant_node": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweronmigrate",
              "poweroff",
              "poweroffmaintenance",
              "reset",
              "refresh",
              "kill",
              "migrate",
              "execute"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_node_queries_post": {
        "required": [
          "query",
          "tenant_node"
        ],
        "type": "object",
        "properties": {
          "tenant_node": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "arp",
              "arp-scan",
              "whatsmyip",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "tenant_node_queries_put": {
        "type": "object",
        "properties": {
          "tenant_node": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "arp",
              "arp-scan",
              "whatsmyip",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "tenant_nodes_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "nodeid": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "cpu_cores": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 4
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 2048,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 16384
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "reserve_owner": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "tenant_nodes_put": {
        "type": "object",
        "properties": {
          "nodeid": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "cpu_cores": {
            "maximum": 1024,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 4
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 2048,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 16384
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          }
        }
      },
      "tenant_recipe_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "tenant_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'tenant_recipes'",
            "x-yb-table-reference": "tenant_recipes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "clone",
              "download",
              "remove",
              "republish"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_recipe_actions_put": {
        "type": "object",
        "properties": {
          "tenant_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'tenant_recipes'",
            "x-yb-table-reference": "tenant_recipes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "clone",
              "download",
              "remove",
              "republish"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_recipe_instances_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'tenant_recipes'",
            "x-yb-table-reference": "tenant_recipes"
          },
          "answers": {
            "type": "object",
            "properties": {}
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "tenant_recipe_instances_put": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "build": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          }
        }
      },
      "tenant_recipe_logs_post": {
        "type": "object",
        "properties": {
          "tenant_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'tenant_recipes'",
            "x-yb-table-reference": "tenant_recipes"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "tenant_recipe_logs_put": {
        "type": "object",
        "properties": {
          "tenant_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'tenant_recipes'",
            "x-yb-table-reference": "tenant_recipes"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "tenant_recipes_post": {
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "icon": {
            "pattern": "^[a-z-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "preserve_certs": {
            "type": "boolean",
            "default": false
          },
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "tenant": {
            "type": "string",
            "description": "alias type: row"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "update_available": {
            "type": "boolean",
            "default": false
          },
          "needs_republish": {
            "type": "boolean",
            "default": false
          },
          "version": {
            "type": "string",
            "description": "alias type: text",
            "default": "1.0.0"
          },
          "build": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "dependencies": {
            "type": "string",
            "description": "alias type: package_dependencies"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "tenant_recipes_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "icon": {
            "pattern": "^[a-z-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "preserve_certs": {
            "type": "boolean",
            "default": false
          },
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "tenant_snapshot": {
            "type": "string",
            "description": "alias type: row"
          },
          "tenant": {
            "type": "string",
            "description": "alias type: row"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "update_available": {
            "type": "boolean",
            "default": false
          },
          "needs_republish": {
            "type": "boolean",
            "default": false
          },
          "version": {
            "type": "string",
            "description": "alias type: text",
            "default": "1.0.0"
          },
          "build": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "dependencies": {
            "type": "string",
            "description": "alias type: package_dependencies"
          }
        }
      },
      "tenant_snapshot_actions_post": {
        "required": [
          "action",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_snapshot_actions_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "tenant_snapshots_post": {
        "required": [
          "name",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "profile": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "tenant_snapshots_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "profile": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "min_snapshots": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "tenant_stats_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "tenant_stats_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "tenant_stats_history_long_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count": {
            "type": "integer",
            "format": "int32"
          },
          "ip_count": {
            "type": "integer",
            "format": "int32"
          },
          "ram_allocated": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "vgpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "tenant_stats_history_long_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "total_cpu": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "core_count": {
            "type": "integer",
            "format": "int32"
          },
          "ip_count": {
            "type": "integer",
            "format": "int32"
          },
          "ram_allocated": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "vgpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "tenant_stats_history_short_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "total_cpu": {
            "type": "integer",
            "format": "int32"
          },
          "core_count": {
            "type": "integer",
            "format": "int32"
          },
          "ip_count": {
            "type": "integer",
            "format": "int32"
          },
          "ram_allocated": {
            "type": "integer",
            "format": "int32"
          },
          "ram_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier1_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier2_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier3_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier4_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier5_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "vgpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_pct": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_pct": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "tenant_stats_history_short_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "ram_used": {
            "type": "integer",
            "format": "int32"
          },
          "vram_used": {
            "type": "integer",
            "format": "int32"
          },
          "total_cpu": {
            "type": "integer",
            "format": "int32"
          },
          "core_count": {
            "type": "integer",
            "format": "int32"
          },
          "ip_count": {
            "type": "integer",
            "format": "int32"
          },
          "ram_allocated": {
            "type": "integer",
            "format": "int32"
          },
          "ram_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier0_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier0_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier1_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier1_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier2_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier2_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier3_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier3_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier4_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier4_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_provisioned": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_used": {
            "type": "integer",
            "format": "int64"
          },
          "tier5_pct": {
            "type": "integer",
            "format": "int32"
          },
          "tier5_allocated": {
            "type": "integer",
            "format": "int64"
          },
          "vgpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_used": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_total": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "vgpus_pct": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "gpus_pct": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "tenant_status_post": {
        "required": [
          "tenant"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "running": {
            "type": "boolean"
          },
          "starting": {
            "type": "boolean"
          },
          "stopping": {
            "type": "boolean"
          },
          "migrating": {
            "type": "boolean"
          },
          "started": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stopped": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "starting",
              "migrating",
              "errormigrating",
              "reduced",
              "error",
              "nodesoffline",
              "stopping",
              "offline",
              "provisioning",
              "restarting"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          }
        }
      },
      "tenant_status_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "running": {
            "type": "boolean"
          },
          "starting": {
            "type": "boolean"
          },
          "stopping": {
            "type": "boolean"
          },
          "migrating": {
            "type": "boolean"
          },
          "started": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stopped": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "online",
              "starting",
              "migrating",
              "errormigrating",
              "reduced",
              "error",
              "nodesoffline",
              "stopping",
              "offline",
              "provisioning",
              "restarting"
            ]
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          }
        }
      },
      "tenant_storage_post": {
        "required": [
          "tenant",
          "tier"
        ],
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "provisioned": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 0
          },
          "used": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "allocated": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "last_walk": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "tenant_storage_put": {
        "type": "object",
        "properties": {
          "tenant": {
            "type": "integer",
            "description": "alias type: parent_tenant",
            "format": "int64"
          },
          "provisioned": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 0
          },
          "used": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "allocated": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "last_walk": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "tenants_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "change_password": {
            "type": "boolean",
            "default": false
          },
          "expose_cloud_snapshots": {
            "type": "boolean",
            "default": true
          },
          "allow_branding": {
            "type": "boolean",
            "default": false
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "recipe_instance": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "is_snapshot": {
            "type": "boolean",
            "default": false
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "oidc_application": {
            "type": "string",
            "description": "alias type: row"
          },
          "ui_address": {
            "type": "string",
            "description": "alias type: row"
          },
          "ui_fqdn": {
            "type": "string",
            "description": "alias type: row"
          },
          "help_url": {
            "type": "string",
            "default": "default"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          },
          "isolate": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "tenants_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "change_password": {
            "type": "boolean",
            "default": false
          },
          "expose_cloud_snapshots": {
            "type": "boolean",
            "default": true
          },
          "allow_branding": {
            "type": "boolean",
            "default": false
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "url": {
            "pattern": "^(http|https)://.*",
            "type": "string",
            "description": "alias type: url"
          },
          "is_snapshot": {
            "type": "boolean",
            "default": false
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "oidc_application": {
            "type": "string",
            "description": "alias type: row"
          },
          "ui_address": {
            "type": "string",
            "description": "alias type: row"
          },
          "ui_fqdn": {
            "type": "string",
            "description": "alias type: row"
          },
          "help_url": {
            "type": "string",
            "default": "default"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "ui_branding_post": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": false
          },
          "customized": {
            "type": "boolean",
            "default": false
          },
          "logo_large": {
            "type": "string",
            "description": "alias type: text",
            "default": "logo.png",
            "enum": [
              "logo.png",
              "provider-logo.png",
              "provider-logo.jpg",
              "custom-logo.png",
              "custom-logo.jpg"
            ]
          },
          "logo_large_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "logo_small": {
            "type": "string",
            "description": "alias type: text",
            "default": "logo-sm.png",
            "enum": [
              "logo-sm.png",
              "provider-logo-sm.png",
              "provider-logo-sm.jpg",
              "custom-logo-sm.png",
              "custom-logo-sm.jpg"
            ]
          },
          "logo_small_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "logo_favicon": {
            "type": "string",
            "description": "alias type: text",
            "default": "favicon.ico",
            "enum": [
              "favicon.ico",
              "provider-favicon.ico",
              "custom-favicon.ico"
            ]
          },
          "logo_favicon_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "nav_bg": {
            "type": "string",
            "default": "@color-nav-bg"
          },
          "nav_color": {
            "type": "string",
            "default": "@color-nav-text"
          },
          "nav_hover_bg": {
            "type": "string",
            "default": "@color-hover"
          },
          "nav_hover_color": {
            "type": "string",
            "default": "@color-nav-text"
          },
          "nav_title_bg": {
            "type": "string",
            "default": "@color-nav-header"
          },
          "nav_title_color": {
            "type": "string",
            "default": "@color-nav-header-text"
          },
          "rmenu_title_bg": {
            "type": "string",
            "default": "@color-button"
          },
          "rmenu_title_color": {
            "type": "string",
            "default": "@color-button-text"
          },
          "header_bg": {
            "type": "string",
            "default": "@color-header"
          },
          "hover_color": {
            "type": "string",
            "default": "@color-hover"
          },
          "btn_bg": {
            "type": "string",
            "default": "@color-button"
          },
          "btn_color": {
            "type": "string",
            "default": "@color-button-text"
          },
          "btn_hover_bg": {
            "type": "string",
            "default": "@color-button-hover"
          },
          "btn_hover_color": {
            "type": "string",
            "default": "@color-button-hover-text"
          }
        }
      },
      "ui_branding_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": false
          },
          "customized": {
            "type": "boolean",
            "default": false
          },
          "logo_large": {
            "type": "string",
            "description": "alias type: text",
            "default": "logo.png",
            "enum": [
              "logo.png",
              "provider-logo.png",
              "provider-logo.jpg",
              "custom-logo.png",
              "custom-logo.jpg"
            ]
          },
          "logo_large_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "logo_small": {
            "type": "string",
            "description": "alias type: text",
            "default": "logo-sm.png",
            "enum": [
              "logo-sm.png",
              "provider-logo-sm.png",
              "provider-logo-sm.jpg",
              "custom-logo-sm.png",
              "custom-logo-sm.jpg"
            ]
          },
          "logo_small_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "logo_favicon": {
            "type": "string",
            "description": "alias type: text",
            "default": "favicon.ico",
            "enum": [
              "favicon.ico",
              "provider-favicon.ico",
              "custom-favicon.ico"
            ]
          },
          "logo_favicon_custom": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "nav_bg": {
            "type": "string",
            "default": "@color-nav-bg"
          },
          "nav_color": {
            "type": "string",
            "default": "@color-nav-text"
          },
          "nav_hover_bg": {
            "type": "string",
            "default": "@color-hover"
          },
          "nav_hover_color": {
            "type": "string",
            "default": "@color-nav-text"
          },
          "nav_title_bg": {
            "type": "string",
            "default": "@color-nav-header"
          },
          "nav_title_color": {
            "type": "string",
            "default": "@color-nav-header-text"
          },
          "rmenu_title_bg": {
            "type": "string",
            "default": "@color-button"
          },
          "rmenu_title_color": {
            "type": "string",
            "default": "@color-button-text"
          },
          "header_bg": {
            "type": "string",
            "default": "@color-header"
          },
          "hover_color": {
            "type": "string",
            "default": "@color-hover"
          },
          "btn_bg": {
            "type": "string",
            "default": "@color-button"
          },
          "btn_color": {
            "type": "string",
            "default": "@color-button-text"
          },
          "btn_hover_bg": {
            "type": "string",
            "default": "@color-button-hover"
          },
          "btn_hover_color": {
            "type": "string",
            "default": "@color-button-hover-text"
          }
        }
      },
      "update_actions_post": {
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh",
              "download",
              "install",
              "apply",
              "refresh_counts",
              "all"
            ]
          },
          "force": {
            "type": "boolean",
            "default": false
          },
          "package": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "update_actions_put": {
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "refresh",
              "download",
              "install",
              "apply",
              "refresh_counts",
              "all"
            ]
          },
          "force": {
            "type": "boolean",
            "default": false
          },
          "package": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "update_branches_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "update_branches_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "update_file_finish_post": {
        "required": [
          "file",
          "signature"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          }
        }
      },
      "update_file_finish_put": {
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          }
        }
      },
      "update_file_verify_post": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          }
        }
      },
      "update_file_verify_put": {
        "type": "object",
        "properties": {
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          }
        }
      },
      "update_files_post": {
        "required": [
          "name",
          "source_package"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+[a-zA-Z0-9_ .-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "source_package": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "allocated_bytes": {
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string",
            "default": ""
          }
        }
      },
      "update_files_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]+[a-zA-Z0-9_ .-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "source_package": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "allocated_bytes": {
            "type": "integer",
            "description": "alias type: fileallocated",
            "format": "int64"
          },
          "used_bytes": {
            "type": "integer",
            "description": "alias type: fileused",
            "format": "int64"
          },
          "filesize": {
            "type": "integer",
            "description": "alias type: filesize",
            "format": "int64"
          }
        }
      },
      "update_logs_post": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: text",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical"
            ]
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "object_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          }
        }
      },
      "update_logs_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: text",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical"
            ]
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "object_name": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "update_packages_post": {
        "required": [
          "branch",
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "package": {
            "maxLength": 65536,
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "ybpkg",
            "enum": [
              "ybpkg"
            ]
          },
          "files": {
            "type": "object",
            "properties": {}
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "update_packages_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "package": {
            "maxLength": 65536,
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "ybpkg",
            "enum": [
              "ybpkg"
            ]
          },
          "files": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "update_settings_post": {
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text",
            "default": "Update Manager"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "auto_refresh": {
            "type": "boolean",
            "default": true
          },
          "auto_update": {
            "type": "boolean",
            "default": false
          },
          "auto_reboot": {
            "type": "boolean",
            "default": false
          },
          "update_time": {
            "pattern": "^(([01][0-9])|(2[0-3])):?[0-5][0-9]$",
            "type": "string",
            "description": "alias type: text",
            "default": "00:00"
          },
          "max_vsan_usage": {
            "maximum": 100,
            "minimum": 10,
            "type": "integer",
            "format": "int32",
            "default": 80
          },
          "warm_reboot": {
            "type": "boolean",
            "default": false
          },
          "multi_cluster_update": {
            "type": "boolean",
            "default": true
          },
          "snapshot_cloud_on_update": {
            "type": "boolean",
            "default": false
          },
          "snapshot_cloud_expire_seconds": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 21600
          },
          "installed": {
            "type": "boolean",
            "default": false
          },
          "release_notes_url": {
            "type": "string"
          },
          "anonymize_statistics": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "update_settings_put": {
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "file": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text",
            "default": "Update Manager"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "auto_refresh": {
            "type": "boolean",
            "default": true
          },
          "auto_update": {
            "type": "boolean",
            "default": false
          },
          "auto_reboot": {
            "type": "boolean",
            "default": false
          },
          "update_time": {
            "pattern": "^(([01][0-9])|(2[0-3])):?[0-5][0-9]$",
            "type": "string",
            "description": "alias type: text",
            "default": "00:00"
          },
          "max_vsan_usage": {
            "maximum": 100,
            "minimum": 10,
            "type": "integer",
            "format": "int32",
            "default": 80
          },
          "warm_reboot": {
            "type": "boolean",
            "default": false
          },
          "multi_cluster_update": {
            "type": "boolean",
            "default": true
          },
          "snapshot_cloud_on_update": {
            "type": "boolean",
            "default": false
          },
          "snapshot_cloud_expire_seconds": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 21600
          },
          "anonymize_statistics": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "update_source_packages_post": {
        "required": [
          "branch",
          "name",
          "source",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "ybpkg",
            "enum": [
              "ybpkg"
            ]
          },
          "signature": {
            "maxLength": 8192,
            "type": "string"
          }
        }
      },
      "update_source_packages_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "branch": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "ybpkg",
            "enum": [
              "ybpkg"
            ]
          }
        }
      },
      "update_source_status_post": {
        "required": [
          "source"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "refreshing",
              "downloading",
              "installing",
              "applying",
              "idle",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "nodes_updated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "update_source_status_put": {
        "type": "object",
        "properties": {
          "source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "refreshing",
              "downloading",
              "installing",
              "applying",
              "idle",
              "error"
            ]
          },
          "info": {
            "type": "string",
            "description": "alias type: text"
          },
          "nodes_updated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "last_update": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "update_sources_post": {
        "required": [
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "type": "string",
            "description": "alias type: text"
          },
          "last_updated": {
            "type": "number",
            "format": "double"
          },
          "last_refreshed": {
            "type": "number",
            "format": "double"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "update_sources_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "url": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "password": {
            "maxLength": 256,
            "type": "string",
            "description": "alias type: text"
          },
          "last_updated": {
            "type": "number",
            "format": "double"
          },
          "last_refreshed": {
            "type": "number",
            "format": "double"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "user_post": {
        "required": [
          "request"
        ],
        "type": "object",
        "properties": {
          "request": {
            "type": "string",
            "description": "alias type: text"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "key": {
            "type": "string",
            "description": "alias type: text"
          },
          "change_password": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text"
          },
          "cloud_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "password_complexity": {
            "type": "string",
            "description": "alias type: text"
          },
          "timezone": {
            "type": "string",
            "description": "alias type: text"
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "two_factor_authentication": {
            "type": "string",
            "description": "alias type: text"
          },
          "email": {
            "type": "string",
            "description": "alias type: text"
          },
          "two_factor_type": {
            "type": "string"
          }
        }
      },
      "user_put": {
        "type": "object",
        "properties": {
          "request": {
            "type": "string",
            "description": "alias type: text"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "key": {
            "type": "string",
            "description": "alias type: text"
          },
          "change_password": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text"
          },
          "cloud_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "password_complexity": {
            "type": "string",
            "description": "alias type: text"
          },
          "timezone": {
            "type": "string",
            "description": "alias type: text"
          },
          "yb_version": {
            "type": "string",
            "description": "alias type: text"
          },
          "two_factor_authentication": {
            "type": "string",
            "description": "alias type: text"
          },
          "email": {
            "type": "string",
            "description": "alias type: text"
          },
          "two_factor_type": {
            "type": "string"
          }
        }
      },
      "user_actions_post": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "send_code",
              "verify_code",
              "verfiy_uuid",
              "authorize_login",
              "deny_login"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "user_actions_put": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "send_code",
              "verify_code",
              "verfiy_uuid",
              "authorize_login",
              "deny_login"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "user_devices_post": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "platform": {
            "type": "string",
            "description": "alias type: text"
          },
          "user_agent": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "code": {
            "type": "string",
            "description": "alias type: text"
          },
          "authenticated_on": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_authentication": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "user_devices_put": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "platform": {
            "type": "string",
            "description": "alias type: text"
          },
          "user_agent": {
            "type": "string",
            "description": "alias type: text"
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "code": {
            "type": "string",
            "description": "alias type: text"
          },
          "authenticated_on": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_authentication": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "user_logs_post": {
        "required": [
          "parent_user"
        ],
        "type": "object",
        "properties": {
          "parent_user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "user_logs_put": {
        "type": "object",
        "properties": {
          "parent_user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "user_messages_post": {
        "required": [
          "message",
          "user"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "integer",
            "description": "alias type: parent_message",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "owner": {
            "type": "string",
            "description": "alias type: text"
          },
          "owner_display": {
            "type": "string",
            "description": "alias type: text"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "acknowledged": {
            "type": "boolean"
          }
        }
      },
      "user_messages_put": {
        "type": "object",
        "properties": {
          "message": {
            "type": "integer",
            "description": "alias type: parent_message",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: text"
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "owner": {
            "type": "string",
            "description": "alias type: text"
          },
          "owner_display": {
            "type": "string",
            "description": "alias type: text"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "acknowledged": {
            "type": "boolean"
          }
        }
      },
      "user_settings_post": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "description": "alias type: parent_user",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "results_per_page": {
            "maximum": 1000,
            "minimum": 10,
            "type": "integer",
            "format": "int32",
            "default": 50
          },
          "time_format": {
            "type": "string",
            "default": "%b %d, %Y %H:%M:%S"
          },
          "temperature_display": {
            "type": "string",
            "description": "alias type: text",
            "default": "Both",
            "enum": [
              "C",
              "F",
              "Both"
            ]
          },
          "transfer_rate_display": {
            "type": "string",
            "description": "alias type: text",
            "default": "bytes",
            "enum": [
              "bits",
              "bytes"
            ]
          }
        }
      },
      "user_settings_put": {
        "type": "object",
        "properties": {
          "results_per_page": {
            "maximum": 1000,
            "minimum": 10,
            "type": "integer",
            "format": "int32",
            "default": 50
          },
          "time_format": {
            "type": "string",
            "default": "%b %d, %Y %H:%M:%S"
          },
          "temperature_display": {
            "type": "string",
            "description": "alias type: text",
            "default": "Both",
            "enum": [
              "C",
              "F",
              "Both"
            ]
          },
          "transfer_rate_display": {
            "type": "string",
            "description": "alias type: text",
            "default": "bytes",
            "enum": [
              "bits",
              "bytes"
            ]
          }
        }
      },
      "users_post": {
        "required": [
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "auth_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "remote_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "normal",
            "enum": [
              "normal",
              "api",
              "vdi",
              "site_sync",
              "site_user"
            ]
          },
          "password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "change_password": {
            "type": "boolean",
            "default": false
          },
          "physical_access": {
            "type": "boolean",
            "default": false
          },
          "ssh_keys": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "last_forgot_password": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "last_forgot_username": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "credential": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "two_factor_authentication": {
            "type": "boolean"
          },
          "two_factor_type": {
            "type": "string",
            "default": "email",
            "enum": [
              "email",
              "authenticator"
            ]
          },
          "two_factor_setup_next_login": {
            "type": "boolean",
            "default": false
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "users_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "remote_name": {
            "type": "string",
            "description": "alias type: text"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "change_password": {
            "type": "boolean",
            "default": false
          },
          "physical_access": {
            "type": "boolean",
            "default": false
          },
          "ssh_keys": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "failed_attempts": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "account_locked": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "last_login": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "last_forgot_password": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "last_forgot_username": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32",
            "default": 0
          },
          "two_factor_authentication": {
            "type": "boolean"
          },
          "two_factor_type": {
            "type": "string",
            "default": "email",
            "enum": [
              "email",
              "authenticator"
            ]
          },
          "two_factor_setup_next_login": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "v3_vm_import_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "config": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "v3_vm_import_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "config": {
            "type": "object",
            "properties": {}
          },
          "import": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "vm_actions_post": {
        "required": [
          "action",
          "vm"
        ],
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "migrate",
              "kill",
              "hibernate",
              "changecd",
              "changenet",
              "paste",
              "clone",
              "restore",
              "recover_cloudsnapshot",
              "hotplugdrive",
              "hotplugnic",
              "quiesce_snapshot",
              "execute",
              "fsync_strict",
              "erase_drive"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_actions_put": {
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "migrate",
              "kill",
              "hibernate",
              "changecd",
              "changenet",
              "paste",
              "clone",
              "restore",
              "recover_cloudsnapshot",
              "hotplugdrive",
              "hotplugnic",
              "quiesce_snapshot",
              "execute",
              "fsync_strict",
              "erase_drive"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_console_actions_post": {
        "required": [
          "action",
          "vm"
        ],
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "reset",
              "changecd",
              "paste",
              "newchatmsg",
              "delchatmsg"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_console_actions_put": {
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "reset",
              "changecd",
              "paste",
              "newchatmsg",
              "delchatmsg"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_favorites_post": {
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "vm_import_logs_post": {
        "type": "object",
        "properties": {
          "vm_import": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_import_logs_put": {
        "type": "object",
        "properties": {
          "vm_import": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_imports_post": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "parent_id": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          },
          "uuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "file": {
            "type": "string",
            "description": "alias type: row"
          },
          "shared_object": {
            "type": "string",
            "description": "alias type: row"
          },
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "volume_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "volume_selections": {
            "type": "string",
            "description": "alias type: text"
          },
          "vmware_container": {
            "type": "string",
            "description": "alias type: row"
          },
          "backup_job": {
            "type": "integer",
            "format": "int32"
          },
          "import_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "preserve_macs": {
            "type": "boolean",
            "default": true
          },
          "preserve_drive_format": {
            "type": "boolean",
            "default": false
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "importing": {
            "type": "boolean",
            "default": false
          },
          "aborted": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "initializing",
            "enum": [
              "initializing",
              "importing",
              "complete",
              "aborted",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "volume_sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "failed_drive_count": {
            "type": "number",
            "format": "double"
          },
          "cleanup_on_delete": {
            "type": "boolean",
            "default": false
          },
          "no_optical_drives": {
            "type": "boolean",
            "default": false
          },
          "override_drive_interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "virtio",
              "ide",
              "ahci",
              "lsi53c895a",
              "megasas",
              "megasas-gen2",
              "mptsas1068",
              "virtio-scsi",
              "virtio-scsi-dedicated",
              "usb"
            ]
          },
          "override_nic_interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "virtio",
              "e1000",
              "e1000e",
              "rtl8139",
              "pcnet",
              "igb",
              "vmxnet3"
            ]
          }
        }
      },
      "vm_imports_put": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "parent_id": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          },
          "uuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "volume_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "volume_selections": {
            "type": "string",
            "description": "alias type: text"
          },
          "backup_job": {
            "type": "integer",
            "format": "int32"
          },
          "import_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "preserve_macs": {
            "type": "boolean",
            "default": true
          },
          "preserve_drive_format": {
            "type": "boolean",
            "default": false
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "importing": {
            "type": "boolean",
            "default": false
          },
          "aborted": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "initializing",
            "enum": [
              "initializing",
              "importing",
              "complete",
              "aborted",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "volume_sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "retention": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "failed_drive_count": {
            "type": "number",
            "format": "double"
          },
          "cleanup_on_delete": {
            "type": "boolean",
            "default": false
          },
          "no_optical_drives": {
            "type": "boolean",
            "default": false
          },
          "override_drive_interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "virtio",
              "ide",
              "ahci",
              "lsi53c895a",
              "megasas",
              "megasas-gen2",
              "mptsas1068",
              "virtio-scsi",
              "virtio-scsi-dedicated",
              "usb"
            ]
          },
          "override_nic_interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "virtio",
              "e1000",
              "e1000e",
              "rtl8139",
              "pcnet",
              "igb",
              "vmxnet3"
            ]
          }
        }
      },
      "vm_paste_configs_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "hold_time": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 1
          },
          "num_keys": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 60
          },
          "key_maps": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_paste_configs_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "hold_time": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 1
          },
          "num_keys": {
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 60
          },
          "key_maps": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_recipe_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "vm_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'vm_recipes'",
            "x-yb-table-reference": "vm_recipes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "clone",
              "download",
              "remove",
              "republish"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_recipe_actions_put": {
        "type": "object",
        "properties": {
          "vm_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'vm_recipes'",
            "x-yb-table-reference": "vm_recipes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "clone",
              "download",
              "remove",
              "republish"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vm_recipe_instances_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'vm_recipes'",
            "x-yb-table-reference": "vm_recipes"
          },
          "vm": {
            "type": "string",
            "description": "alias type: row"
          },
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "build": {
            "type": "integer",
            "format": "int32"
          },
          "answers": {
            "type": "object",
            "properties": {}
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "update": {
            "type": "boolean"
          },
          "verify": {
            "type": "boolean"
          },
          "simulate": {
            "type": "boolean"
          },
          "auto_update": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vm_recipe_instances_put": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "alias type: text"
          },
          "build": {
            "type": "integer",
            "format": "int32"
          },
          "answers": {
            "type": "object",
            "properties": {}
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "update": {
            "type": "boolean"
          },
          "verify": {
            "type": "boolean"
          },
          "simulate": {
            "type": "boolean"
          },
          "auto_update": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "vm_recipe_logs_post": {
        "type": "object",
        "properties": {
          "vm_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'vm_recipes'",
            "x-yb-table-reference": "vm_recipes"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_recipe_logs_put": {
        "type": "object",
        "properties": {
          "vm_recipe": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'vm_recipes'",
            "x-yb-table-reference": "vm_recipes"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_recipes_post": {
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "icon": {
            "pattern": "^[a-z-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "assets": {
            "type": "object",
            "properties": {}
          },
          "vm": {
            "type": "string",
            "description": "alias type: row"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "update_available": {
            "type": "boolean",
            "default": false
          },
          "needs_republish": {
            "type": "boolean",
            "default": false
          },
          "version": {
            "type": "string",
            "description": "alias type: text",
            "default": "1.0.0"
          },
          "build": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "dependencies": {
            "type": "string",
            "description": "alias type: package_dependencies"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "question_assets": {
            "type": "boolean",
            "default": false
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "vm_recipes_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "icon": {
            "pattern": "^[a-z-]*$",
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "catalog": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string",
            "description": "row reference to table 'catalogs'",
            "x-yb-table-reference": "catalogs"
          },
          "vm_snapshot": {
            "type": "string",
            "description": "alias type: row"
          },
          "assets": {
            "type": "object",
            "properties": {}
          },
          "vm": {
            "type": "string",
            "description": "alias type: row"
          },
          "downloaded": {
            "type": "boolean",
            "default": false
          },
          "update_available": {
            "type": "boolean",
            "default": false
          },
          "needs_republish": {
            "type": "boolean",
            "default": false
          },
          "version": {
            "type": "string",
            "description": "alias type: text",
            "default": "1.0.0"
          },
          "build": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "dependencies": {
            "type": "string",
            "description": "alias type: package_dependencies"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "question_assets": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "vm_service_antivirus_post": {
        "required": [
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "max_recursion": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "database_private_mirror": {
            "type": "string"
          },
          "database_location": {
            "type": "string",
            "description": "alias type: text",
            "default": "/var/lib/clamav"
          },
          "database_updates_enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "vm_service_antivirus_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "max_recursion": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "database_private_mirror": {
            "type": "string"
          },
          "database_location": {
            "type": "string",
            "description": "alias type: text",
            "default": "/var/lib/clamav"
          },
          "database_updates_enabled": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "vm_service_cifs_post": {
        "required": [
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "map_to_guest": {
            "type": "string",
            "description": "alias type: text",
            "default": "bad user",
            "enum": [
              "never",
              "bad user",
              "bad password",
              "bad uid"
            ]
          },
          "realm": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "workgroup": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "server_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "MEMBER",
              "BDC",
              "PDC"
            ]
          },
          "ad_user": {
            "type": "string"
          },
          "ad_upn": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_ou": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_machinepass": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "ad_osname": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_osver": {
            "type": "string",
            "description": "alias type: text"
          },
          "extended_acl_support": {
            "type": "boolean",
            "default": true
          },
          "server_min_protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "LANMAN1",
              "LANMAN2",
              "NT1",
              "SMB2",
              "SMB2_02",
              "SMB2_10",
              "SMB2_22",
              "SMB2_24",
              "SMB3",
              "SMB3_00",
              "SMB3_02",
              "SMB3_10",
              "SMB3_11"
            ]
          },
          "advanced": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vm_service_cifs_put": {
        "type": "object",
        "properties": {
          "map_to_guest": {
            "type": "string",
            "description": "alias type: text",
            "default": "bad user",
            "enum": [
              "never",
              "bad user",
              "bad password",
              "bad uid"
            ]
          },
          "realm": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "workgroup": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "server_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "default",
            "enum": [
              "default",
              "MEMBER",
              "BDC",
              "PDC"
            ]
          },
          "ad_user": {
            "type": "string"
          },
          "ad_upn": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_ou": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_machinepass": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "ad_osname": {
            "type": "string",
            "description": "alias type: text"
          },
          "ad_osver": {
            "type": "string",
            "description": "alias type: text"
          },
          "extended_acl_support": {
            "type": "boolean",
            "default": true
          },
          "server_min_protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "LANMAN1",
              "LANMAN2",
              "NT1",
              "SMB2",
              "SMB2_02",
              "SMB2_10",
              "SMB2_22",
              "SMB2_24",
              "SMB3",
              "SMB3_00",
              "SMB3_02",
              "SMB3_10",
              "SMB3_11"
            ]
          },
          "advanced": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "ad_status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "online",
              "joining",
              "joined",
              "error"
            ]
          },
          "ad_status_info": {
            "type": "string"
          }
        }
      },
      "vm_service_nfs_post": {
        "required": [
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "enable_nfsv4": {
            "type": "boolean",
            "default": false
          },
          "allowed_hosts": {
            "type": "string",
            "description": "alias type: text"
          },
          "fsid": {
            "type": "string",
            "description": "alias type: text",
            "default": "0"
          },
          "anonuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anongid": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_acl": {
            "type": "boolean"
          },
          "insecure": {
            "type": "boolean"
          },
          "async": {
            "type": "boolean"
          },
          "squash": {
            "type": "string",
            "description": "alias type: text",
            "default": "root_squash",
            "enum": [
              "root_squash",
              "all_squash",
              "no_root_squash"
            ]
          },
          "data_access": {
            "type": "string",
            "description": "alias type: text",
            "default": "rw",
            "enum": [
              "ro",
              "rw"
            ]
          },
          "allow_all": {
            "type": "boolean"
          }
        }
      },
      "vm_service_nfs_put": {
        "type": "object",
        "properties": {
          "enable_nfsv4": {
            "type": "boolean",
            "default": false
          },
          "allowed_hosts": {
            "type": "string",
            "description": "alias type: text"
          },
          "fsid": {
            "type": "string",
            "description": "alias type: text",
            "default": "0"
          },
          "anonuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anongid": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_acl": {
            "type": "boolean"
          },
          "insecure": {
            "type": "boolean"
          },
          "async": {
            "type": "boolean"
          },
          "squash": {
            "type": "string",
            "description": "alias type: text",
            "default": "root_squash",
            "enum": [
              "root_squash",
              "all_squash",
              "no_root_squash"
            ]
          },
          "data_access": {
            "type": "string",
            "description": "alias type: text",
            "default": "rw",
            "enum": [
              "ro",
              "rw"
            ]
          },
          "allow_all": {
            "type": "boolean"
          }
        }
      },
      "vm_service_queries_post": {
        "required": [
          "query",
          "vm_service"
        ],
        "type": "object",
        "properties": {
          "vm_service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "ntp",
              "date",
              "winbind",
              "samba",
              "services",
              "arp",
              "arp-scan",
              "whatsmyip",
              "users",
              "groups",
              "nfs",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "vm_service_queries_put": {
        "type": "object",
        "properties": {
          "vm_service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "ntp",
              "date",
              "winbind",
              "samba",
              "services",
              "arp",
              "arp-scan",
              "whatsmyip",
              "users",
              "groups",
              "nfs",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vm_service_user_logs_post": {
        "type": "object",
        "properties": {
          "vm_service_user": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_service_users'",
            "x-yb-table-reference": "vm_service_users"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_service_user_logs_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vm_service_user_status_post": {
        "type": "object",
        "properties": {
          "vm_service_user": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_service_users'",
            "x-yb-table-reference": "vm_service_users"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "online",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "user_sid": {
            "type": "string"
          },
          "group_sid": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vm_service_user_status_put": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "online",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "user_sid": {
            "type": "string"
          },
          "group_sid": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          }
        }
      },
      "vm_service_users_post": {
        "required": [
          "name",
          "password",
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[a-zA-Z][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "alias type: objectname"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "home_share": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_cifs_shares'",
            "x-yb-table-reference": "volume_cifs_shares"
          },
          "home_drive": {
            "pattern": "^[a-zA-Z]?$",
            "type": "string",
            "description": "alias type: text"
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          }
        }
      },
      "vm_service_users_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "home_share": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_cifs_shares'",
            "x-yb-table-reference": "volume_cifs_shares"
          },
          "home_drive": {
            "pattern": "^[a-zA-Z]?$",
            "type": "string",
            "description": "alias type: text"
          },
          "displayname": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          },
          "password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          }
        }
      },
      "vm_services_post": {
        "type": "object",
        "properties": {
          "vm": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_imports": {
            "maximum": 200,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          },
          "max_syncs": {
            "maximum": 200,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "disable_swap": {
            "type": "boolean",
            "default": false
          },
          "read_ahead_kb_default": {
            "type": "string",
            "description": "alias type: text",
            "default": "0",
            "enum": [
              "0",
              "64",
              "128",
              "256",
              "512",
              "1024",
              "2048",
              "4096"
            ]
          }
        }
      },
      "vm_services_put": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "max_imports": {
            "maximum": 200,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          },
          "max_syncs": {
            "maximum": 200,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "default": 0
          },
          "disable_swap": {
            "type": "boolean",
            "default": false
          },
          "read_ahead_kb_default": {
            "type": "string",
            "description": "alias type: text",
            "default": "0",
            "enum": [
              "0",
              "64",
              "128",
              "256",
              "512",
              "1024",
              "2048",
              "4096"
            ]
          }
        }
      },
      "vsan_queries_post": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "gethighusagerate",
              "getjournalstatus",
              "cancelintegcheck",
              "clearrefcounts",
              "du",
              "getcacheinfo",
              "getclusterrates",
              "getclusterusage",
              "getdeviceinteg",
              "getdevicelist",
              "getdevicestatus",
              "getdeviceusage",
              "getfuseinfo",
              "getintegcheckstatus",
              "getnodeinfo",
              "getnodelist",
              "getrepairstatus",
              "getrunningconf",
              "getsynclist",
              "gettiernodemaps",
              "gettierdevicemaps",
              "gettierstatus",
              "integcheck",
              "integcheckdevice",
              "stat",
              "findinode",
              "getclients",
              "getcurmaster",
              "getreadahead",
              "getpathfromino",
              "getusage",
              "getvolusage",
              "manualadddevice",
              "getnodedevicelist"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "vsan_queries_put": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "gethighusagerate",
              "getjournalstatus",
              "cancelintegcheck",
              "clearrefcounts",
              "du",
              "getcacheinfo",
              "getclusterrates",
              "getclusterusage",
              "getdeviceinteg",
              "getdevicelist",
              "getdevicestatus",
              "getdeviceusage",
              "getfuseinfo",
              "getintegcheckstatus",
              "getnodeinfo",
              "getnodelist",
              "getrepairstatus",
              "getrunningconf",
              "getsynclist",
              "gettiernodemaps",
              "gettierdevicemaps",
              "gettierstatus",
              "integcheck",
              "integcheckdevice",
              "stat",
              "findinode",
              "getclients",
              "getcurmaster",
              "getreadahead",
              "getpathfromino",
              "getusage",
              "getvolusage",
              "manualadddevice",
              "getnodedevicelist"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vmware_container_actions_post": {
        "required": [
          "action",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "migrate",
              "kill",
              "execute",
              "changenet"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_actions_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "migrate",
              "kill",
              "execute",
              "changenet"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_api_post": {
        "required": [
          "command",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "path": {
            "type": "string",
            "description": "alias type: text"
          },
          "data": {
            "type": "object",
            "properties": {}
          },
          "fields": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "response_code": {
            "type": "number",
            "format": "double"
          },
          "response": {
            "type": "object",
            "properties": {}
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vmware_container_api_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "get",
              "post",
              "put",
              "delete"
            ]
          },
          "path": {
            "type": "string",
            "description": "alias type: text"
          },
          "data": {
            "type": "object",
            "properties": {}
          },
          "fields": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "sort": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "response_code": {
            "type": "number",
            "format": "double"
          },
          "response": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vmware_container_backup_job_actions_post": {
        "required": [
          "action",
          "params",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_backup_job_actions_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_queries_post": {
        "required": [
          "query",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "arp",
              "arp-scan",
              "whatsmyip",
              "dhcp_release_renew",
              "tcp_connect",
              "vmware_debug_mode"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "vmware_container_queries_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "arp",
              "arp-scan",
              "whatsmyip",
              "dhcp_release_renew",
              "tcp_connect",
              "vmware_debug_mode"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vmware_container_restore_job_actions_post": {
        "required": [
          "action",
          "params",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_restore_job_actions_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "import"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vmware_container_storage_post": {
        "required": [
          "tier",
          "vmware_container"
        ],
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: parent_vmware_container",
            "format": "int64"
          },
          "tier": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "row reference to table 'storage_tiers'",
            "format": "int32",
            "x-yb-table-reference": "storage_tiers"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "provisioned": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 0
          },
          "used": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "allocated": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "vmware_container_storage_put": {
        "type": "object",
        "properties": {
          "vmware_container": {
            "type": "integer",
            "description": "alias type: parent_vmware_container",
            "format": "int64"
          },
          "provisioned": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 0
          },
          "used": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "allocated": {
            "type": "integer",
            "format": "int64",
            "default": 0
          }
        }
      },
      "vmware_containers_post": {
        "required": [
          "name",
          "vsphere_host",
          "vsphere_password",
          "vsphere_user"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "cpu_cores": {
            "maximum": 128,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 2
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 256,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 2048
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "vsphere_host": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "vsphere_port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 443
          },
          "vsphere_user": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "vsphere_password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "vsphere_nfc_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 902
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "vmware_containers_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "cpu_cores": {
            "maximum": 128,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 2
          },
          "ram": {
            "maximum": 1048576,
            "minimum": 256,
            "type": "integer",
            "description": "alias type: ram",
            "format": "int32",
            "default": 2048
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "meta": {
            "type": "object",
            "properties": {}
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "alias type: uuid"
          },
          "vsphere_host": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "vsphere_port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 443
          },
          "vsphere_user": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "vsphere_password": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "alias type: password"
          },
          "vsphere_nfc_port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 902
          },
          "allow_insecure": {
            "type": "boolean",
            "default": false
          },
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "vnet_actions_post": {
        "required": [
          "action",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "refresh",
              "kill",
              "migrate",
              "execute",
              "clear_statistics"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vnet_actions_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "poweron",
              "poweroff",
              "reset",
              "refresh",
              "kill",
              "migrate",
              "execute",
              "clear_statistics"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vnet_addresses_post": {
        "required": [
          "type",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "mac": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "dynamic",
              "static",
              "ipalias",
              "proxy",
              "virtual"
            ]
          },
          "hostname": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "expiration": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "vendor": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_addresses_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "mac": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "dynamic",
              "static",
              "ipalias",
              "proxy",
              "virtual"
            ]
          },
          "hostname": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "expiration": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "vendor": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_bgp_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          }
        }
      },
      "vnet_bgp_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          }
        }
      },
      "vnet_bgp_interface_commands_post": {
        "required": [
          "bgp_interface",
          "command",
          "params"
        ],
        "type": "object",
        "properties": {
          "bgp_interface": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "bandwidth",
              "description",
              "ip",
              "link-detect",
              "mpls-te",
              "multicast",
              "no",
              "ospf"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_interface_commands_put": {
        "type": "object",
        "properties": {
          "bgp_interface": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "bandwidth",
              "description",
              "ip",
              "link-detect",
              "mpls-te",
              "multicast",
              "no",
              "ospf"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_interfaces_post": {
        "required": [
          "bgp",
          "ipaddress",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "network": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "mtu": {
            "maximum": 65536,
            "minimum": 1000,
            "type": "integer",
            "format": "int32",
            "default": 9000
          },
          "layer2_type": {
            "type": "string",
            "default": "vlan",
            "enum": [
              "vlan",
              "none"
            ]
          },
          "layer2_id": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "interface_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "interface_vnet_name": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "vnet_bgp_interfaces_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "network": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "mtu": {
            "maximum": 65536,
            "minimum": 1000,
            "type": "integer",
            "format": "int32",
            "default": 9000
          },
          "layer2_type": {
            "type": "string",
            "default": "vlan",
            "enum": [
              "vlan",
              "none"
            ]
          },
          "layer2_id": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "interface_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "interface_vnet_name": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "vnet_bgp_ip_post": {
        "required": [
          "bgp",
          "command",
          "params"
        ],
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "as-path",
              "community-list",
              "extcommunity-list",
              "forwarding",
              "mroute",
              "multicast",
              "multicast-routing",
              "ospf",
              "prefix-list",
              "protocol",
              "route",
              "ssmpingd"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_ip_put": {
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "as-path",
              "community-list",
              "extcommunity-list",
              "forwarding",
              "mroute",
              "multicast",
              "multicast-routing",
              "ospf",
              "prefix-list",
              "protocol",
              "route",
              "ssmpingd"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_routemap_commands_post": {
        "required": [
          "bgp_routemap",
          "command",
          "params"
        ],
        "type": "object",
        "properties": {
          "bgp_routemap": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "call",
              "continue",
              "description",
              "match",
              "on",
              "set"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_routemap_commands_put": {
        "type": "object",
        "properties": {
          "bgp_routemap": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "call",
              "continue",
              "description",
              "match",
              "on",
              "set"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_routemaps_post": {
        "required": [
          "bgp",
          "sequence",
          "tag"
        ],
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "tag": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "permit": {
            "type": "boolean",
            "default": true
          },
          "sequence": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_bgp_routemaps_put": {
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "tag": {
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string",
            "description": "alias type: text"
          },
          "permit": {
            "type": "boolean",
            "default": true
          },
          "sequence": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_bgp_router_commands_post": {
        "required": [
          "bgp_router",
          "command",
          "params"
        ],
        "type": "object",
        "properties": {
          "bgp_router": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "no": {
            "type": "boolean",
            "default": false
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "aggregate-address",
              "bgp",
              "bmp",
              "coalesce-time",
              "distance",
              "maximum-paths",
              "neighbor",
              "network",
              "read-quanta",
              "redistribute",
              "segment-routing",
              "table-map",
              "timers",
              "update-delay",
              "vnc",
              "vrf-policy",
              "write-quanta"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_router_commands_put": {
        "type": "object",
        "properties": {
          "bgp_router": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "no": {
            "type": "boolean",
            "default": false
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "aggregate-address",
              "bgp",
              "bmp",
              "coalesce-time",
              "distance",
              "maximum-paths",
              "neighbor",
              "network",
              "read-quanta",
              "redistribute",
              "segment-routing",
              "table-map",
              "timers",
              "update-delay",
              "vnc",
              "vrf-policy",
              "write-quanta"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bgp_routers_post": {
        "required": [
          "asn",
          "bgp"
        ],
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "asn": {
            "maximum": 4294967295,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_bgp_routers_put": {
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "asn": {
            "maximum": 4294967295,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_bond_interfaces_post": {
        "required": [
          "child_vnet",
          "parent_vnet"
        ],
        "type": "object",
        "properties": {
          "parent_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "child_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "vnet_bonds_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "balance-rr",
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "802.3ad",
              "balance-tlb",
              "balance-alb"
            ]
          },
          "miimon": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "downdelay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "lp_interval": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "updelay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "resend_igmp": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "min_links": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "num_grat_arp": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "packets_per_slave": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ad_user_port_key": {
            "maximum": 1023,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "ad_actor_sys_prio": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ad_actor_system": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "use_carrier": {
            "type": "boolean",
            "default": false
          },
          "tlb_dynamic_lb": {
            "type": "boolean",
            "default": true
          },
          "all_slaves_active": {
            "type": "boolean",
            "default": false
          },
          "arp_validate": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "active",
              "backup",
              "all"
            ]
          },
          "arp_all_targets": {
            "type": "string",
            "description": "alias type: text",
            "default": "any",
            "enum": [
              "any",
              "all"
            ]
          },
          "arp_interval": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "arp_ip_target": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)(,(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0))*$",
            "type": "string",
            "description": "alias type: text"
          },
          "primary_reselect": {
            "type": "string",
            "description": "alias type: text",
            "default": "always",
            "enum": [
              "always",
              "better",
              "failure"
            ]
          },
          "fail_over_mac": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "active",
              "follow"
            ]
          },
          "xmit_hash_policy": {
            "type": "string",
            "description": "alias type: text",
            "default": "layer2",
            "enum": [
              "layer2",
              "layer2+3",
              "layer3+4",
              "encap2+3",
              "encap3+4"
            ]
          },
          "lacp_rate": {
            "type": "string",
            "description": "alias type: text",
            "default": "slow",
            "enum": [
              "slow",
              "fast"
            ]
          },
          "ad_select": {
            "type": "string",
            "description": "alias type: text",
            "default": "stable",
            "enum": [
              "stable",
              "bandwidth",
              "count"
            ]
          },
          "generated_config": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_bonds_put": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "balance-rr",
            "enum": [
              "balance-rr",
              "active-backup",
              "balance-xor",
              "broadcast",
              "802.3ad",
              "balance-tlb",
              "balance-alb"
            ]
          },
          "miimon": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "downdelay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "lp_interval": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "updelay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "resend_igmp": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "min_links": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "num_grat_arp": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "packets_per_slave": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ad_user_port_key": {
            "maximum": 1023,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "ad_actor_sys_prio": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "ad_actor_system": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "use_carrier": {
            "type": "boolean",
            "default": false
          },
          "tlb_dynamic_lb": {
            "type": "boolean",
            "default": true
          },
          "all_slaves_active": {
            "type": "boolean",
            "default": false
          },
          "arp_validate": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "active",
              "backup",
              "all"
            ]
          },
          "arp_all_targets": {
            "type": "string",
            "description": "alias type: text",
            "default": "any",
            "enum": [
              "any",
              "all"
            ]
          },
          "arp_interval": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "arp_ip_target": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)(,(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0)\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?|0))*$",
            "type": "string",
            "description": "alias type: text"
          },
          "primary_reselect": {
            "type": "string",
            "description": "alias type: text",
            "default": "always",
            "enum": [
              "always",
              "better",
              "failure"
            ]
          },
          "fail_over_mac": {
            "type": "string",
            "description": "alias type: text",
            "default": "none",
            "enum": [
              "none",
              "active",
              "follow"
            ]
          },
          "xmit_hash_policy": {
            "type": "string",
            "description": "alias type: text",
            "default": "layer2",
            "enum": [
              "layer2",
              "layer2+3",
              "layer3+4",
              "encap2+3",
              "encap3+4"
            ]
          },
          "lacp_rate": {
            "type": "string",
            "description": "alias type: text",
            "default": "slow",
            "enum": [
              "slow",
              "fast"
            ]
          },
          "ad_select": {
            "type": "string",
            "description": "alias type: text",
            "default": "stable",
            "enum": [
              "stable",
              "bandwidth",
              "count"
            ]
          },
          "generated_config": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_cidrs_post": {
        "required": [
          "cidr",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "cidr": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_cidrs_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "cidr": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_dns_views_post": {
        "required": [
          "name",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "name": {
            "minLength": 1,
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "recursion": {
            "type": "boolean",
            "default": false
          },
          "match_clients": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "match_destinations": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "max_cache_size": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 33554432
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "query_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vnet_dns_views_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "name": {
            "minLength": 1,
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "recursion": {
            "type": "boolean",
            "default": false
          },
          "match_clients": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "match_destinations": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "max_cache_size": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64",
            "default": 33554432
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "query_source": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          }
        }
      },
      "vnet_dns_zone_records_post": {
        "required": [
          "type",
          "value",
          "zone"
        ],
        "type": "object",
        "properties": {
          "zone": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "host": {
            "type": "string",
            "description": "alias type: text"
          },
          "ttl": {
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)*$",
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "A",
            "enum": [
              "A",
              "CAA",
              "CNAME",
              "MX",
              "NS",
              "PTR",
              "SRV",
              "TXT"
            ]
          },
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "mx_preference": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "weight": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "issue_wildcard": {
            "type": "boolean",
            "default": false
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vnet_dns_zone_records_put": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "host": {
            "type": "string",
            "description": "alias type: text"
          },
          "ttl": {
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)*$",
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "A",
            "enum": [
              "A",
              "CAA",
              "CNAME",
              "MX",
              "NS",
              "PTR",
              "SRV",
              "TXT"
            ]
          },
          "value": {
            "type": "string",
            "description": "alias type: text"
          },
          "mx_preference": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "weight": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "issue_wildcard": {
            "type": "boolean",
            "default": false
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_dns_zones_post": {
        "required": [
          "type",
          "view"
        ],
        "type": "object",
        "properties": {
          "view": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "domain": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "master",
            "enum": [
              "master",
              "slave",
              "redirect",
              "forward",
              "static-stub",
              "stub"
            ]
          },
          "nameserver": {
            "minLength": 1,
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "notify": {
            "type": "string",
            "description": "alias type: text",
            "default": "yes",
            "enum": [
              "yes",
              "no",
              "explicit"
            ]
          },
          "allow_notify": {
            "type": "string",
            "description": "alias type: text",
            "default": "none;"
          },
          "also_notify": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "masters": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "allow_transfer": {
            "type": "string",
            "description": "alias type: text",
            "default": "none;"
          },
          "serial_number": {
            "type": "integer",
            "format": "int64",
            "default": 1
          },
          "default_ttl": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "1h"
          },
          "refresh_interval": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "3h"
          },
          "retry_interval": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "30m"
          },
          "expiry_period": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "3w"
          },
          "negative_ttl": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "10m"
          },
          "forwarders": {
            "type": "string",
            "description": "alias type: text"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vnet_dns_zones_put": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "alias type: text"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "master",
            "enum": [
              "master",
              "slave",
              "redirect",
              "forward",
              "static-stub",
              "stub"
            ]
          },
          "nameserver": {
            "minLength": 1,
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: email"
          },
          "notify": {
            "type": "string",
            "description": "alias type: text",
            "default": "yes",
            "enum": [
              "yes",
              "no",
              "explicit"
            ]
          },
          "allow_notify": {
            "type": "string",
            "description": "alias type: text",
            "default": "none;"
          },
          "also_notify": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "masters": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "allow_transfer": {
            "type": "string",
            "description": "alias type: text",
            "default": "none;"
          },
          "default_ttl": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "1h"
          },
          "refresh_interval": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "3h"
          },
          "retry_interval": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "30m"
          },
          "expiry_period": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "3w"
          },
          "negative_ttl": {
            "minLength": 1,
            "pattern": "^([1-9][0-9]*[sSmMhHdDwW]?)+$",
            "type": "string",
            "description": "alias type: text",
            "default": "10m"
          },
          "forwarders": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_eigrp_router_commands_post": {
        "required": [
          "command",
          "eigrp_router",
          "params"
        ],
        "type": "object",
        "properties": {
          "eigrp_router": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "no": {
            "type": "boolean",
            "default": false
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "eigrp",
              "coalesce-time",
              "maximum-paths",
              "metric",
              "neighbor",
              "network",
              "passive-interface",
              "redistribute",
              "timers",
              "variance"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_eigrp_router_commands_put": {
        "type": "object",
        "properties": {
          "eigrp_router": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "no": {
            "type": "boolean",
            "default": false
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "eigrp",
              "coalesce-time",
              "maximum-paths",
              "metric",
              "neighbor",
              "network",
              "passive-interface",
              "redistribute",
              "timers",
              "variance"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_eigrp_routers_post": {
        "required": [
          "asn",
          "bgp"
        ],
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "asn": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_eigrp_routers_put": {
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: parent_bgp",
            "format": "int64"
          },
          "asn": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_hosts_post": {
        "required": [
          "host",
          "ip",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "host",
            "enum": [
              "host",
              "domain"
            ]
          },
          "host": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          }
        }
      },
      "vnet_hosts_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "host",
            "enum": [
              "host",
              "domain"
            ]
          },
          "host": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          }
        }
      },
      "vnet_ipsec_connections_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "phase1": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "phase2": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "uniqueid": {
            "type": "integer",
            "format": "int32"
          },
          "local": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote": {
            "type": "string",
            "description": "alias type: text"
          },
          "local_network": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote_network": {
            "type": "string",
            "description": "alias type: text"
          },
          "connection": {
            "type": "string",
            "description": "alias type: text"
          },
          "reqid": {
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text"
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text"
          },
          "created": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "vnet_ipsec_connections_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "phase1": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "phase2": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "uniqueid": {
            "type": "integer",
            "format": "int32"
          },
          "local": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote": {
            "type": "string",
            "description": "alias type: text"
          },
          "local_network": {
            "type": "string",
            "description": "alias type: text"
          },
          "remote_network": {
            "type": "string",
            "description": "alias type: text"
          },
          "connection": {
            "type": "string",
            "description": "alias type: text"
          },
          "reqid": {
            "type": "string",
            "description": "alias type: text"
          },
          "interface": {
            "type": "string",
            "description": "alias type: text"
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text"
          },
          "created": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "vnet_ipsec_phase1s_post": {
        "required": [
          "ike",
          "ipsec",
          "name",
          "remote_gateway"
        ],
        "type": "object",
        "properties": {
          "ipsec": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "keyexchange": {
            "type": "string",
            "description": "alias type: text",
            "default": "ike",
            "enum": [
              "ikev1",
              "ikev2",
              "ike"
            ]
          },
          "remote_gateway": {
            "type": "string",
            "description": "alias type: text"
          },
          "auth": {
            "type": "string",
            "description": "alias type: text",
            "default": "psk",
            "enum": [
              "psk",
              "pubkey"
            ]
          },
          "negotiation": {
            "type": "string",
            "description": "alias type: text",
            "default": "main",
            "enum": [
              "main",
              "aggressive"
            ]
          },
          "identifier": {
            "type": "string",
            "description": "alias type: text"
          },
          "peer_identifier": {
            "type": "string",
            "description": "alias type: text"
          },
          "psk": {
            "type": "string",
            "description": "alias type: text"
          },
          "ike": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text",
            "default": "aes256-sha256-modp2048"
          },
          "ikelifetime": {
            "minimum": 60,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 10800
          },
          "auto": {
            "type": "string",
            "description": "alias type: text",
            "default": "route",
            "enum": [
              "add",
              "route",
              "start"
            ]
          },
          "mobike": {
            "type": "boolean",
            "default": false
          },
          "split_connections": {
            "type": "boolean",
            "default": false
          },
          "forceencaps": {
            "type": "boolean",
            "default": false
          },
          "keyingtries": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "rekey": {
            "type": "boolean",
            "default": true
          },
          "reauth": {
            "type": "boolean",
            "default": true
          },
          "margintime": {
            "minimum": 1,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 540
          },
          "dpdaction": {
            "type": "string",
            "description": "alias type: text",
            "default": "restart",
            "enum": [
              "none",
              "clear",
              "hold",
              "restart"
            ]
          },
          "dpddelay": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 30
          },
          "dpdfailures": {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 5
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_ipsec_phase1s_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "keyexchange": {
            "type": "string",
            "description": "alias type: text",
            "default": "ike",
            "enum": [
              "ikev1",
              "ikev2",
              "ike"
            ]
          },
          "remote_gateway": {
            "type": "string",
            "description": "alias type: text"
          },
          "auth": {
            "type": "string",
            "description": "alias type: text",
            "default": "psk",
            "enum": [
              "psk",
              "pubkey"
            ]
          },
          "negotiation": {
            "type": "string",
            "description": "alias type: text",
            "default": "main",
            "enum": [
              "main",
              "aggressive"
            ]
          },
          "identifier": {
            "type": "string",
            "description": "alias type: text"
          },
          "peer_identifier": {
            "type": "string",
            "description": "alias type: text"
          },
          "psk": {
            "type": "string",
            "description": "alias type: text"
          },
          "ike": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text",
            "default": "aes256-sha256-modp2048"
          },
          "ikelifetime": {
            "minimum": 60,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 10800
          },
          "auto": {
            "type": "string",
            "description": "alias type: text",
            "default": "route",
            "enum": [
              "add",
              "route",
              "start"
            ]
          },
          "mobike": {
            "type": "boolean",
            "default": false
          },
          "split_connections": {
            "type": "boolean",
            "default": false
          },
          "forceencaps": {
            "type": "boolean",
            "default": false
          },
          "keyingtries": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 3
          },
          "rekey": {
            "type": "boolean",
            "default": true
          },
          "reauth": {
            "type": "boolean",
            "default": true
          },
          "margintime": {
            "minimum": 1,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 540
          },
          "dpdaction": {
            "type": "string",
            "description": "alias type: text",
            "default": "restart",
            "enum": [
              "none",
              "clear",
              "hold",
              "restart"
            ]
          },
          "dpddelay": {
            "minimum": 0,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 30
          },
          "dpdfailures": {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 5
          }
        }
      },
      "vnet_ipsec_phase2s_post": {
        "required": [
          "ciphers",
          "local",
          "name",
          "phase1"
        ],
        "type": "object",
        "properties": {
          "phase1": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "tunnel",
            "enum": [
              "tunnel",
              "transport"
            ]
          },
          "local": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "remote": {
            "type": "string",
            "description": "alias type: text"
          },
          "lifetime": {
            "maximum": 86400,
            "minimum": 60,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 3600
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "esp",
            "enum": [
              "esp",
              "ah"
            ]
          },
          "ciphers": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text",
            "default": "aes128-sha256-modp2048,aes128gcm128-sha256-modp2048"
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_ipsec_phase2s_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "tunnel",
            "enum": [
              "tunnel",
              "transport"
            ]
          },
          "local": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "remote": {
            "type": "string",
            "description": "alias type: text"
          },
          "lifetime": {
            "maximum": 86400,
            "minimum": 60,
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32",
            "default": 3600
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "esp",
            "enum": [
              "esp",
              "ah"
            ]
          },
          "ciphers": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text",
            "default": "aes128-sha256-modp2048,aes128gcm128-sha256-modp2048"
          }
        }
      },
      "vnet_ipsecs_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "normal",
            "enum": [
              "advanced",
              "normal"
            ]
          },
          "strongswan_conf": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "ipsec_conf": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "ipsec_secrets": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "uniqueids": {
            "type": "string",
            "description": "alias type: text",
            "default": "yes",
            "enum": [
              "yes",
              "no",
              "never",
              "replace",
              "keep"
            ]
          },
          "compress": {
            "type": "boolean",
            "default": false
          },
          "exclude_network": {
            "type": "boolean",
            "default": true
          },
          "charon.cisco_unity": {
            "type": "boolean",
            "default": false
          },
          "charon.accept_unencrypted_mainmode_messages": {
            "type": "boolean",
            "default": false
          },
          "charon.plugins.kernel-netlink.mss": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "strictcrlpolicy": {
            "type": "string",
            "description": "alias type: text",
            "default": "no",
            "enum": [
              "yes",
              "ifuri",
              "no"
            ]
          },
          "charon.make_before_break": {
            "type": "boolean",
            "default": false
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_ipsecs_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "mode": {
            "type": "string",
            "description": "alias type: text",
            "default": "normal",
            "enum": [
              "advanced",
              "normal"
            ]
          },
          "strongswan_conf": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "ipsec_conf": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "ipsec_secrets": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "uniqueids": {
            "type": "string",
            "description": "alias type: text",
            "default": "yes",
            "enum": [
              "yes",
              "no",
              "never",
              "replace",
              "keep"
            ]
          },
          "compress": {
            "type": "boolean",
            "default": false
          },
          "exclude_network": {
            "type": "boolean",
            "default": true
          },
          "charon.cisco_unity": {
            "type": "boolean",
            "default": false
          },
          "charon.accept_unencrypted_mainmode_messages": {
            "type": "boolean",
            "default": false
          },
          "charon.plugins.kernel-netlink.mss": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "strictcrlpolicy": {
            "type": "string",
            "description": "alias type: text",
            "default": "no",
            "enum": [
              "yes",
              "ifuri",
              "no"
            ]
          },
          "charon.make_before_break": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "vnet_monitor_stats_history_long_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "sent": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quality": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_avg": {
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_peak": {
            "type": "integer",
            "format": "int32"
          },
          "duplicates": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "truncated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_checksums": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_data": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_monitor_stats_history_long_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "sent": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quality": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_avg": {
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_peak": {
            "type": "integer",
            "format": "int32"
          },
          "duplicates": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "truncated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_checksums": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_data": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_monitor_stats_history_short_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "sent": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quality": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_avg": {
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_peak": {
            "type": "integer",
            "format": "int32"
          },
          "duplicates": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "truncated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_checksums": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_data": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_monitor_stats_history_short_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "sent": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "quality": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_avg": {
            "type": "integer",
            "format": "int32"
          },
          "latency_usec_peak": {
            "type": "integer",
            "format": "int32"
          },
          "duplicates": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "truncated": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "dropped": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_checksums": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "bad_data": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_ospf_commands_post": {
        "required": [
          "bgp",
          "command",
          "params"
        ],
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "advanced",
              "area",
              "auto-cost",
              "capability",
              "default-information",
              "default-metric",
              "distance",
              "distribute-list",
              "log-adjacency-changes",
              "max-metric",
              "mpls-te",
              "neighbor",
              "network",
              "no",
              "ospf",
              "passive-interface",
              "redistribute",
              "router-id",
              "timers"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_ospf_commands_put": {
        "type": "object",
        "properties": {
          "bgp": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "reorderid": {
            "type": "integer",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "advanced",
              "area",
              "auto-cost",
              "capability",
              "default-information",
              "default-metric",
              "distance",
              "distribute-list",
              "log-adjacency-changes",
              "max-metric",
              "mpls-te",
              "neighbor",
              "network",
              "no",
              "ospf",
              "passive-interface",
              "redistribute",
              "router-id",
              "timers"
            ]
          },
          "params": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_proxy_post": {
        "required": [
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "listen_address": {
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?$",
            "type": "string",
            "description": "alias type: text",
            "default": "0.0.0.0"
          },
          "default_self": {
            "type": "boolean",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vnet_proxy_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "listen_address": {
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?$",
            "type": "string",
            "description": "alias type: text",
            "default": "0.0.0.0"
          },
          "default_self": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "vnet_proxy_tenants_post": {
        "required": [
          "fqdn",
          "proxy",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "proxy": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "tenant": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "fqdn": {
            "minLength": 1,
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "vnet_proxy_tenants_put": {
        "type": "object",
        "properties": {
          "fqdn": {
            "minLength": 1,
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname"
          }
        }
      },
      "vnet_queries_post": {
        "required": [
          "query",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "ipsec",
              "whatsmyip",
              "arp",
              "arp-scan",
              "frr",
              "trace",
              "dhcp_release_renew",
              "wireguard",
              "firewall",
              "nmap",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "vnet_queries_put": {
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "logs",
              "top",
              "top_if",
              "tcpdump",
              "ping",
              "dns",
              "traceroute",
              "ip",
              "ipsec",
              "whatsmyip",
              "arp",
              "arp-scan",
              "frr",
              "trace",
              "dhcp_release_renew",
              "wireguard",
              "firewall",
              "nmap",
              "tcp_connect"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "maxLength": 262144,
            "type": "string",
            "default": ""
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "vnet_rule_aliases_post": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "id": {
            "maxLength": 40,
            "minLength": 40,
            "pattern": "^[0-9a-z-]{40}$",
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "publishing_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "private",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_rule_aliases_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "publishing_scope": {
            "type": "string",
            "description": "alias type: recipescope",
            "default": "private",
            "enum": [
              "private",
              "global",
              "tenant",
              "none"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          }
        }
      },
      "vnet_rule_references_post": {
        "required": [
          "rule"
        ],
        "type": "object",
        "properties": {
          "rule": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "reference": {
            "type": "string",
            "description": "alias type: row"
          },
          "field": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "vnet_rules_post": {
        "required": [
          "name",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "pin": {
            "type": "string",
            "description": "alias type: text",
            "default": "no",
            "enum": [
              "no",
              "top",
              "bottom"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "trace": {
            "type": "boolean",
            "default": false
          },
          "system_rule": {
            "type": "boolean"
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "any",
            "enum": [
              "tcp",
              "tcpudp",
              "udp",
              "icmp",
              "89",
              "2",
              "47",
              "50",
              "51",
              "any"
            ]
          },
          "direction": {
            "type": "string",
            "description": "alias type: text",
            "default": "incoming",
            "enum": [
              "incoming",
              "outgoing"
            ]
          },
          "ct_state": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "auto",
            "enum": [
              "auto",
              "router",
              "dmz",
              "wireguard",
              "any"
            ]
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "accept",
            "enum": [
              "accept",
              "drop",
              "reject",
              "translate",
              "route"
            ]
          },
          "source_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "source_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "target_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "target_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "statistics": {
            "type": "boolean",
            "default": false
          },
          "log": {
            "type": "boolean",
            "default": false
          },
          "throttle": {
            "type": "string",
            "description": "alias type: text"
          },
          "drop_throttle": {
            "type": "boolean"
          },
          "packets": {
            "type": "integer",
            "format": "int64"
          },
          "bytes": {
            "type": "integer",
            "format": "int64"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "vnet_rules_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "orderid": {
            "type": "integer",
            "format": "int32"
          },
          "pin": {
            "type": "string",
            "description": "alias type: text",
            "default": "no",
            "enum": [
              "no",
              "top",
              "bottom"
            ]
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "trace": {
            "type": "boolean",
            "default": false
          },
          "protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "any",
            "enum": [
              "tcp",
              "tcpudp",
              "udp",
              "icmp",
              "89",
              "2",
              "47",
              "50",
              "51",
              "any"
            ]
          },
          "direction": {
            "type": "string",
            "description": "alias type: text",
            "default": "incoming",
            "enum": [
              "incoming",
              "outgoing"
            ]
          },
          "ct_state": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "interface": {
            "type": "string",
            "description": "alias type: text",
            "default": "auto",
            "enum": [
              "auto",
              "router",
              "dmz",
              "wireguard",
              "any"
            ]
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "default": "accept",
            "enum": [
              "accept",
              "drop",
              "reject",
              "translate",
              "route"
            ]
          },
          "source_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "source_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "target_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "target_ports": {
            "type": "string",
            "description": "alias type: text"
          },
          "statistics": {
            "type": "boolean",
            "default": false
          },
          "log": {
            "type": "boolean",
            "default": false
          },
          "throttle": {
            "type": "string",
            "description": "alias type: text"
          },
          "drop_throttle": {
            "type": "boolean"
          },
          "packets": {
            "type": "integer",
            "format": "int64"
          },
          "bytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "vnet_wireguard_peer_status_post": {
        "required": [
          "peer"
        ],
        "type": "object",
        "properties": {
          "peer": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "last_handshake": {
            "type": "integer",
            "format": "int32"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vnet_wireguard_peer_status_put": {
        "type": "object",
        "properties": {
          "last_handshake": {
            "type": "integer",
            "format": "int32"
          },
          "tx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "rx_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "bulk_update": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "vnet_wireguard_peers_post": {
        "required": [
          "allowed_ips",
          "name",
          "peer_ip",
          "public_key",
          "wireguard"
        ],
        "type": "object",
        "properties": {
          "wireguard": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "autogenerate_peer": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 51820
          },
          "peer_ip": {
            "minLength": 1,
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "private_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "public_key": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "preshared_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "allowed_ips": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: textarea"
          },
          "configure_firewall": {
            "type": "string",
            "default": "site-to-site",
            "enum": [
              "site-to-site",
              "remote-user",
              "none"
            ]
          },
          "keepalive": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          },
          "wg_config": {
            "type": "string"
          }
        }
      },
      "vnet_wireguard_peers_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "autogenerate_peer": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string",
            "description": "alias type: text"
          },
          "port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 51820
          },
          "peer_ip": {
            "minLength": 1,
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "private_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "public_key": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: text"
          },
          "preshared_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "allowed_ips": {
            "minLength": 1,
            "type": "string",
            "description": "alias type: textarea"
          },
          "configure_firewall": {
            "type": "string",
            "default": "site-to-site",
            "enum": [
              "site-to-site",
              "remote-user",
              "none"
            ]
          },
          "keepalive": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "wg_config": {
            "type": "string"
          }
        }
      },
      "vnet_wireguards_post": {
        "required": [
          "ip",
          "name",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "listenport": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 51820
          },
          "mtu": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "public_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "private_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "endpoint_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "configure_firewall": {
            "type": "boolean"
          },
          "external_ip": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "auto_apply_firewall": {
            "type": "boolean"
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "vnet_wireguards_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "ip": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "listenport": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 51820
          },
          "mtu": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "public_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "private_key": {
            "type": "string",
            "description": "alias type: text"
          },
          "endpoint_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "configure_firewall": {
            "type": "boolean"
          },
          "external_ip": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "auto_apply_firewall": {
            "type": "boolean"
          }
        }
      },
      "vnet_wires_post": {
        "required": [
          "name",
          "vnet"
        ],
        "type": "object",
        "properties": {
          "vnet": {
            "type": "integer",
            "description": "alias type: parent_vnet",
            "format": "int64"
          },
          "dest_wire": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "modified": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "pvid": {
            "maximum": 4096,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "allowed_vlans": {
            "type": "string",
            "description": "alias type: text"
          },
          "skip_loop_detection": {
            "type": "boolean"
          }
        }
      },
      "vnet_wires_put": {
        "type": "object",
        "properties": {
          "dest_wire": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "pvid": {
            "maximum": 4096,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "allowed_vlans": {
            "type": "string",
            "description": "alias type: text"
          },
          "skip_loop_detection": {
            "type": "boolean"
          }
        }
      },
      "vnets_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "advanced_options": {
            "type": "object",
            "properties": {}
          },
          "owner": {
            "type": "string",
            "description": "alias type: row"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "type": {
            "type": "string",
            "default": "internal",
            "enum": [
              "internal",
              "external",
              "bgp",
              "dmz",
              "core",
              "physical",
              "port_mirror",
              "vpn"
            ]
          },
          "layer2_type": {
            "type": "string",
            "default": "vxlan",
            "enum": [
              "vlan",
              "vxlan",
              "none",
              "bond",
              "bond_slave"
            ]
          },
          "layer2_id": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "physical_bridged": {
            "type": "boolean",
            "default": false
          },
          "vxlan_multicast": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "port_mirroring": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "off",
              "east_west",
              "north_south"
            ]
          },
          "port_mirroring_vnet": {
            "type": "string",
            "description": "alias type: row"
          },
          "interface_vnet": {
            "type": "string",
            "description": "alias type: row"
          },
          "enable_bonding": {
            "type": "boolean",
            "default": false
          },
          "bond_interfaces_args": {
            "type": "object",
            "properties": {},
            "description": "alias type: rows_2_json"
          },
          "cidr": {
            "type": "string",
            "description": "alias type: row"
          },
          "autostart": {
            "type": "boolean",
            "default": true
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "macaddress": {
            "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
            "type": "string",
            "description": "alias type: macaddress"
          },
          "ipsec": {
            "type": "string",
            "description": "alias type: row"
          },
          "ipsec_enabled": {
            "type": "boolean",
            "default": true
          },
          "ipaddress_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "static",
            "enum": [
              "static",
              "dynamic",
              "bgp",
              "none"
            ]
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dmz_ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "network": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "mtu": {
            "maximum": 65536,
            "minimum": 1000,
            "type": "integer",
            "format": "int32"
          },
          "gateway": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dnslist": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "override_dhcp_dns": {
            "type": "boolean",
            "default": false
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "hostname": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname",
            "default": "router"
          },
          "dhcp_enabled": {
            "type": "boolean"
          },
          "dhcp_dynamic": {
            "type": "boolean"
          },
          "dhcp_start": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dhcp_stop": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dhcp_sequential": {
            "type": "boolean"
          },
          "dns": {
            "type": "string",
            "description": "alias type: text",
            "default": "simple",
            "enum": [
              "disabled",
              "simple",
              "bind",
              "network"
            ]
          },
          "network_dns": {
            "type": "string",
            "description": "alias type: row"
          },
          "network_dns_zone": {
            "type": "string",
            "description": "alias type: row"
          },
          "proxy_enabled": {
            "type": "boolean",
            "default": false
          },
          "proxy": {
            "type": "string",
            "description": "alias type: row"
          },
          "proxy_listen_address": {
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?$",
            "type": "string",
            "description": "alias type: text"
          },
          "bgp": {
            "type": "string",
            "description": "alias type: row"
          },
          "bgp_asn": {
            "maximum": 4294967295,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "statistics": {
            "type": "boolean",
            "default": false
          },
          "dmz_statistics": {
            "type": "boolean",
            "default": false
          },
          "trace": {
            "type": "boolean",
            "default": false
          },
          "mirror_logs": {
            "type": "boolean",
            "default": false
          },
          "rate_limit": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "rate_limit_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "mbytes/second",
            "enum": [
              "bytes/second",
              "kbytes/second",
              "mbytes/second",
              "bytes/minute",
              "kbytes/minute",
              "mbytes/minute",
              "bytes/hour",
              "kbytes/hour",
              "mbytes/hour",
              "bytes/day",
              "kbytes/day",
              "mbytes/day",
              "second",
              "minute",
              "hour",
              "day"
            ]
          },
          "rate_limit_burst": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "need_restart": {
            "type": "boolean"
          },
          "need_fw_apply": {
            "type": "boolean"
          },
          "need_proxy_apply": {
            "type": "boolean"
          },
          "apply_fw_on_start": {
            "type": "boolean",
            "default": false
          },
          "need_dns_apply": {
            "type": "boolean"
          },
          "need_interface_apply": {
            "type": "boolean"
          },
          "last_fw_apply": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "last_dns_apply": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pxe": {
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "ybos",
              "custom"
            ]
          },
          "tftp_server": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "monitor_gateway": {
            "type": "boolean",
            "default": false
          },
          "monitor_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "monitor_interval_ms": {
            "maximum": 120000,
            "minimum": 1000,
            "type": "integer",
            "format": "int32",
            "default": 2000
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "string",
            "description": "alias type: row"
          },
          "cluster_failover": {
            "type": "string",
            "description": "alias type: row"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "vnet_default_gateway": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32",
            "nullable": true
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "vnets_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "advanced_options": {
            "type": "object",
            "properties": {}
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "layer2_type": {
            "type": "string",
            "default": "vxlan",
            "enum": [
              "vlan",
              "vxlan",
              "none",
              "bond",
              "bond_slave"
            ]
          },
          "layer2_id": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "physical_bridged": {
            "type": "boolean",
            "default": false
          },
          "vxlan_multicast": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "port_mirroring": {
            "type": "string",
            "description": "alias type: text",
            "default": "off",
            "enum": [
              "off",
              "east_west",
              "north_south"
            ]
          },
          "port_mirroring_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "interface_vnet": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "enable_bonding": {
            "type": "boolean",
            "default": false
          },
          "bond_interfaces_args": {
            "type": "object",
            "properties": {},
            "description": "alias type: rows_2_json"
          },
          "autostart": {
            "type": "boolean",
            "default": true
          },
          "powerstate": {
            "type": "boolean",
            "default": false
          },
          "on_power_loss": {
            "type": "string",
            "description": "alias type: on_power_loss",
            "default": "last_state",
            "enum": [
              "power_on",
              "last_state",
              "leave_off"
            ]
          },
          "ipsec": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "ipaddress_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "static",
            "enum": [
              "static",
              "dynamic",
              "bgp",
              "none"
            ]
          },
          "ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dmz_ipaddress": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "network": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/(3[0-2]|[1-2][0-9]|[0-9])$",
            "type": "string",
            "description": "alias type: netaddress"
          },
          "mtu": {
            "maximum": 65536,
            "minimum": 1000,
            "type": "integer",
            "format": "int32"
          },
          "gateway": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dnslist": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "override_dhcp_dns": {
            "type": "boolean",
            "default": false
          },
          "domain": {
            "pattern": "^([xX][nN]--|([0-9]+[/|-][0-9]+\\.))?([a-zA-Z0-9]([a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*\\.?$",
            "type": "string",
            "description": "alias type: domainname"
          },
          "hostname": {
            "pattern": "^([xX][nN]--)?([a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])+(\\.[a-zA-Z0-9][a-zA-Z0-9_-]{0,61}[a-zA-Z0-9])*$",
            "type": "string",
            "description": "alias type: hostname",
            "default": "router"
          },
          "dhcp_enabled": {
            "type": "boolean"
          },
          "dhcp_dynamic": {
            "type": "boolean"
          },
          "dhcp_start": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dhcp_stop": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "dhcp_sequential": {
            "type": "boolean"
          },
          "dns": {
            "type": "string",
            "description": "alias type: text",
            "default": "simple",
            "enum": [
              "disabled",
              "simple",
              "bind",
              "network"
            ]
          },
          "network_dns": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "network_dns_zone": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "proxy_enabled": {
            "type": "boolean",
            "default": false
          },
          "proxy": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "proxy_listen_address": {
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?$",
            "type": "string",
            "description": "alias type: text"
          },
          "bgp_asn": {
            "maximum": 4294967295,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "statistics": {
            "type": "boolean",
            "default": false
          },
          "dmz_statistics": {
            "type": "boolean",
            "default": false
          },
          "trace": {
            "type": "boolean",
            "default": false
          },
          "mirror_logs": {
            "type": "boolean",
            "default": false
          },
          "rate_limit": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "rate_limit_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "mbytes/second",
            "enum": [
              "bytes/second",
              "kbytes/second",
              "mbytes/second",
              "bytes/minute",
              "kbytes/minute",
              "mbytes/minute",
              "bytes/hour",
              "kbytes/hour",
              "mbytes/hour",
              "bytes/day",
              "kbytes/day",
              "mbytes/day",
              "second",
              "minute",
              "hour",
              "day"
            ]
          },
          "rate_limit_burst": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "need_restart": {
            "type": "boolean"
          },
          "need_fw_apply": {
            "type": "boolean"
          },
          "need_proxy_apply": {
            "type": "boolean"
          },
          "apply_fw_on_start": {
            "type": "boolean",
            "default": false
          },
          "need_dns_apply": {
            "type": "boolean"
          },
          "need_interface_apply": {
            "type": "boolean"
          },
          "last_fw_apply": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "last_dns_apply": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "pxe": {
            "type": "string",
            "default": "none",
            "enum": [
              "none",
              "ybos",
              "custom"
            ]
          },
          "tftp_server": {
            "pattern": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string",
            "description": "alias type: ipaddress"
          },
          "monitor_gateway": {
            "type": "boolean",
            "default": false
          },
          "monitor_ip": {
            "type": "string",
            "description": "alias type: text"
          },
          "monitor_interval_ms": {
            "maximum": 120000,
            "minimum": 1000,
            "type": "integer",
            "format": "int32",
            "default": 2000
          },
          "ha_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "cluster": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "cluster_failover": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "preferred_node": {
            "type": "integer",
            "description": "row reference to table 'nodes'",
            "format": "int32",
            "x-yb-table-reference": "nodes"
          },
          "vnet_default_gateway": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int32",
            "nullable": true
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "volume_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "restore",
              "clone",
              "recover_cloudsnapshot",
              "reset"
            ]
          },
          "restore_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "data",
            "enum": [
              "data",
              "all"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_actions_put": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "restore",
              "clone",
              "recover_cloudsnapshot",
              "reset"
            ]
          },
          "restore_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "data",
            "enum": [
              "data",
              "all"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_antivirus_post": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "infected_action": {
            "type": "string",
            "description": "alias type: text",
            "default": "move",
            "enum": [
              "move",
              "delete"
            ]
          },
          "start_time_profile": {
            "type": "string",
            "description": "alias type: row"
          },
          "on_access": {
            "type": "boolean",
            "default": false
          },
          "quarantine_location": {
            "type": "string",
            "description": "alias type: text",
            "default": ".quarantine"
          },
          "scan": {
            "type": "string",
            "description": "alias type: text",
            "default": "entire",
            "enum": [
              "entire",
              "specific"
            ]
          },
          "include": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "exclude": {
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "volume_antivirus_put": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "infected_action": {
            "type": "string",
            "description": "alias type: text",
            "default": "move",
            "enum": [
              "move",
              "delete"
            ]
          },
          "start_time_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "on_access": {
            "type": "boolean",
            "default": false
          },
          "quarantine_location": {
            "type": "string",
            "description": "alias type: text",
            "default": ".quarantine"
          },
          "scan": {
            "type": "string",
            "description": "alias type: text",
            "default": "entire",
            "enum": [
              "entire",
              "specific"
            ]
          },
          "include": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "exclude": {
            "type": "string",
            "description": "alias type: textarea"
          }
        }
      },
      "volume_antivirus_actions_post": {
        "required": [
          "action",
          "volume_antivirus"
        ],
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "start",
              "stop"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_antivirus_actions_put": {
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "start",
              "stop"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_antivirus_infections_post": {
        "required": [
          "volume_antivirus"
        ],
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "filename": {
            "type": "string",
            "description": "alias type: text"
          },
          "virus": {
            "type": "string",
            "description": "alias type: text"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "move",
              "delete"
            ]
          }
        }
      },
      "volume_antivirus_infections_put": {
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "filename": {
            "type": "string",
            "description": "alias type: text"
          },
          "virus": {
            "type": "string",
            "description": "alias type: text"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "move",
              "delete"
            ]
          }
        }
      },
      "volume_antivirus_logs_post": {
        "required": [
          "volume_antivirus"
        ],
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_antivirus_logs_put": {
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_antivirus_stats_post": {
        "required": [
          "volume_antivirus"
        ],
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "infected_files": {
            "type": "integer",
            "format": "int64"
          },
          "quarantine_count": {
            "type": "integer",
            "format": "int64"
          },
          "last_scan": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "created": {
            "type": "integer",
            "description": "alias type: created",
            "format": "int32"
          }
        }
      },
      "volume_antivirus_stats_put": {
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "infected_files": {
            "type": "integer",
            "format": "int64"
          },
          "quarantine_count": {
            "type": "integer",
            "format": "int64"
          },
          "last_scan": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "volume_antivirus_status_post": {
        "required": [
          "volume_antivirus"
        ],
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "scanning",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "volume_antivirus_status_put": {
        "type": "object",
        "properties": {
          "volume_antivirus": {
            "type": "integer",
            "description": "alias type: parent_volume_antivirus",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "scanning",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          }
        }
      },
      "volume_browser_post": {
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "get-dir",
              "rename",
              "delete",
              "paste"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "result": {
            "type": "object",
            "properties": {}
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "expires": {
            "type": "number",
            "format": "double"
          },
          "command": {
            "type": "string"
          }
        }
      },
      "volume_browser_put": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "query": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "get-dir",
              "rename",
              "delete",
              "paste"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "running",
            "enum": [
              "running",
              "error",
              "complete"
            ]
          },
          "result": {
            "type": "object",
            "properties": {}
          },
          "expires": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "volume_cifs_shares_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "share_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "comment": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "valid_users": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "valid_groups": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "admin_users": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "admin_groups": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "host_allow": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "host_deny": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "force_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "force_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "browseable": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "guest_ok": {
            "type": "boolean"
          },
          "guest_only": {
            "type": "boolean"
          },
          "advanced": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "vfs_shadow_copy2": {
            "type": "boolean"
          }
        }
      },
      "volume_cifs_shares_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "share_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "comment": {
            "maxLength": 64,
            "type": "string",
            "description": "alias type: text"
          },
          "valid_users": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "valid_groups": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "admin_users": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "admin_groups": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "host_allow": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "host_deny": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "force_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "force_group": {
            "type": "string",
            "description": "alias type: text"
          },
          "browseable": {
            "type": "boolean"
          },
          "read_only": {
            "type": "boolean"
          },
          "guest_ok": {
            "type": "boolean"
          },
          "guest_only": {
            "type": "boolean"
          },
          "advanced": {
            "maxLength": 65536,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "vfs_shadow_copy2": {
            "type": "boolean"
          }
        }
      },
      "volume_logs_post": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_logs_put": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_nfs_shares_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "share_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "allowed_hosts": {
            "type": "string",
            "description": "alias type: text"
          },
          "fsid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anonuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anongid": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_acl": {
            "type": "boolean"
          },
          "insecure": {
            "type": "boolean"
          },
          "async": {
            "type": "boolean"
          },
          "squash": {
            "type": "string",
            "description": "alias type: text",
            "default": "root_squash",
            "enum": [
              "root_squash",
              "all_squash",
              "no_root_squash"
            ]
          },
          "data_access": {
            "type": "string",
            "description": "alias type: text",
            "default": "ro",
            "enum": [
              "ro",
              "rw"
            ]
          },
          "allow_all": {
            "type": "boolean"
          }
        }
      },
      "volume_nfs_shares_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "share_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "allowed_hosts": {
            "type": "string",
            "description": "alias type: text"
          },
          "fsid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anonuid": {
            "type": "string",
            "description": "alias type: text"
          },
          "anongid": {
            "type": "string",
            "description": "alias type: text"
          },
          "no_acl": {
            "type": "boolean"
          },
          "insecure": {
            "type": "boolean"
          },
          "async": {
            "type": "boolean"
          },
          "squash": {
            "type": "string",
            "description": "alias type: text",
            "default": "root_squash",
            "enum": [
              "root_squash",
              "all_squash",
              "no_root_squash"
            ]
          },
          "data_access": {
            "type": "string",
            "description": "alias type: text",
            "default": "ro",
            "enum": [
              "ro",
              "rw"
            ]
          },
          "allow_all": {
            "type": "boolean"
          }
        }
      },
      "volume_share_logs_post": {
        "required": [
          "share"
        ],
        "type": "object",
        "properties": {
          "share": {
            "type": "string",
            "description": "alias type: parent_share"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_share_logs_put": {
        "type": "object",
        "properties": {
          "share": {
            "type": "string",
            "description": "alias type: parent_share"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_share_status_post": {
        "required": [
          "share"
        ],
        "type": "object",
        "properties": {
          "share": {
            "type": "string",
            "description": "alias type: parent_share"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "initializing",
              "online",
              "unresponsive",
              "initmigrate",
              "startmigrate",
              "migrating",
              "migratecomplete",
              "needsrefresh",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "volume_share_status_put": {
        "type": "object",
        "properties": {
          "share": {
            "type": "string",
            "description": "alias type: parent_share"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "initializing",
              "online",
              "unresponsive",
              "initmigrate",
              "startmigrate",
              "migrating",
              "migratecomplete",
              "needsrefresh",
              "error"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          }
        }
      },
      "volume_snapshots_post": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "created_manually": {
            "type": "boolean",
            "default": false
          },
          "quiesce": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "volume_snapshots_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "expires": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "created_manually": {
            "type": "boolean",
            "default": false
          },
          "quiesce": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "volume_status_post": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "mounted": {
            "type": "boolean"
          },
          "resizing": {
            "type": "boolean"
          },
          "formatting": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "initializing",
              "online",
              "freezing",
              "unresponsive",
              "error"
            ]
          },
          "remote_id": {
            "type": "string"
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "resetting": {
            "type": "boolean"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          }
        }
      },
      "volume_status_put": {
        "type": "object",
        "properties": {
          "mounted": {
            "type": "boolean"
          },
          "resizing": {
            "type": "boolean"
          },
          "formatting": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "offline",
              "initializing",
              "online",
              "freezing",
              "unresponsive",
              "error"
            ]
          },
          "remote_id": {
            "type": "string"
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "resetting": {
            "type": "boolean"
          }
        }
      },
      "volume_sync_actions_post": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "start_sync",
              "stop_sync"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_sync_actions_put": {
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "enable",
              "disable",
              "start_sync",
              "stop_sync"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_sync_logs_post": {
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: created_us",
            "format": "int64"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_sync_logs_put": {
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "level": {
            "type": "string",
            "description": "alias type: log_level",
            "default": "message",
            "enum": [
              "audit",
              "message",
              "warning",
              "error",
              "critical",
              "summary",
              "debug"
            ]
          },
          "text": {
            "type": "string",
            "description": "alias type: text"
          },
          "user": {
            "type": "string",
            "description": "alias type: text"
          }
        }
      },
      "volume_sync_progresses_post": {
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "syncing": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "complete",
              "offline",
              "syncing",
              "aborted",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "source_volume": {
            "type": "string",
            "description": "alias type: text"
          },
          "source_snapshot_volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "source_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_volume": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "files_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "files_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "directories_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "directories_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "total_deleted": {
            "type": "integer",
            "format": "int64"
          },
          "bytes_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "bytes_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "transfer_rate": {
            "type": "string",
            "description": "alias type: text"
          },
          "transfer_rate_bps": {
            "type": "integer",
            "format": "int64"
          },
          "current_file": {
            "type": "string",
            "description": "alias type: text"
          },
          "current_file_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "current_file_size": {
            "type": "integer",
            "format": "int64"
          },
          "current_file_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sync_errors": {
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "type": "string"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "last_update": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "vm_import": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          }
        }
      },
      "volume_sync_progresses_put": {
        "type": "object",
        "properties": {
          "sync": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volume_syncs'",
            "x-yb-table-reference": "volume_syncs"
          },
          "syncing": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "offline",
            "enum": [
              "complete",
              "offline",
              "syncing",
              "aborted",
              "error",
              "warning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "state": {
            "type": "string",
            "description": "alias type: state",
            "default": "offline",
            "enum": [
              "online",
              "offline",
              "warning",
              "error"
            ]
          },
          "source_volume": {
            "type": "string",
            "description": "alias type: text"
          },
          "source_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_volume": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "files_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "files_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "directories_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "directories_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "total_deleted": {
            "type": "integer",
            "format": "int64"
          },
          "bytes_transferred": {
            "type": "integer",
            "format": "int64"
          },
          "bytes_scanned": {
            "type": "integer",
            "format": "int64"
          },
          "transfer_rate": {
            "type": "string",
            "description": "alias type: text"
          },
          "transfer_rate_bps": {
            "type": "integer",
            "format": "int64"
          },
          "current_file": {
            "type": "string",
            "description": "alias type: text"
          },
          "current_file_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "current_file_size": {
            "type": "integer",
            "format": "int64"
          },
          "current_file_pct": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "sync_errors": {
            "type": "integer",
            "format": "int64"
          },
          "start_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "stop_time": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          },
          "vm_import": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'vm_imports'",
            "x-yb-table-reference": "vm_imports"
          }
        }
      },
      "volume_syncs_post": {
        "required": [
          "name",
          "service",
          "type"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "source_volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "source_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "destination_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "include": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "exclude": {
            "type": "string",
            "description": "alias type: textarea",
            "default": "/.snapshots/\n/lost+found/\n/.quarantine/"
          },
          "fsfreeze": {
            "type": "boolean",
            "default": false
          },
          "preserve_ACLs": {
            "type": "boolean",
            "default": true
          },
          "copy_symlinks": {
            "type": "boolean",
            "default": true
          },
          "preserve_xattrs": {
            "type": "boolean",
            "default": true
          },
          "preserve_permissions": {
            "type": "boolean",
            "default": true
          },
          "preserve_mod_time": {
            "type": "boolean",
            "default": true
          },
          "preserve_groups": {
            "type": "boolean",
            "default": true
          },
          "preserve_owner": {
            "type": "boolean",
            "default": true
          },
          "preserve_device_files": {
            "type": "boolean",
            "default": false
          },
          "start_time_profile": {
            "type": "string",
            "description": "alias type: row"
          },
          "run_time": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "run_as_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_delete": {
            "type": "string",
            "description": "alias type: text",
            "default": "never",
            "enum": [
              "never",
              "delete",
              "delete-before",
              "delete-during",
              "delete-delay",
              "delete-after"
            ]
          },
          "errors_max": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 1000
          },
          "type": {
            "type": "string",
            "description": "alias type: text",
            "default": "volsync",
            "enum": [
              "volsync",
              "vmimport"
            ]
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "omit_dir_times": {
            "type": "boolean",
            "default": false
          },
          "omit_link_times": {
            "type": "boolean",
            "default": false
          },
          "inplace": {
            "type": "boolean",
            "default": false
          },
          "cifsacl": {
            "type": "boolean",
            "default": true
          },
          "sync_method": {
            "type": "string",
            "description": "alias type: text",
            "default": "ysync",
            "enum": [
              "rsync",
              "ysync"
            ]
          },
          "ysync_extended": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "workers": {
            "maximum": 128,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          }
        }
      },
      "volume_syncs_put": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "source_volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "source_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "destination_path": {
            "type": "string",
            "description": "alias type: text"
          },
          "include": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "exclude": {
            "type": "string",
            "description": "alias type: textarea",
            "default": "/.snapshots/\n/lost+found/\n/.quarantine/"
          },
          "fsfreeze": {
            "type": "boolean",
            "default": false
          },
          "preserve_ACLs": {
            "type": "boolean",
            "default": true
          },
          "copy_symlinks": {
            "type": "boolean",
            "default": true
          },
          "preserve_xattrs": {
            "type": "boolean",
            "default": true
          },
          "preserve_permissions": {
            "type": "boolean",
            "default": true
          },
          "preserve_mod_time": {
            "type": "boolean",
            "default": true
          },
          "preserve_groups": {
            "type": "boolean",
            "default": true
          },
          "preserve_owner": {
            "type": "boolean",
            "default": true
          },
          "preserve_device_files": {
            "type": "boolean",
            "default": false
          },
          "start_time_profile": {
            "type": "string",
            "description": "alias type: row"
          },
          "run_time": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "run_as_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "destination_delete": {
            "type": "string",
            "description": "alias type: text",
            "default": "never",
            "enum": [
              "never",
              "delete",
              "delete-before",
              "delete-during",
              "delete-delay",
              "delete-after"
            ]
          },
          "errors_max": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 1000
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "omit_dir_times": {
            "type": "boolean",
            "default": false
          },
          "omit_link_times": {
            "type": "boolean",
            "default": false
          },
          "inplace": {
            "type": "boolean",
            "default": false
          },
          "cifsacl": {
            "type": "boolean",
            "default": true
          },
          "sync_method": {
            "type": "string",
            "description": "alias type: text",
            "default": "ysync",
            "enum": [
              "rsync",
              "ysync"
            ]
          },
          "ysync_extended": {
            "type": "string",
            "description": "alias type: textarea"
          },
          "workers": {
            "maximum": 128,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 4
          }
        }
      },
      "volume_vm_export_actions_post": {
        "required": [
          "action",
          "volume_vm_export"
        ],
        "type": "object",
        "properties": {
          "volume_vm_export": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "start_export",
              "stop_export",
              "cleanup"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_vm_export_actions_put": {
        "type": "object",
        "properties": {
          "volume_vm_export": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "start_export",
              "stop_export",
              "cleanup"
            ]
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "volume_vm_export_stats_post": {
        "required": [
          "volume_vm_exports"
        ],
        "type": "object",
        "properties": {
          "volume_vm_exports": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "duration": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "virtual_machines": {
            "type": "number",
            "format": "double"
          },
          "export_success": {
            "type": "number",
            "format": "double"
          },
          "errors": {
            "type": "number",
            "format": "double"
          },
          "quiesced": {
            "type": "boolean"
          },
          "size_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "file_name": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "volume_vm_export_stats_put": {
        "type": "object",
        "properties": {
          "volume_vm_exports": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "duration": {
            "type": "integer",
            "description": "alias type: seconds",
            "format": "int32"
          },
          "virtual_machines": {
            "type": "number",
            "format": "double"
          },
          "export_success": {
            "type": "number",
            "format": "double"
          },
          "errors": {
            "type": "number",
            "format": "double"
          },
          "quiesced": {
            "type": "boolean"
          },
          "size_bytes": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "integer",
            "description": "alias type: timestamp",
            "format": "int32"
          }
        }
      },
      "volume_vm_exports_post": {
        "type": "object",
        "properties": {
          "volume": {
            "maxLength": 40,
            "minLength": 40,
            "type": "string",
            "description": "row reference to table 'volumes'",
            "x-yb-table-reference": "volumes"
          },
          "name": {
            "type": "string",
            "description": "alias type: text"
          },
          "quiesced": {
            "type": "boolean",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "building",
              "error",
              "cleaning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "create_current": {
            "type": "boolean",
            "default": true
          },
          "max_exports": {
            "maximum": 100,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 3
          }
        }
      },
      "volume_vm_exports_put": {
        "type": "object",
        "properties": {
          "quiesced": {
            "type": "boolean",
            "default": true
          },
          "status": {
            "type": "string",
            "description": "alias type: text",
            "default": "idle",
            "enum": [
              "idle",
              "building",
              "error",
              "cleaning"
            ]
          },
          "status_info": {
            "type": "string",
            "description": "alias type: text"
          },
          "create_current": {
            "type": "boolean",
            "default": true
          },
          "max_exports": {
            "maximum": 100,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "default": 3
          }
        }
      },
      "volumes_post": {
        "required": [
          "name",
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "is_snapshot": {
            "type": "boolean"
          },
          "drive": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "modified": {
            "type": "integer",
            "description": "alias type: modified",
            "format": "int32"
          },
          "maxsize": {
            "maximum": 549755813888000,
            "minimum": 1048576,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "fs_type": {
            "type": "string",
            "description": "alias type: text",
            "default": "ext4",
            "enum": [
              "ext4",
              "fc_nimble",
              "cifs",
              "nfs",
              "ybfs",
              "verge_vm_export"
            ]
          },
          "discard": {
            "type": "boolean",
            "default": true
          },
          "read_only": {
            "type": "boolean",
            "default": false
          },
          "owner_user": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "owner_group": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "automount_snapshots": {
            "type": "boolean",
            "default": false
          },
          "remote_target": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "cifs_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "cifs_password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "cifs_protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "2.0",
            "enum": [
              "1.0",
              "2.0",
              "2.1",
              "3.0"
            ]
          },
          "nfs_protocol": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "",
              "2",
              "3",
              "4"
            ]
          },
          "read_ahead_kb": {
            "type": "string",
            "description": "alias type: text",
            "default": "0",
            "enum": [
              "0",
              "64",
              "128",
              "256",
              "512",
              "1024",
              "2048",
              "4096"
            ]
          },
          "optimize": {
            "type": "string",
            "description": "alias type: optimize",
            "default": "general",
            "enum": [
              "general",
              "large"
            ]
          },
          "mount_options": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "encrypt": {
            "type": "boolean",
            "default": false
          },
          "encryption_key": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password",
            "default": ""
          },
          "parent_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "additional_settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "additional_setting_values": {
            "type": "object",
            "properties": {}
          },
          "creator": {
            "type": "string",
            "description": "alias type: creator"
          }
        }
      },
      "volumes_put": {
        "type": "object",
        "properties": {
          "is_snapshot": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 128,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_][a-zA-Z0-9_-]*$",
            "type": "string",
            "description": "alias type: objectname"
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: description"
          },
          "enabled": {
            "type": "boolean",
            "description": "alias type: enabled",
            "default": true
          },
          "maxsize": {
            "maximum": 549755813888000,
            "minimum": 1048576,
            "type": "integer",
            "description": "alias type: disksize",
            "format": "int64"
          },
          "preferred_tier": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "snapshot_profile": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "discard": {
            "type": "boolean",
            "default": true
          },
          "read_only": {
            "type": "boolean",
            "default": false
          },
          "owner_user": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "owner_group": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "automount_snapshots": {
            "type": "boolean",
            "default": false
          },
          "remote_target": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "cifs_user": {
            "type": "string",
            "description": "alias type: text"
          },
          "cifs_password": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password"
          },
          "cifs_protocol": {
            "type": "string",
            "description": "alias type: text",
            "default": "2.0",
            "enum": [
              "1.0",
              "2.0",
              "2.1",
              "3.0"
            ]
          },
          "nfs_protocol": {
            "type": "string",
            "description": "alias type: text",
            "enum": [
              "",
              "2",
              "3",
              "4"
            ]
          },
          "read_ahead_kb": {
            "type": "string",
            "description": "alias type: text",
            "default": "0",
            "enum": [
              "0",
              "64",
              "128",
              "256",
              "512",
              "1024",
              "2048",
              "4096"
            ]
          },
          "optimize": {
            "type": "string",
            "description": "alias type: optimize",
            "default": "general",
            "enum": [
              "general",
              "large"
            ]
          },
          "mount_options": {
            "type": "string",
            "description": "alias type: text",
            "default": ""
          },
          "encryption_key": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "alias type: password",
            "default": ""
          },
          "parent_snapshot": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "status": {
            "type": "integer",
            "description": "alias type: row",
            "format": "int64"
          },
          "note": {
            "maxLength": 1024,
            "type": "string",
            "description": "alias type: textarea"
          },
          "additional_settings": {
            "type": "string",
            "description": "alias type: row"
          },
          "additional_setting_values": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "post_response": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "api path to the resource created"
          },
          "dbpath": {
            "type": "string",
            "description": "api path to the resource created that is relative to the database"
          },
          "$row": {
            "type": "integer",
            "description": "database row",
            "format": "int64"
          },
          "$key": {
            "type": "string",
            "description": "id of the new resource used for requests"
          }
        }
      },
      "err_response": {
        "type": "object",
        "properties": {
          "err": {
            "type": "string",
            "description": "error description"
          }
        }
      },
      "table_response": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "table name"
          },
          "type": {
            "type": "string",
            "description": "type"
          },
          "rowcount": {
            "type": "integer",
            "description": "number of rows",
            "format": "int64"
          },
          "highrow": {
            "type": "integer",
            "description": "highest row position",
            "format": "int64"
          },
          "schema": {
            "type": "object",
            "properties": {},
            "description": "database table schema"
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "successful operation",
        "content": {}
      }
    },
    "securitySchemes": {
      "basic_auth": {
        "type": "http",
        "description": "HTTP Basic Authentication. Works only over `HTTPS`",
        "scheme": "basic"
      },
      "token": {
        "type": "apiKey",
        "description": "Token Authentication. Works only over `HTTPS`",
        "name": "x-yottabyte-token",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}